
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f0  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08100b88  08100b88  00001b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100ba4  08100ba4  00001ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100ba8  08100ba8  00001ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  10000000  10000000  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  10000000  08100bac  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000038  08100bac  00002038  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002e02  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000008db  00000000  00000000  000049de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001b0  00000000  00000000  000052c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000012d  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032888  00000000  00000000  0000559d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000032a4  00000000  00000000  00037e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120fd0  00000000  00000000  0003b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015c099  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000041c  00000000  00000000  0015c0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  0015c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000000 	.word	0x10000000
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100b70 	.word	0x08100b70

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000004 	.word	0x10000004
 81002d4:	08100b70 	.word	0x08100b70

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <gpio_check_freq>:
#include "GPIO.h"

/*----------------------------------------------------------------------------*/


void gpio_check_freq(void){
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
	/*
	 * Configuration de la sortie de la clock systeme sur GPIO PA8
	*/

	// Alternante function sur PA8
	GPIOA -> MODER &= ~GPIO_MODER_MODE8_0;
 810030c:	4b26      	ldr	r3, [pc, #152]	@ (81003a8 <gpio_check_freq+0xa0>)
 810030e:	681b      	ldr	r3, [r3, #0]
 8100310:	4a25      	ldr	r2, [pc, #148]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100316:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE8_1;
 8100318:	4b23      	ldr	r3, [pc, #140]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031a:	681b      	ldr	r3, [r3, #0]
 810031c:	4a22      	ldr	r2, [pc, #136]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100322:	6013      	str	r3, [r2, #0]


	// Choix de la fonction alternative --> MCO1 sur PA8 --> AF0 --> 0000

	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_0;
 8100324:	4b20      	ldr	r3, [pc, #128]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100328:	4a1f      	ldr	r2, [pc, #124]	@ (81003a8 <gpio_check_freq+0xa0>)
 810032a:	f023 0301 	bic.w	r3, r3, #1
 810032e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_1;
 8100330:	4b1d      	ldr	r3, [pc, #116]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100334:	4a1c      	ldr	r2, [pc, #112]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100336:	f023 0302 	bic.w	r3, r3, #2
 810033a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_2;
 810033c:	4b1a      	ldr	r3, [pc, #104]	@ (81003a8 <gpio_check_freq+0xa0>)
 810033e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100340:	4a19      	ldr	r2, [pc, #100]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100342:	f023 0304 	bic.w	r3, r3, #4
 8100346:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_3;
 8100348:	4b17      	ldr	r3, [pc, #92]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810034c:	4a16      	ldr	r2, [pc, #88]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034e:	f023 0308 	bic.w	r3, r3, #8
 8100352:	6253      	str	r3, [r2, #36]	@ 0x24
	/*
	 * Configuration de la sortie du TIM2 sur GPIO PA0
	*/

	// Alternate function sur PA0
	GPIOA -> MODER &= ~GPIO_MODER_MODE0_0;
 8100354:	4b14      	ldr	r3, [pc, #80]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100356:	681b      	ldr	r3, [r3, #0]
 8100358:	4a13      	ldr	r2, [pc, #76]	@ (81003a8 <gpio_check_freq+0xa0>)
 810035a:	f023 0301 	bic.w	r3, r3, #1
 810035e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE0_1;
 8100360:	4b11      	ldr	r3, [pc, #68]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100362:	681b      	ldr	r3, [r3, #0]
 8100364:	4a10      	ldr	r2, [pc, #64]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100366:	f043 0302 	orr.w	r3, r3, #2
 810036a:	6013      	str	r3, [r2, #0]

	// Choix de la fonction alternative --> TIM2_CH1 sur PA0 --> AF1 --> 0001

	GPIOA -> AFR[0] |= GPIO_AFRL_AFSEL0_0;
 810036c:	4b0e      	ldr	r3, [pc, #56]	@ (81003a8 <gpio_check_freq+0xa0>)
 810036e:	6a1b      	ldr	r3, [r3, #32]
 8100370:	4a0d      	ldr	r2, [pc, #52]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100372:	f043 0301 	orr.w	r3, r3, #1
 8100376:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_1;
 8100378:	4b0b      	ldr	r3, [pc, #44]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037a:	6a1b      	ldr	r3, [r3, #32]
 810037c:	4a0a      	ldr	r2, [pc, #40]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037e:	f023 0302 	bic.w	r3, r3, #2
 8100382:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_2;
 8100384:	4b08      	ldr	r3, [pc, #32]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100386:	6a1b      	ldr	r3, [r3, #32]
 8100388:	4a07      	ldr	r2, [pc, #28]	@ (81003a8 <gpio_check_freq+0xa0>)
 810038a:	f023 0304 	bic.w	r3, r3, #4
 810038e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_3;
 8100390:	4b05      	ldr	r3, [pc, #20]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100392:	6a1b      	ldr	r3, [r3, #32]
 8100394:	4a04      	ldr	r2, [pc, #16]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100396:	f023 0308 	bic.w	r3, r3, #8
 810039a:	6213      	str	r3, [r2, #32]

}
 810039c:	bf00      	nop
 810039e:	46bd      	mov	sp, r7
 81003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a4:	4770      	bx	lr
 81003a6:	bf00      	nop
 81003a8:	58020000 	.word	0x58020000

081003ac <gpio_config>:
	uint32_t i;

	for(i=0; i<nb; i++){}
}

void gpio_config(void){
 81003ac:	b480      	push	{r7}
 81003ae:	af00      	add	r7, sp, #0

	//Activation de la clock sur GPIO K
	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOKEN;
 81003b0:	4b0c      	ldr	r3, [pc, #48]	@ (81003e4 <gpio_config+0x38>)
 81003b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003b6:	4a0b      	ldr	r2, [pc, #44]	@ (81003e4 <gpio_config+0x38>)
 81003b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81003bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Configuration de PK6 en OUPTUT
	GPIOK -> MODER |= GPIO_MODER_MODE6_0;
 81003c0:	4b09      	ldr	r3, [pc, #36]	@ (81003e8 <gpio_config+0x3c>)
 81003c2:	681b      	ldr	r3, [r3, #0]
 81003c4:	4a08      	ldr	r2, [pc, #32]	@ (81003e8 <gpio_config+0x3c>)
 81003c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81003ca:	6013      	str	r3, [r2, #0]
	GPIOK -> MODER &= ~ GPIO_MODER_MODE6_1;
 81003cc:	4b06      	ldr	r3, [pc, #24]	@ (81003e8 <gpio_config+0x3c>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	4a05      	ldr	r2, [pc, #20]	@ (81003e8 <gpio_config+0x3c>)
 81003d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81003d6:	6013      	str	r3, [r2, #0]
}
 81003d8:	bf00      	nop
 81003da:	46bd      	mov	sp, r7
 81003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e0:	4770      	bx	lr
 81003e2:	bf00      	nop
 81003e4:	58024400 	.word	0x58024400
 81003e8:	58022800 	.word	0x58022800

081003ec <usart_gpio>:
	delay(100000);
	GPIOK -> BSRR |= GPIO_BSRR_BR6;
	delay(100000);
}

void usart_gpio(void){
 81003ec:	b480      	push	{r7}
 81003ee:	af00      	add	r7, sp, #0
	 *	MODER[15:0][1:0] = ‘01’: General purpose output mode
	 *	MODER[15:0][1:0] = ‘10’: Alternate function mode
	 *	MODER[15:0][1:0] = ‘11’: Analog mode (reset state)
	*/

	GPIOA -> MODER &= ~GPIO_MODER_MODE9_0;
 81003f0:	4b3c      	ldr	r3, [pc, #240]	@ (81004e4 <usart_gpio+0xf8>)
 81003f2:	681b      	ldr	r3, [r3, #0]
 81003f4:	4a3b      	ldr	r2, [pc, #236]	@ (81004e4 <usart_gpio+0xf8>)
 81003f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 81003fa:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE9_1;
 81003fc:	4b39      	ldr	r3, [pc, #228]	@ (81004e4 <usart_gpio+0xf8>)
 81003fe:	681b      	ldr	r3, [r3, #0]
 8100400:	4a38      	ldr	r2, [pc, #224]	@ (81004e4 <usart_gpio+0xf8>)
 8100402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8100406:	6013      	str	r3, [r2, #0]

	//High speed
	GPIOA -> OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8100408:	4b36      	ldr	r3, [pc, #216]	@ (81004e4 <usart_gpio+0xf8>)
 810040a:	689b      	ldr	r3, [r3, #8]
 810040c:	4a35      	ldr	r2, [pc, #212]	@ (81004e4 <usart_gpio+0xf8>)
 810040e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8100412:	6093      	str	r3, [r2, #8]

	// Configuration de la fonction alternative AF7 pour USART TX
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_0;
 8100414:	4b33      	ldr	r3, [pc, #204]	@ (81004e4 <usart_gpio+0xf8>)
 8100416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100418:	4a32      	ldr	r2, [pc, #200]	@ (81004e4 <usart_gpio+0xf8>)
 810041a:	f043 0310 	orr.w	r3, r3, #16
 810041e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_1;
 8100420:	4b30      	ldr	r3, [pc, #192]	@ (81004e4 <usart_gpio+0xf8>)
 8100422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100424:	4a2f      	ldr	r2, [pc, #188]	@ (81004e4 <usart_gpio+0xf8>)
 8100426:	f043 0320 	orr.w	r3, r3, #32
 810042a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_2;
 810042c:	4b2d      	ldr	r3, [pc, #180]	@ (81004e4 <usart_gpio+0xf8>)
 810042e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100430:	4a2c      	ldr	r2, [pc, #176]	@ (81004e4 <usart_gpio+0xf8>)
 8100432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100436:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL9_3;
 8100438:	4b2a      	ldr	r3, [pc, #168]	@ (81004e4 <usart_gpio+0xf8>)
 810043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810043c:	4a29      	ldr	r2, [pc, #164]	@ (81004e4 <usart_gpio+0xf8>)
 810043e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100442:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA -> MODER &= ~GPIO_MODER_MODE10_0;
 8100444:	4b27      	ldr	r3, [pc, #156]	@ (81004e4 <usart_gpio+0xf8>)
 8100446:	681b      	ldr	r3, [r3, #0]
 8100448:	4a26      	ldr	r2, [pc, #152]	@ (81004e4 <usart_gpio+0xf8>)
 810044a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810044e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE10_1;
 8100450:	4b24      	ldr	r3, [pc, #144]	@ (81004e4 <usart_gpio+0xf8>)
 8100452:	681b      	ldr	r3, [r3, #0]
 8100454:	4a23      	ldr	r2, [pc, #140]	@ (81004e4 <usart_gpio+0xf8>)
 8100456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810045a:	6013      	str	r3, [r2, #0]

	//High speed
	GPIOA -> OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 810045c:	4b21      	ldr	r3, [pc, #132]	@ (81004e4 <usart_gpio+0xf8>)
 810045e:	689b      	ldr	r3, [r3, #8]
 8100460:	4a20      	ldr	r2, [pc, #128]	@ (81004e4 <usart_gpio+0xf8>)
 8100462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8100466:	6093      	str	r3, [r2, #8]

	// Configuration de la fonction alternative AF7 pour USART RX
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_0;
 8100468:	4b1e      	ldr	r3, [pc, #120]	@ (81004e4 <usart_gpio+0xf8>)
 810046a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810046c:	4a1d      	ldr	r2, [pc, #116]	@ (81004e4 <usart_gpio+0xf8>)
 810046e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100472:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_1;
 8100474:	4b1b      	ldr	r3, [pc, #108]	@ (81004e4 <usart_gpio+0xf8>)
 8100476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100478:	4a1a      	ldr	r2, [pc, #104]	@ (81004e4 <usart_gpio+0xf8>)
 810047a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810047e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8100480:	4b18      	ldr	r3, [pc, #96]	@ (81004e4 <usart_gpio+0xf8>)
 8100482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100484:	4a17      	ldr	r2, [pc, #92]	@ (81004e4 <usart_gpio+0xf8>)
 8100486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810048a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL10_3;
 810048c:	4b15      	ldr	r3, [pc, #84]	@ (81004e4 <usart_gpio+0xf8>)
 810048e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100490:	4a14      	ldr	r2, [pc, #80]	@ (81004e4 <usart_gpio+0xf8>)
 8100492:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8100496:	6253      	str	r3, [r2, #36]	@ 0x24


	/*
	 * Clock activée sur gpio A
	 */
	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 8100498:	4b13      	ldr	r3, [pc, #76]	@ (81004e8 <usart_gpio+0xfc>)
 810049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810049e:	4a12      	ldr	r2, [pc, #72]	@ (81004e8 <usart_gpio+0xfc>)
 81004a0:	f043 0301 	orr.w	r3, r3, #1
 81004a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0


	GPIOB -> MODER &= ~GPIO_MODER_MODE14_0;
 81004a8:	4b10      	ldr	r3, [pc, #64]	@ (81004ec <usart_gpio+0x100>)
 81004aa:	681b      	ldr	r3, [r3, #0]
 81004ac:	4a0f      	ldr	r2, [pc, #60]	@ (81004ec <usart_gpio+0x100>)
 81004ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81004b2:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= GPIO_MODER_MODE14_1;
 81004b4:	4b0d      	ldr	r3, [pc, #52]	@ (81004ec <usart_gpio+0x100>)
 81004b6:	681b      	ldr	r3, [r3, #0]
 81004b8:	4a0c      	ldr	r2, [pc, #48]	@ (81004ec <usart_gpio+0x100>)
 81004ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 81004be:	6013      	str	r3, [r2, #0]

	GPIOB -> MODER &= ~GPIO_MODER_MODE15_0;
 81004c0:	4b0a      	ldr	r3, [pc, #40]	@ (81004ec <usart_gpio+0x100>)
 81004c2:	681b      	ldr	r3, [r3, #0]
 81004c4:	4a09      	ldr	r2, [pc, #36]	@ (81004ec <usart_gpio+0x100>)
 81004c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 81004ca:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= GPIO_MODER_MODE15_1;
 81004cc:	4b07      	ldr	r3, [pc, #28]	@ (81004ec <usart_gpio+0x100>)
 81004ce:	681b      	ldr	r3, [r3, #0]
 81004d0:	4a06      	ldr	r2, [pc, #24]	@ (81004ec <usart_gpio+0x100>)
 81004d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81004d6:	6013      	str	r3, [r2, #0]
}
 81004d8:	bf00      	nop
 81004da:	46bd      	mov	sp, r7
 81004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e0:	4770      	bx	lr
 81004e2:	bf00      	nop
 81004e4:	58020000 	.word	0x58020000
 81004e8:	58024400 	.word	0x58024400
 81004ec:	58020400 	.word	0x58020400

081004f0 <clock_config>:
 */

#include <stdint.h>
#include "RCC_CLOCK.h"

void clock_config(){
 81004f0:	b480      	push	{r7}
 81004f2:	af00      	add	r7, sp, #0


	RCC -> RSR |= RCC_RSR_SFT2RSTF; 					// Reset des registres du CPU2
 81004f4:	4b3c      	ldr	r3, [pc, #240]	@ (81005e8 <clock_config+0xf8>)
 81004f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 81004fa:	4a3b      	ldr	r2, [pc, #236]	@ (81005e8 <clock_config+0xf8>)
 81004fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100500:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0


	RCC -> CR |= RCC_CR_HSEON; 							// Clock HSE on
 8100504:	4b38      	ldr	r3, [pc, #224]	@ (81005e8 <clock_config+0xf8>)
 8100506:	681b      	ldr	r3, [r3, #0]
 8100508:	4a37      	ldr	r2, [pc, #220]	@ (81005e8 <clock_config+0xf8>)
 810050a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810050e:	6013      	str	r3, [r2, #0]
	RCC -> CFGR |= RCC_CFGR_SW_HSE; 					// Sys CLK sur HSE
 8100510:	4b35      	ldr	r3, [pc, #212]	@ (81005e8 <clock_config+0xf8>)
 8100512:	691b      	ldr	r3, [r3, #16]
 8100514:	4a34      	ldr	r2, [pc, #208]	@ (81005e8 <clock_config+0xf8>)
 8100516:	f043 0302 	orr.w	r3, r3, #2
 810051a:	6113      	str	r3, [r2, #16]

	RCC -> CR &= ~RCC_CR_HSION; 						// Clock HSI off
 810051c:	4b32      	ldr	r3, [pc, #200]	@ (81005e8 <clock_config+0xf8>)
 810051e:	681b      	ldr	r3, [r3, #0]
 8100520:	4a31      	ldr	r2, [pc, #196]	@ (81005e8 <clock_config+0xf8>)
 8100522:	f023 0301 	bic.w	r3, r3, #1
 8100526:	6013      	str	r3, [r2, #0]
	RCC -> CR &= RCC_CR_HSIDIV_1; 						// RAZ prescaler HSI
 8100528:	4b2f      	ldr	r3, [pc, #188]	@ (81005e8 <clock_config+0xf8>)
 810052a:	681b      	ldr	r3, [r3, #0]
 810052c:	4b2e      	ldr	r3, [pc, #184]	@ (81005e8 <clock_config+0xf8>)
 810052e:	2200      	movs	r2, #0
 8100530:	601a      	str	r2, [r3, #0]
	RCC -> CR |= RCC_CR_HSIDIV_8; 						// Prescaler HSI /8
 8100532:	4b2d      	ldr	r3, [pc, #180]	@ (81005e8 <clock_config+0xf8>)
 8100534:	681b      	ldr	r3, [r3, #0]
 8100536:	4a2c      	ldr	r2, [pc, #176]	@ (81005e8 <clock_config+0xf8>)
 8100538:	f043 0318 	orr.w	r3, r3, #24
 810053c:	6013      	str	r3, [r2, #0]

	/* ------------ MUX MCO1 sur HSI [0, 0, 0] ------------ */
	RCC -> CFGR &= ~RCC_CFGR_MCO1_0;
 810053e:	4b2a      	ldr	r3, [pc, #168]	@ (81005e8 <clock_config+0xf8>)
 8100540:	691b      	ldr	r3, [r3, #16]
 8100542:	4a29      	ldr	r2, [pc, #164]	@ (81005e8 <clock_config+0xf8>)
 8100544:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8100548:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_1;
 810054a:	4b27      	ldr	r3, [pc, #156]	@ (81005e8 <clock_config+0xf8>)
 810054c:	691b      	ldr	r3, [r3, #16]
 810054e:	4a26      	ldr	r2, [pc, #152]	@ (81005e8 <clock_config+0xf8>)
 8100550:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8100554:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_2;
 8100556:	4b24      	ldr	r3, [pc, #144]	@ (81005e8 <clock_config+0xf8>)
 8100558:	691b      	ldr	r3, [r3, #16]
 810055a:	4a23      	ldr	r2, [pc, #140]	@ (81005e8 <clock_config+0xf8>)
 810055c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8100560:	6113      	str	r3, [r2, #16]

	RCC -> CFGR &= RCC_CFGR_SW_HSI; 						// Sys CLK sur HSI
 8100562:	4b21      	ldr	r3, [pc, #132]	@ (81005e8 <clock_config+0xf8>)
 8100564:	691b      	ldr	r3, [r3, #16]
 8100566:	4b20      	ldr	r3, [pc, #128]	@ (81005e8 <clock_config+0xf8>)
 8100568:	2200      	movs	r2, #0
 810056a:	611a      	str	r2, [r3, #16]
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_1;
	RCC -> CFGR &= ~RCC_CFGR_MCO1PRE_2;
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_3;
	*/

	RCC -> CR |= RCC_CR_HSION; 							// Clock HSI on
 810056c:	4b1e      	ldr	r3, [pc, #120]	@ (81005e8 <clock_config+0xf8>)
 810056e:	681b      	ldr	r3, [r3, #0]
 8100570:	4a1d      	ldr	r2, [pc, #116]	@ (81005e8 <clock_config+0xf8>)
 8100572:	f043 0301 	orr.w	r3, r3, #1
 8100576:	6013      	str	r3, [r2, #0]
	while(((RCC -> CR >> 2) & 0x1) != 1) ; 				// Attente HSI stable
 8100578:	bf00      	nop
 810057a:	4b1b      	ldr	r3, [pc, #108]	@ (81005e8 <clock_config+0xf8>)
 810057c:	681b      	ldr	r3, [r3, #0]
 810057e:	089b      	lsrs	r3, r3, #2
 8100580:	f003 0301 	and.w	r3, r3, #1
 8100584:	2b01      	cmp	r3, #1
 8100586:	d1f8      	bne.n	810057a <clock_config+0x8a>

	RCC -> CR &= ~RCC_CR_HSEON; 						// Clock HSE off
 8100588:	4b17      	ldr	r3, [pc, #92]	@ (81005e8 <clock_config+0xf8>)
 810058a:	681b      	ldr	r3, [r3, #0]
 810058c:	4a16      	ldr	r2, [pc, #88]	@ (81005e8 <clock_config+0xf8>)
 810058e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100592:	6013      	str	r3, [r2, #0]


	while(((RCC -> CR >> 14) & 0x1) != 1) ; 			// Clock domain stable D1
 8100594:	bf00      	nop
 8100596:	4b14      	ldr	r3, [pc, #80]	@ (81005e8 <clock_config+0xf8>)
 8100598:	681b      	ldr	r3, [r3, #0]
 810059a:	0b9b      	lsrs	r3, r3, #14
 810059c:	f003 0301 	and.w	r3, r3, #1
 81005a0:	2b01      	cmp	r3, #1
 81005a2:	d1f8      	bne.n	8100596 <clock_config+0xa6>
	while(((RCC -> CR >> 15) & 0x1) != 1) ;				// -				   D2
 81005a4:	bf00      	nop
 81005a6:	4b10      	ldr	r3, [pc, #64]	@ (81005e8 <clock_config+0xf8>)
 81005a8:	681b      	ldr	r3, [r3, #0]
 81005aa:	0bdb      	lsrs	r3, r3, #15
 81005ac:	f003 0301 	and.w	r3, r3, #1
 81005b0:	2b01      	cmp	r3, #1
 81005b2:	d1f8      	bne.n	81005a6 <clock_config+0xb6>

	RCC -> D1CFGR &= ~RCC_D1CFGR_HPRE_DIV1; 			// HPRE PRESCALER /0
 81005b4:	4b0c      	ldr	r3, [pc, #48]	@ (81005e8 <clock_config+0xf8>)
 81005b6:	4a0c      	ldr	r2, [pc, #48]	@ (81005e8 <clock_config+0xf8>)
 81005b8:	699b      	ldr	r3, [r3, #24]
 81005ba:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1PPRE_DIV1; 			// D1PPRE PRESCALER /0
 81005bc:	4b0a      	ldr	r3, [pc, #40]	@ (81005e8 <clock_config+0xf8>)
 81005be:	4a0a      	ldr	r2, [pc, #40]	@ (81005e8 <clock_config+0xf8>)
 81005c0:	699b      	ldr	r3, [r3, #24]
 81005c2:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1CPRE_DIV1; 			// D1CPRE PRESCALER /0
 81005c4:	4b08      	ldr	r3, [pc, #32]	@ (81005e8 <clock_config+0xf8>)
 81005c6:	4a08      	ldr	r2, [pc, #32]	@ (81005e8 <clock_config+0xf8>)
 81005c8:	699b      	ldr	r3, [r3, #24]
 81005ca:	6193      	str	r3, [r2, #24]

	/*
	 * Mise à ON des clock périphériques
	*/

	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 81005cc:	4b06      	ldr	r3, [pc, #24]	@ (81005e8 <clock_config+0xf8>)
 81005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005d2:	4a05      	ldr	r2, [pc, #20]	@ (81005e8 <clock_config+0xf8>)
 81005d4:	f043 0301 	orr.w	r3, r3, #1
 81005d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

}
 81005dc:	bf00      	nop
 81005de:	46bd      	mov	sp, r7
 81005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e4:	4770      	bx	lr
 81005e6:	bf00      	nop
 81005e8:	58024400 	.word	0x58024400

081005ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81005ec:	b480      	push	{r7}
 81005ee:	b083      	sub	sp, #12
 81005f0:	af00      	add	r7, sp, #0
 81005f2:	4603      	mov	r3, r0
 81005f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81005f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81005fa:	2b00      	cmp	r3, #0
 81005fc:	db0b      	blt.n	8100616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81005fe:	88fb      	ldrh	r3, [r7, #6]
 8100600:	f003 021f 	and.w	r2, r3, #31
 8100604:	4907      	ldr	r1, [pc, #28]	@ (8100624 <__NVIC_EnableIRQ+0x38>)
 8100606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810060a:	095b      	lsrs	r3, r3, #5
 810060c:	2001      	movs	r0, #1
 810060e:	fa00 f202 	lsl.w	r2, r0, r2
 8100612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100616:	bf00      	nop
 8100618:	370c      	adds	r7, #12
 810061a:	46bd      	mov	sp, r7
 810061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100620:	4770      	bx	lr
 8100622:	bf00      	nop
 8100624:	e000e100 	.word	0xe000e100

08100628 <tim2_config>:

#include <stdint.h>
#include "TIM.h"


void tim2_config(){
 8100628:	b580      	push	{r7, lr}
 810062a:	af00      	add	r7, sp, #0

	NVIC_EnableIRQ(TIM2_IRQn); 				// Interruption 28 pour TIM2, confirmer le placement (après les configs ?)
 810062c:	201c      	movs	r0, #28
 810062e:	f7ff ffdd 	bl	81005ec <__NVIC_EnableIRQ>

	RCC -> APB1LENR |= RCC_APB1LENR_TIM2EN;
 8100632:	4b19      	ldr	r3, [pc, #100]	@ (8100698 <tim2_config+0x70>)
 8100634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100638:	4a17      	ldr	r2, [pc, #92]	@ (8100698 <tim2_config+0x70>)
 810063a:	f043 0301 	orr.w	r3, r3, #1
 810063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	TIM2 -> ARR &= 0x0;
 8100642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810064c:	2200      	movs	r2, #0
 810064e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2 -> ARR |= 0x190;			// 0d = 400
 8100650:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810065a:	f443 73c8 	orr.w	r3, r3, #400	@ 0x190
 810065e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	//Configuration du prescaler
	TIM2 -> PSC |= 0x4E20;			// 0xd = 20000
 8100660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100666:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810066a:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 810066e:	f043 0320 	orr.w	r3, r3, #32
 8100672:	6293      	str	r3, [r2, #40]	@ 0x28


	TIM2 -> DIER |= TIM_DIER_UIE;		// Interruptions activées sur UIE
 8100674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100678:	68db      	ldr	r3, [r3, #12]
 810067a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810067e:	f043 0301 	orr.w	r3, r3, #1
 8100682:	60d3      	str	r3, [r2, #12]

	TIM2 -> CR1 |= TIM_CR1_CEN;			// Counter activé
 8100684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100688:	681b      	ldr	r3, [r3, #0]
 810068a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810068e:	f043 0301 	orr.w	r3, r3, #1
 8100692:	6013      	str	r3, [r2, #0]

}
 8100694:	bf00      	nop
 8100696:	bd80      	pop	{r7, pc}
 8100698:	58024400 	.word	0x58024400

0810069c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 810069c:	b480      	push	{r7}
 810069e:	af00      	add	r7, sp, #0


	if(((TIM2 -> SR >> TIM_SR_UIF_Pos) & 0x1) == 1){
 81006a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81006a4:	691b      	ldr	r3, [r3, #16]
 81006a6:	f003 0301 	and.w	r3, r3, #1
 81006aa:	2b01      	cmp	r3, #1
 81006ac:	d10d      	bne.n	81006ca <TIM2_IRQHandler+0x2e>

		GPIOK -> ODR ^= GPIO_ODR_OD6;		// Inverse l'état de la LED
 81006ae:	4b09      	ldr	r3, [pc, #36]	@ (81006d4 <TIM2_IRQHandler+0x38>)
 81006b0:	695b      	ldr	r3, [r3, #20]
 81006b2:	4a08      	ldr	r2, [pc, #32]	@ (81006d4 <TIM2_IRQHandler+0x38>)
 81006b4:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 81006b8:	6153      	str	r3, [r2, #20]
		TIM2 -> SR &= ~TIM_SR_UIF;			// Flag à 0
 81006ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81006be:	691b      	ldr	r3, [r3, #16]
 81006c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81006c4:	f023 0301 	bic.w	r3, r3, #1
 81006c8:	6113      	str	r3, [r2, #16]

	}
}
 81006ca:	bf00      	nop
 81006cc:	46bd      	mov	sp, r7
 81006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d2:	4770      	bx	lr
 81006d4:	58022800 	.word	0x58022800

081006d8 <__NVIC_EnableIRQ>:
{
 81006d8:	b480      	push	{r7}
 81006da:	b083      	sub	sp, #12
 81006dc:	af00      	add	r7, sp, #0
 81006de:	4603      	mov	r3, r0
 81006e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006e6:	2b00      	cmp	r3, #0
 81006e8:	db0b      	blt.n	8100702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81006ea:	88fb      	ldrh	r3, [r7, #6]
 81006ec:	f003 021f 	and.w	r2, r3, #31
 81006f0:	4907      	ldr	r1, [pc, #28]	@ (8100710 <__NVIC_EnableIRQ+0x38>)
 81006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006f6:	095b      	lsrs	r3, r3, #5
 81006f8:	2001      	movs	r0, #1
 81006fa:	fa00 f202 	lsl.w	r2, r0, r2
 81006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8100702:	bf00      	nop
 8100704:	370c      	adds	r7, #12
 8100706:	46bd      	mov	sp, r7
 8100708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810070c:	4770      	bx	lr
 810070e:	bf00      	nop
 8100710:	e000e100 	.word	0xe000e100

08100714 <usart_init>:
/* -------------------------------------------------------------------------- */

#include "USART_driver.h"
#include "string.h"

void usart_init(const USART_Config_t *config){
 8100714:	b580      	push	{r7, lr}
 8100716:	b082      	sub	sp, #8
 8100718:	af00      	add	r7, sp, #0
 810071a:	6078      	str	r0, [r7, #4]

	// Configuration des pins associées
	usart_gpio();
 810071c:	f7ff fe66 	bl	81003ec <usart_gpio>

	/*
	 *  Activation et choix de la clock sur USART1
	 */
	RCC -> D2CCIP2R |= RCC_D2CCIP2R_USART16SEL_0;
 8100720:	4b71      	ldr	r3, [pc, #452]	@ (81008e8 <usart_init+0x1d4>)
 8100722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100724:	4a70      	ldr	r2, [pc, #448]	@ (81008e8 <usart_init+0x1d4>)
 8100726:	f043 0308 	orr.w	r3, r3, #8
 810072a:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> D2CCIP2R |= RCC_D2CCIP2R_USART16SEL_1;
 810072c:	4b6e      	ldr	r3, [pc, #440]	@ (81008e8 <usart_init+0x1d4>)
 810072e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100730:	4a6d      	ldr	r2, [pc, #436]	@ (81008e8 <usart_init+0x1d4>)
 8100732:	f043 0310 	orr.w	r3, r3, #16
 8100736:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> D2CCIP2R &= ~RCC_D2CCIP2R_USART16SEL_2;
 8100738:	4b6b      	ldr	r3, [pc, #428]	@ (81008e8 <usart_init+0x1d4>)
 810073a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810073c:	4a6a      	ldr	r2, [pc, #424]	@ (81008e8 <usart_init+0x1d4>)
 810073e:	f023 0320 	bic.w	r3, r3, #32
 8100742:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8100744:	4b68      	ldr	r3, [pc, #416]	@ (81008e8 <usart_init+0x1d4>)
 8100746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810074a:	4a67      	ldr	r2, [pc, #412]	@ (81008e8 <usart_init+0x1d4>)
 810074c:	f043 0310 	orr.w	r3, r3, #16
 8100750:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	 *  M[1:0] = ‘00’: 1 start bit, 8 Data bits, n Stop bit
	 *	M[1:0] = ‘01’: 1 start bit, 9 Data bits, n Stop bit
	 *	M[1:0] = ‘10’: 1 start bit, 7 Data bits, n Stop bit
	*/

	if(config->USART_WordLenght == 8){
 8100754:	687b      	ldr	r3, [r7, #4]
 8100756:	799b      	ldrb	r3, [r3, #6]
 8100758:	2b08      	cmp	r3, #8
 810075a:	d10c      	bne.n	8100776 <usart_init+0x62>
		USART1 -> CR1 &= ~USART_CR1_M1;
 810075c:	4b63      	ldr	r3, [pc, #396]	@ (81008ec <usart_init+0x1d8>)
 810075e:	681b      	ldr	r3, [r3, #0]
 8100760:	4a62      	ldr	r2, [pc, #392]	@ (81008ec <usart_init+0x1d8>)
 8100762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8100766:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 &= ~USART_CR1_M0;
 8100768:	4b60      	ldr	r3, [pc, #384]	@ (81008ec <usart_init+0x1d8>)
 810076a:	681b      	ldr	r3, [r3, #0]
 810076c:	4a5f      	ldr	r2, [pc, #380]	@ (81008ec <usart_init+0x1d8>)
 810076e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8100772:	6013      	str	r3, [r2, #0]
 8100774:	e020      	b.n	81007b8 <usart_init+0xa4>
	}
	else if(config->USART_WordLenght == 9){
 8100776:	687b      	ldr	r3, [r7, #4]
 8100778:	799b      	ldrb	r3, [r3, #6]
 810077a:	2b09      	cmp	r3, #9
 810077c:	d10c      	bne.n	8100798 <usart_init+0x84>
		USART1 -> CR1 &= ~USART_CR1_M1;
 810077e:	4b5b      	ldr	r3, [pc, #364]	@ (81008ec <usart_init+0x1d8>)
 8100780:	681b      	ldr	r3, [r3, #0]
 8100782:	4a5a      	ldr	r2, [pc, #360]	@ (81008ec <usart_init+0x1d8>)
 8100784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8100788:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 |= USART_CR1_M0;
 810078a:	4b58      	ldr	r3, [pc, #352]	@ (81008ec <usart_init+0x1d8>)
 810078c:	681b      	ldr	r3, [r3, #0]
 810078e:	4a57      	ldr	r2, [pc, #348]	@ (81008ec <usart_init+0x1d8>)
 8100790:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100794:	6013      	str	r3, [r2, #0]
 8100796:	e00f      	b.n	81007b8 <usart_init+0xa4>
	}
	else if(config->USART_WordLenght == 7){
 8100798:	687b      	ldr	r3, [r7, #4]
 810079a:	799b      	ldrb	r3, [r3, #6]
 810079c:	2b07      	cmp	r3, #7
 810079e:	d10b      	bne.n	81007b8 <usart_init+0xa4>
		USART1 -> CR1 |= USART_CR1_M1;
 81007a0:	4b52      	ldr	r3, [pc, #328]	@ (81008ec <usart_init+0x1d8>)
 81007a2:	681b      	ldr	r3, [r3, #0]
 81007a4:	4a51      	ldr	r2, [pc, #324]	@ (81008ec <usart_init+0x1d8>)
 81007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81007aa:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 &= ~USART_CR1_M0;
 81007ac:	4b4f      	ldr	r3, [pc, #316]	@ (81008ec <usart_init+0x1d8>)
 81007ae:	681b      	ldr	r3, [r3, #0]
 81007b0:	4a4e      	ldr	r2, [pc, #312]	@ (81008ec <usart_init+0x1d8>)
 81007b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81007b6:	6013      	str	r3, [r2, #0]
	 *	Resulat équation : 0d1667 ou 0x683
	 *	BRR[15:4] = 0b00000011010000011
	 *	BRR[3:0] = 0b0001
	*/

	USART1 -> CR1 |= USART_CR1_OVER8;						// OVER SAMPLING
 81007b8:	4b4c      	ldr	r3, [pc, #304]	@ (81008ec <usart_init+0x1d8>)
 81007ba:	681b      	ldr	r3, [r3, #0]
 81007bc:	4a4b      	ldr	r2, [pc, #300]	@ (81008ec <usart_init+0x1d8>)
 81007be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81007c2:	6013      	str	r3, [r2, #0]

	// Interruptions
	USART1 -> CR1 &= ~USART_CR1_MME;						// Disable mode Mute
 81007c4:	4b49      	ldr	r3, [pc, #292]	@ (81008ec <usart_init+0x1d8>)
 81007c6:	681b      	ldr	r3, [r3, #0]
 81007c8:	4a48      	ldr	r2, [pc, #288]	@ (81008ec <usart_init+0x1d8>)
 81007ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81007ce:	6013      	str	r3, [r2, #0]
	USART1 -> CR1 |= USART_CR1_RXNEIE;						// Interruption sur RXNE flag
 81007d0:	4b46      	ldr	r3, [pc, #280]	@ (81008ec <usart_init+0x1d8>)
 81007d2:	681b      	ldr	r3, [r3, #0]
 81007d4:	4a45      	ldr	r2, [pc, #276]	@ (81008ec <usart_init+0x1d8>)
 81007d6:	f043 0320 	orr.w	r3, r3, #32
 81007da:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 81007dc:	2025      	movs	r0, #37	@ 0x25
 81007de:	f7ff ff7b 	bl	81006d8 <__NVIC_EnableIRQ>


	USART1 -> BRR &= ~(USART_BRR_DIV_FRACTION_Msk | USART_BRR_DIV_MANTISSA_Msk);		// Configuration BRR 9600 bauds
 81007e2:	4b42      	ldr	r3, [pc, #264]	@ (81008ec <usart_init+0x1d8>)
 81007e4:	68db      	ldr	r3, [r3, #12]
 81007e6:	4a41      	ldr	r2, [pc, #260]	@ (81008ec <usart_init+0x1d8>)
 81007e8:	0c1b      	lsrs	r3, r3, #16
 81007ea:	041b      	lsls	r3, r3, #16
 81007ec:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR |= (0b0001 << USART_BRR_DIV_FRACTION_Pos);
 81007ee:	4b3f      	ldr	r3, [pc, #252]	@ (81008ec <usart_init+0x1d8>)
 81007f0:	68db      	ldr	r3, [r3, #12]
 81007f2:	4a3e      	ldr	r2, [pc, #248]	@ (81008ec <usart_init+0x1d8>)
 81007f4:	f043 0301 	orr.w	r3, r3, #1
 81007f8:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR |= (0b000001101000 << USART_BRR_DIV_MANTISSA_Pos);
 81007fa:	4b3c      	ldr	r3, [pc, #240]	@ (81008ec <usart_init+0x1d8>)
 81007fc:	68db      	ldr	r3, [r3, #12]
 81007fe:	4a3b      	ldr	r2, [pc, #236]	@ (81008ec <usart_init+0x1d8>)
 8100800:	f443 63d0 	orr.w	r3, r3, #1664	@ 0x680
 8100804:	60d3      	str	r3, [r2, #12]
	 *  STOP[1:0] = ‘00’: 1 	Stop bit
	 *	STOP[1:0] = ‘01’: 0.5 	Stop bit
	 *	STOP[1:0] = ‘10’: 2 	Stop bit
	 *	STOP[1:0] = ‘11’: 1.5 	Stop bit
	*/
	switch (config->USART_NoOfStopBits){
 8100806:	687b      	ldr	r3, [r7, #4]
 8100808:	795b      	ldrb	r3, [r3, #5]
 810080a:	3b01      	subs	r3, #1
 810080c:	2b0e      	cmp	r3, #14
 810080e:	d855      	bhi.n	81008bc <usart_init+0x1a8>
 8100810:	a201      	add	r2, pc, #4	@ (adr r2, 8100818 <usart_init+0x104>)
 8100812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100816:	bf00      	nop
 8100818:	08100855 	.word	0x08100855
 810081c:	08100889 	.word	0x08100889
 8100820:	081008bd 	.word	0x081008bd
 8100824:	081008bd 	.word	0x081008bd
 8100828:	0810086f 	.word	0x0810086f
 810082c:	081008bd 	.word	0x081008bd
 8100830:	081008bd 	.word	0x081008bd
 8100834:	081008bd 	.word	0x081008bd
 8100838:	081008bd 	.word	0x081008bd
 810083c:	081008bd 	.word	0x081008bd
 8100840:	081008bd 	.word	0x081008bd
 8100844:	081008bd 	.word	0x081008bd
 8100848:	081008bd 	.word	0x081008bd
 810084c:	081008bd 	.word	0x081008bd
 8100850:	081008a3 	.word	0x081008a3
		case 1 :
			USART1 -> CR2 &= ~USART_CR2_STOP_1;
 8100854:	4b25      	ldr	r3, [pc, #148]	@ (81008ec <usart_init+0x1d8>)
 8100856:	685b      	ldr	r3, [r3, #4]
 8100858:	4a24      	ldr	r2, [pc, #144]	@ (81008ec <usart_init+0x1d8>)
 810085a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810085e:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 &= ~USART_CR2_STOP_0;
 8100860:	4b22      	ldr	r3, [pc, #136]	@ (81008ec <usart_init+0x1d8>)
 8100862:	685b      	ldr	r3, [r3, #4]
 8100864:	4a21      	ldr	r2, [pc, #132]	@ (81008ec <usart_init+0x1d8>)
 8100866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810086a:	6053      	str	r3, [r2, #4]
			break;
 810086c:	e026      	b.n	81008bc <usart_init+0x1a8>
		case 5 :
			USART1 -> CR2 &= ~USART_CR2_STOP_1;
 810086e:	4b1f      	ldr	r3, [pc, #124]	@ (81008ec <usart_init+0x1d8>)
 8100870:	685b      	ldr	r3, [r3, #4]
 8100872:	4a1e      	ldr	r2, [pc, #120]	@ (81008ec <usart_init+0x1d8>)
 8100874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8100878:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 |= USART_CR2_STOP_0;
 810087a:	4b1c      	ldr	r3, [pc, #112]	@ (81008ec <usart_init+0x1d8>)
 810087c:	685b      	ldr	r3, [r3, #4]
 810087e:	4a1b      	ldr	r2, [pc, #108]	@ (81008ec <usart_init+0x1d8>)
 8100880:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100884:	6053      	str	r3, [r2, #4]

			break;
 8100886:	e019      	b.n	81008bc <usart_init+0x1a8>
		case 2 :
			USART1 -> CR2 |= USART_CR2_STOP_1;
 8100888:	4b18      	ldr	r3, [pc, #96]	@ (81008ec <usart_init+0x1d8>)
 810088a:	685b      	ldr	r3, [r3, #4]
 810088c:	4a17      	ldr	r2, [pc, #92]	@ (81008ec <usart_init+0x1d8>)
 810088e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8100892:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 &= ~USART_CR2_STOP_0;
 8100894:	4b15      	ldr	r3, [pc, #84]	@ (81008ec <usart_init+0x1d8>)
 8100896:	685b      	ldr	r3, [r3, #4]
 8100898:	4a14      	ldr	r2, [pc, #80]	@ (81008ec <usart_init+0x1d8>)
 810089a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810089e:	6053      	str	r3, [r2, #4]
			break;
 81008a0:	e00c      	b.n	81008bc <usart_init+0x1a8>
		case 15 :
			USART1 -> CR2 |= USART_CR2_STOP_1;
 81008a2:	4b12      	ldr	r3, [pc, #72]	@ (81008ec <usart_init+0x1d8>)
 81008a4:	685b      	ldr	r3, [r3, #4]
 81008a6:	4a11      	ldr	r2, [pc, #68]	@ (81008ec <usart_init+0x1d8>)
 81008a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 81008ac:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 |= USART_CR2_STOP_0;
 81008ae:	4b0f      	ldr	r3, [pc, #60]	@ (81008ec <usart_init+0x1d8>)
 81008b0:	685b      	ldr	r3, [r3, #4]
 81008b2:	4a0e      	ldr	r2, [pc, #56]	@ (81008ec <usart_init+0x1d8>)
 81008b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81008b8:	6053      	str	r3, [r2, #4]
			break;
 81008ba:	bf00      	nop
	/*
	*  Envoi d'une idle frame, bit TE CR1
	*  CR1[3] = ‘0’		Transmetteur OFF
	*	CR1[3] = ‘1’ 		Transmetteur ON
	*/
	USART1 -> CR1 |= USART_CR1_TE;				// Transmetteur activé
 81008bc:	4b0b      	ldr	r3, [pc, #44]	@ (81008ec <usart_init+0x1d8>)
 81008be:	681b      	ldr	r3, [r3, #0]
 81008c0:	4a0a      	ldr	r2, [pc, #40]	@ (81008ec <usart_init+0x1d8>)
 81008c2:	f043 0308 	orr.w	r3, r3, #8
 81008c6:	6013      	str	r3, [r2, #0]
	USART1 -> CR1 |= USART_CR1_RE;
 81008c8:	4b08      	ldr	r3, [pc, #32]	@ (81008ec <usart_init+0x1d8>)
 81008ca:	681b      	ldr	r3, [r3, #0]
 81008cc:	4a07      	ldr	r2, [pc, #28]	@ (81008ec <usart_init+0x1d8>)
 81008ce:	f043 0304 	orr.w	r3, r3, #4
 81008d2:	6013      	str	r3, [r2, #0]
	*  Enabling USART with UE bit
	*  CR1[0] = ‘0’		USART prescaler et outputs off low-power mode,
	*	CR1[0] = ‘1’ 		USART on
	*/

	USART1 -> CR1 |= USART_CR1_UE;
 81008d4:	4b05      	ldr	r3, [pc, #20]	@ (81008ec <usart_init+0x1d8>)
 81008d6:	681b      	ldr	r3, [r3, #0]
 81008d8:	4a04      	ldr	r2, [pc, #16]	@ (81008ec <usart_init+0x1d8>)
 81008da:	f043 0301 	orr.w	r3, r3, #1
 81008de:	6013      	str	r3, [r2, #0]

}
 81008e0:	bf00      	nop
 81008e2:	3708      	adds	r7, #8
 81008e4:	46bd      	mov	sp, r7
 81008e6:	bd80      	pop	{r7, pc}
 81008e8:	58024400 	.word	0x58024400
 81008ec:	40011000 	.word	0x40011000

081008f0 <usart_transmit>:
volatile uint8_t data_index = 0;
volatile uint8_t usart1_ready = 0;


// Transmission des données
void usart_transmit(char *data){
 81008f0:	b480      	push	{r7}
 81008f2:	b083      	sub	sp, #12
 81008f4:	af00      	add	r7, sp, #0
 81008f6:	6078      	str	r0, [r7, #4]


	while(*data != '\0'){
 81008f8:	e00d      	b.n	8100916 <usart_transmit+0x26>
		while(((USART1 -> ISR >> USART_ISR_TXE_TXFNF_Pos) & 0x1) != 1);
 81008fa:	bf00      	nop
 81008fc:	4b0f      	ldr	r3, [pc, #60]	@ (810093c <usart_transmit+0x4c>)
 81008fe:	69db      	ldr	r3, [r3, #28]
 8100900:	09db      	lsrs	r3, r3, #7
 8100902:	f003 0301 	and.w	r3, r3, #1
 8100906:	2b01      	cmp	r3, #1
 8100908:	d1f8      	bne.n	81008fc <usart_transmit+0xc>
		USART1 -> TDR = *data++;
 810090a:	687b      	ldr	r3, [r7, #4]
 810090c:	1c5a      	adds	r2, r3, #1
 810090e:	607a      	str	r2, [r7, #4]
 8100910:	781a      	ldrb	r2, [r3, #0]
 8100912:	4b0a      	ldr	r3, [pc, #40]	@ (810093c <usart_transmit+0x4c>)
 8100914:	629a      	str	r2, [r3, #40]	@ 0x28
	while(*data != '\0'){
 8100916:	687b      	ldr	r3, [r7, #4]
 8100918:	781b      	ldrb	r3, [r3, #0]
 810091a:	2b00      	cmp	r3, #0
 810091c:	d1ed      	bne.n	81008fa <usart_transmit+0xa>
	}
	// Attendre TC (fin transmission)
	while(((USART1 -> ISR >> USART_ISR_TC_Pos) & 0x1) != 1);
 810091e:	bf00      	nop
 8100920:	4b06      	ldr	r3, [pc, #24]	@ (810093c <usart_transmit+0x4c>)
 8100922:	69db      	ldr	r3, [r3, #28]
 8100924:	099b      	lsrs	r3, r3, #6
 8100926:	f003 0301 	and.w	r3, r3, #1
 810092a:	2b01      	cmp	r3, #1
 810092c:	d1f8      	bne.n	8100920 <usart_transmit+0x30>
}
 810092e:	bf00      	nop
 8100930:	bf00      	nop
 8100932:	370c      	adds	r7, #12
 8100934:	46bd      	mov	sp, r7
 8100936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810093a:	4770      	bx	lr
 810093c:	40011000 	.word	0x40011000

08100940 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8100940:	b480      	push	{r7}
 8100942:	b083      	sub	sp, #12
 8100944:	af00      	add	r7, sp, #0
    if((USART1->ISR & USART_ISR_RXNE_RXFNE) != 0){
 8100946:	4b16      	ldr	r3, [pc, #88]	@ (81009a0 <USART1_IRQHandler+0x60>)
 8100948:	69db      	ldr	r3, [r3, #28]
 810094a:	f003 0320 	and.w	r3, r3, #32
 810094e:	2b00      	cmp	r3, #0
 8100950:	d01f      	beq.n	8100992 <USART1_IRQHandler+0x52>
        // Read received data
        char data = (char)USART1 -> RDR;
 8100952:	4b13      	ldr	r3, [pc, #76]	@ (81009a0 <USART1_IRQHandler+0x60>)
 8100954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100956:	71fb      	strb	r3, [r7, #7]

        if(data_index < USART1_BUFFER_SIZE){
 8100958:	4b12      	ldr	r3, [pc, #72]	@ (81009a4 <USART1_IRQHandler+0x64>)
 810095a:	781b      	ldrb	r3, [r3, #0]
 810095c:	b2db      	uxtb	r3, r3
 810095e:	2b18      	cmp	r3, #24
 8100960:	d814      	bhi.n	810098c <USART1_IRQHandler+0x4c>
            data_buffer[data_index++] = data;
 8100962:	4b10      	ldr	r3, [pc, #64]	@ (81009a4 <USART1_IRQHandler+0x64>)
 8100964:	781b      	ldrb	r3, [r3, #0]
 8100966:	b2db      	uxtb	r3, r3
 8100968:	1c5a      	adds	r2, r3, #1
 810096a:	b2d1      	uxtb	r1, r2
 810096c:	4a0d      	ldr	r2, [pc, #52]	@ (81009a4 <USART1_IRQHandler+0x64>)
 810096e:	7011      	strb	r1, [r2, #0]
 8100970:	4619      	mov	r1, r3
 8100972:	4a0d      	ldr	r2, [pc, #52]	@ (81009a8 <USART1_IRQHandler+0x68>)
 8100974:	79fb      	ldrb	r3, [r7, #7]
 8100976:	5453      	strb	r3, [r2, r1]
            if(data == '\n') {
 8100978:	79fb      	ldrb	r3, [r7, #7]
 810097a:	2b0a      	cmp	r3, #10
 810097c:	d109      	bne.n	8100992 <USART1_IRQHandler+0x52>
                usart1_ready = 1;
 810097e:	4b0b      	ldr	r3, [pc, #44]	@ (81009ac <USART1_IRQHandler+0x6c>)
 8100980:	2201      	movs	r2, #1
 8100982:	701a      	strb	r2, [r3, #0]
                data_index = 0;
 8100984:	4b07      	ldr	r3, [pc, #28]	@ (81009a4 <USART1_IRQHandler+0x64>)
 8100986:	2200      	movs	r2, #0
 8100988:	701a      	strb	r2, [r3, #0]
        }
        else{
            data_index = 0;
        }
    }
}
 810098a:	e002      	b.n	8100992 <USART1_IRQHandler+0x52>
            data_index = 0;
 810098c:	4b05      	ldr	r3, [pc, #20]	@ (81009a4 <USART1_IRQHandler+0x64>)
 810098e:	2200      	movs	r2, #0
 8100990:	701a      	strb	r2, [r3, #0]
}
 8100992:	bf00      	nop
 8100994:	370c      	adds	r7, #12
 8100996:	46bd      	mov	sp, r7
 8100998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099c:	4770      	bx	lr
 810099e:	bf00      	nop
 81009a0:	40011000 	.word	0x40011000
 81009a4:	10000035 	.word	0x10000035
 81009a8:	1000001c 	.word	0x1000001c
 81009ac:	10000036 	.word	0x10000036

081009b0 <rx_data>:

void rx_data(void) {
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
    if(usart1_ready){
 81009b4:	4b06      	ldr	r3, [pc, #24]	@ (81009d0 <rx_data+0x20>)
 81009b6:	781b      	ldrb	r3, [r3, #0]
 81009b8:	b2db      	uxtb	r3, r3
 81009ba:	2b00      	cmp	r3, #0
 81009bc:	d005      	beq.n	81009ca <rx_data+0x1a>
        usart_transmit(data_buffer);
 81009be:	4805      	ldr	r0, [pc, #20]	@ (81009d4 <rx_data+0x24>)
 81009c0:	f7ff ff96 	bl	81008f0 <usart_transmit>
        usart1_ready = 0;
 81009c4:	4b02      	ldr	r3, [pc, #8]	@ (81009d0 <rx_data+0x20>)
 81009c6:	2200      	movs	r2, #0
 81009c8:	701a      	strb	r2, [r3, #0]
    }
}
 81009ca:	bf00      	nop
 81009cc:	bd80      	pop	{r7, pc}
 81009ce:	bf00      	nop
 81009d0:	10000036 	.word	0x10000036
 81009d4:	1000001c 	.word	0x1000001c

081009d8 <__NVIC_SetPriorityGrouping>:
{
 81009d8:	b480      	push	{r7}
 81009da:	b085      	sub	sp, #20
 81009dc:	af00      	add	r7, sp, #0
 81009de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009e0:	687b      	ldr	r3, [r7, #4]
 81009e2:	f003 0307 	and.w	r3, r3, #7
 81009e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8100a1c <__NVIC_SetPriorityGrouping+0x44>)
 81009ea:	68db      	ldr	r3, [r3, #12]
 81009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009ee:	68ba      	ldr	r2, [r7, #8]
 81009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81009f4:	4013      	ands	r3, r2
 81009f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009f8:	68fb      	ldr	r3, [r7, #12]
 81009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81009fc:	68bb      	ldr	r3, [r7, #8]
 81009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100a0a:	4a04      	ldr	r2, [pc, #16]	@ (8100a1c <__NVIC_SetPriorityGrouping+0x44>)
 8100a0c:	68bb      	ldr	r3, [r7, #8]
 8100a0e:	60d3      	str	r3, [r2, #12]
}
 8100a10:	bf00      	nop
 8100a12:	3714      	adds	r7, #20
 8100a14:	46bd      	mov	sp, r7
 8100a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1a:	4770      	bx	lr
 8100a1c:	e000ed00 	.word	0xe000ed00

08100a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a20:	b590      	push	{r4, r7, lr}
 8100a22:	b089      	sub	sp, #36	@ 0x24
 8100a24:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);

  /* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100a26:	2003      	movs	r0, #3
 8100a28:	f7ff ffd6 	bl	81009d8 <__NVIC_SetPriorityGrouping>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	//power_clock_config();
	//flash_config();
	clock_config();
 8100a2c:	f7ff fd60 	bl	81004f0 <clock_config>
	tim2_config();
 8100a30:	f7ff fdfa 	bl	8100628 <tim2_config>

	gpio_config();
 8100a34:	f7ff fcba 	bl	81003ac <gpio_config>
	gpio_check_freq();
 8100a38:	f7ff fc66 	bl	8100308 <gpio_check_freq>

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 8100a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8100a6c <main+0x4c>)
 8100a3e:	f107 0314 	add.w	r3, r7, #20
 8100a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8100a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        .USART_WordLenght = 8,
	        .USART_ParityControl = 0,
	        .USART_HWFlowControl = 0
	 };

	 usart_init(&usart_config);
 8100a48:	f107 0314 	add.w	r3, r7, #20
 8100a4c:	4618      	mov	r0, r3
 8100a4e:	f7ff fe61 	bl	8100714 <usart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	char data_to_send[] = "USART STM32\n";
 8100a52:	4b07      	ldr	r3, [pc, #28]	@ (8100a70 <main+0x50>)
 8100a54:	1d3c      	adds	r4, r7, #4
 8100a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8100a58:	c407      	stmia	r4!, {r0, r1, r2}
 8100a5a:	7023      	strb	r3, [r4, #0]

	usart_transmit(data_to_send);
 8100a5c:	1d3b      	adds	r3, r7, #4
 8100a5e:	4618      	mov	r0, r3
 8100a60:	f7ff ff46 	bl	81008f0 <usart_transmit>


	 while (1)
	 {
		 rx_data();
 8100a64:	f7ff ffa4 	bl	81009b0 <rx_data>
 8100a68:	e7fc      	b.n	8100a64 <main+0x44>
 8100a6a:	bf00      	nop
 8100a6c:	08100b88 	.word	0x08100b88
 8100a70:	08100b94 	.word	0x08100b94

08100a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100a74:	b480      	push	{r7}
 8100a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100a78:	bf00      	nop
 8100a7a:	e7fd      	b.n	8100a78 <NMI_Handler+0x4>

08100a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100a80:	bf00      	nop
 8100a82:	e7fd      	b.n	8100a80 <HardFault_Handler+0x4>

08100a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100a84:	b480      	push	{r7}
 8100a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100a88:	bf00      	nop
 8100a8a:	e7fd      	b.n	8100a88 <MemManage_Handler+0x4>

08100a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100a8c:	b480      	push	{r7}
 8100a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100a90:	bf00      	nop
 8100a92:	e7fd      	b.n	8100a90 <BusFault_Handler+0x4>

08100a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100a94:	b480      	push	{r7}
 8100a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100a98:	bf00      	nop
 8100a9a:	e7fd      	b.n	8100a98 <UsageFault_Handler+0x4>

08100a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100a9c:	b480      	push	{r7}
 8100a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100aa0:	bf00      	nop
 8100aa2:	46bd      	mov	sp, r7
 8100aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa8:	4770      	bx	lr

08100aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100aaa:	b480      	push	{r7}
 8100aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100aae:	bf00      	nop
 8100ab0:	46bd      	mov	sp, r7
 8100ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab6:	4770      	bx	lr

08100ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100ab8:	b480      	push	{r7}
 8100aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100abc:	bf00      	nop
 8100abe:	46bd      	mov	sp, r7
 8100ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac4:	4770      	bx	lr

08100ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100ac6:	b480      	push	{r7}
 8100ac8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100aca:	bf00      	nop
 8100acc:	46bd      	mov	sp, r7
 8100ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad2:	4770      	bx	lr

08100ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100ad8:	f7ff fbfe 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100adc:	480c      	ldr	r0, [pc, #48]	@ (8100b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100ade:	490d      	ldr	r1, [pc, #52]	@ (8100b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8100b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ae4:	e002      	b.n	8100aec <LoopCopyDataInit>

08100ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100aea:	3304      	adds	r3, #4

08100aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100af0:	d3f9      	bcc.n	8100ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100af2:	4a0a      	ldr	r2, [pc, #40]	@ (8100b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100af4:	4c0a      	ldr	r4, [pc, #40]	@ (8100b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100af8:	e001      	b.n	8100afe <LoopFillZerobss>

08100afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100afc:	3204      	adds	r2, #4

08100afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100b00:	d3fb      	bcc.n	8100afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100b02:	f000 f811 	bl	8100b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100b06:	f7ff ff8b 	bl	8100a20 <main>
  bx  lr
 8100b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100b0c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100b10:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100b14:	10000000 	.word	0x10000000
  ldr r2, =_sidata
 8100b18:	08100bac 	.word	0x08100bac
  ldr r2, =_sbss
 8100b1c:	10000000 	.word	0x10000000
  ldr r4, =_ebss
 8100b20:	10000038 	.word	0x10000038

08100b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100b24:	e7fe      	b.n	8100b24 <ADC3_IRQHandler>
	...

08100b28 <__libc_init_array>:
 8100b28:	b570      	push	{r4, r5, r6, lr}
 8100b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8100b60 <__libc_init_array+0x38>)
 8100b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8100b64 <__libc_init_array+0x3c>)
 8100b2e:	1b64      	subs	r4, r4, r5
 8100b30:	10a4      	asrs	r4, r4, #2
 8100b32:	2600      	movs	r6, #0
 8100b34:	42a6      	cmp	r6, r4
 8100b36:	d109      	bne.n	8100b4c <__libc_init_array+0x24>
 8100b38:	4d0b      	ldr	r5, [pc, #44]	@ (8100b68 <__libc_init_array+0x40>)
 8100b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8100b6c <__libc_init_array+0x44>)
 8100b3c:	f000 f818 	bl	8100b70 <_init>
 8100b40:	1b64      	subs	r4, r4, r5
 8100b42:	10a4      	asrs	r4, r4, #2
 8100b44:	2600      	movs	r6, #0
 8100b46:	42a6      	cmp	r6, r4
 8100b48:	d105      	bne.n	8100b56 <__libc_init_array+0x2e>
 8100b4a:	bd70      	pop	{r4, r5, r6, pc}
 8100b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8100b50:	4798      	blx	r3
 8100b52:	3601      	adds	r6, #1
 8100b54:	e7ee      	b.n	8100b34 <__libc_init_array+0xc>
 8100b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8100b5a:	4798      	blx	r3
 8100b5c:	3601      	adds	r6, #1
 8100b5e:	e7f2      	b.n	8100b46 <__libc_init_array+0x1e>
 8100b60:	08100ba4 	.word	0x08100ba4
 8100b64:	08100ba4 	.word	0x08100ba4
 8100b68:	08100ba4 	.word	0x08100ba4
 8100b6c:	08100ba8 	.word	0x08100ba8

08100b70 <_init>:
 8100b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100b72:	bf00      	nop
 8100b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100b76:	bc08      	pop	{r3}
 8100b78:	469e      	mov	lr, r3
 8100b7a:	4770      	bx	lr

08100b7c <_fini>:
 8100b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100b7e:	bf00      	nop
 8100b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100b82:	bc08      	pop	{r3}
 8100b84:	469e      	mov	lr, r3
 8100b86:	4770      	bx	lr
