
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08100664  08100664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100670  08100670  00001670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100674  08100674  00001674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000158  10000000  08100678  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000158  081007d0  00002158  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000174  081007d0  00002174  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001116  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000004d6  00000000  00000000  0000329e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000128  00000000  00000000  00003778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000c3  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032ac7  00000000  00000000  00003963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002373  00000000  00000000  0003642a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012148b  00000000  00000000  0003879d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00159c28  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000290  00000000  00000000  00159c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  00159efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000158 	.word	0x10000158
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810064c 	.word	0x0810064c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000015c 	.word	0x1000015c
 81002d4:	0810064c 	.word	0x0810064c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <gpio_check_freq>:
	.LCKR = GPIO_LCKR_offset,
	.AFR = {GPIO_AFR_offset_0, GPIO_AFR_offset_1}
};


void gpio_check_freq(void){
 8100308:	b480      	push	{r7}
 810030a:	b083      	sub	sp, #12
 810030c:	af00      	add	r7, sp, #0

	/* TODO : Créer une fonction pour la déclaration des registres en tant que pointer */
	volatile uint32_t *GPIO_A_MODER_register = (volatile uint32_t *)((uint32_t)GPIOA + GPIO_offset.MODER);
 810030e:	4b1c      	ldr	r3, [pc, #112]	@ (8100380 <gpio_check_freq+0x78>)
 8100310:	681b      	ldr	r3, [r3, #0]
 8100312:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100316:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 810031a:	607b      	str	r3, [r7, #4]

	*GPIO_A_MODER_register &= ~GPIO_MODER_MODE8_0;
 810031c:	687b      	ldr	r3, [r7, #4]
 810031e:	681b      	ldr	r3, [r3, #0]
 8100320:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8100324:	687b      	ldr	r3, [r7, #4]
 8100326:	601a      	str	r2, [r3, #0]
	*GPIO_A_MODER_register |= GPIO_MODER_MODE8_1;
 8100328:	687b      	ldr	r3, [r7, #4]
 810032a:	681b      	ldr	r3, [r3, #0]
 810032c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8100330:	687b      	ldr	r3, [r7, #4]
 8100332:	601a      	str	r2, [r3, #0]


	// Choix de la fonction alternative --> MCO1 sur PA8 --> AF0 --> 0000
	volatile uint32_t *GPIO_A_AFRH_register = (volatile uint32_t *)((uint32_t)GPIOA + GPIO_offset.AFR[GPIO_AFR_offset_1]);
 8100334:	4b12      	ldr	r3, [pc, #72]	@ (8100380 <gpio_check_freq+0x78>)
 8100336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810033a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810033e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8100342:	603b      	str	r3, [r7, #0]

	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_0;
 8100344:	683b      	ldr	r3, [r7, #0]
 8100346:	681b      	ldr	r3, [r3, #0]
 8100348:	f023 0201 	bic.w	r2, r3, #1
 810034c:	683b      	ldr	r3, [r7, #0]
 810034e:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_1;
 8100350:	683b      	ldr	r3, [r7, #0]
 8100352:	681b      	ldr	r3, [r3, #0]
 8100354:	f023 0202 	bic.w	r2, r3, #2
 8100358:	683b      	ldr	r3, [r7, #0]
 810035a:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_2;
 810035c:	683b      	ldr	r3, [r7, #0]
 810035e:	681b      	ldr	r3, [r3, #0]
 8100360:	f023 0204 	bic.w	r2, r3, #4
 8100364:	683b      	ldr	r3, [r7, #0]
 8100366:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_3;
 8100368:	683b      	ldr	r3, [r7, #0]
 810036a:	681b      	ldr	r3, [r3, #0]
 810036c:	f023 0208 	bic.w	r2, r3, #8
 8100370:	683b      	ldr	r3, [r7, #0]
 8100372:	601a      	str	r2, [r3, #0]



}
 8100374:	bf00      	nop
 8100376:	370c      	adds	r7, #12
 8100378:	46bd      	mov	sp, r7
 810037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810037e:	4770      	bx	lr
 8100380:	10000000 	.word	0x10000000

08100384 <delay>:

void delay(uint32_t nb){
 8100384:	b480      	push	{r7}
 8100386:	b085      	sub	sp, #20
 8100388:	af00      	add	r7, sp, #0
 810038a:	6078      	str	r0, [r7, #4]

	uint32_t i;

	for(i=0; i<nb; i++){}
 810038c:	2300      	movs	r3, #0
 810038e:	60fb      	str	r3, [r7, #12]
 8100390:	e002      	b.n	8100398 <delay+0x14>
 8100392:	68fb      	ldr	r3, [r7, #12]
 8100394:	3301      	adds	r3, #1
 8100396:	60fb      	str	r3, [r7, #12]
 8100398:	68fa      	ldr	r2, [r7, #12]
 810039a:	687b      	ldr	r3, [r7, #4]
 810039c:	429a      	cmp	r2, r3
 810039e:	d3f8      	bcc.n	8100392 <delay+0xe>
}
 81003a0:	bf00      	nop
 81003a2:	bf00      	nop
 81003a4:	3714      	adds	r7, #20
 81003a6:	46bd      	mov	sp, r7
 81003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003ac:	4770      	bx	lr
	...

081003b0 <blink_LED4>:

void blink_LED4(void){
 81003b0:	b580      	push	{r7, lr}
 81003b2:	b084      	sub	sp, #16
 81003b4:	af00      	add	r7, sp, #0

	volatile uint32_t *GPIO_K_MODER_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.MODER);
 81003b6:	4b1c      	ldr	r3, [pc, #112]	@ (8100428 <blink_LED4+0x78>)
 81003b8:	681b      	ldr	r3, [r3, #0]
 81003ba:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81003be:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 81003c2:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *GPIO_K_BSRR_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.BSRR);
 81003c4:	4b18      	ldr	r3, [pc, #96]	@ (8100428 <blink_LED4+0x78>)
 81003c6:	699b      	ldr	r3, [r3, #24]
 81003c8:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81003cc:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 81003d0:	60bb      	str	r3, [r7, #8]

	volatile uint32_t *RCC_AHB4ENR_register = (volatile uint32_t *)RCC_AHB4ENR_address;
 81003d2:	4b16      	ldr	r3, [pc, #88]	@ (810042c <blink_LED4+0x7c>)
 81003d4:	607b      	str	r3, [r7, #4]

	//Activation de la clock sur GPIO K
	*RCC_AHB4ENR_register |= AHB4ENR_K;
 81003d6:	687b      	ldr	r3, [r7, #4]
 81003d8:	681b      	ldr	r3, [r3, #0]
 81003da:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 81003de:	687b      	ldr	r3, [r7, #4]
 81003e0:	601a      	str	r2, [r3, #0]

	//Configuration de PK6 en OUPTUT
	*GPIO_K_MODER_register |= GPIO_MODER_MODE6_0;
 81003e2:	68fb      	ldr	r3, [r7, #12]
 81003e4:	681b      	ldr	r3, [r3, #0]
 81003e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 81003ea:	68fb      	ldr	r3, [r7, #12]
 81003ec:	601a      	str	r2, [r3, #0]
	*GPIO_K_MODER_register &= ~ GPIO_MODER_MODE6_1;
 81003ee:	68fb      	ldr	r3, [r7, #12]
 81003f0:	681b      	ldr	r3, [r3, #0]
 81003f2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 81003f6:	68fb      	ldr	r3, [r7, #12]
 81003f8:	601a      	str	r2, [r3, #0]
	 *	BSRR[15:0] =  ‘1’: Set
	 *	BSRR[31:15] = ‘0’: Nothing
	 *	BSRR[31:15] = ‘1’: Reset
	*/
	//Bit mis à 1
	*GPIO_K_BSRR_register |= GPIO_BSRR_BS6;
 81003fa:	68bb      	ldr	r3, [r7, #8]
 81003fc:	681b      	ldr	r3, [r3, #0]
 81003fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8100402:	68bb      	ldr	r3, [r7, #8]
 8100404:	601a      	str	r2, [r3, #0]
	delay(10000000);
 8100406:	480a      	ldr	r0, [pc, #40]	@ (8100430 <blink_LED4+0x80>)
 8100408:	f7ff ffbc 	bl	8100384 <delay>
	*GPIO_K_BSRR_register |= GPIO_BSRR_BR6;
 810040c:	68bb      	ldr	r3, [r7, #8]
 810040e:	681b      	ldr	r3, [r3, #0]
 8100410:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8100414:	68bb      	ldr	r3, [r7, #8]
 8100416:	601a      	str	r2, [r3, #0]
	delay(10000000);
 8100418:	4805      	ldr	r0, [pc, #20]	@ (8100430 <blink_LED4+0x80>)
 810041a:	f7ff ffb3 	bl	8100384 <delay>
}
 810041e:	bf00      	nop
 8100420:	3710      	adds	r7, #16
 8100422:	46bd      	mov	sp, r7
 8100424:	bd80      	pop	{r7, pc}
 8100426:	bf00      	nop
 8100428:	10000000 	.word	0x10000000
 810042c:	580244e0 	.word	0x580244e0
 8100430:	00989680 	.word	0x00989680

08100434 <clock_config>:
	    .APB1HLPENR = APB1HLPENR_offset,
	    .APB2LPENR = APB2LPENR_offset,
	    .APB4LPENR = APB4LPENR_offset
};

void clock_config(){
 8100434:	b480      	push	{r7}
 8100436:	b085      	sub	sp, #20
 8100438:	af00      	add	r7, sp, #0


	/* --------- Configuration registre RSR -------- */

	volatile uint32_t *RCC_RSR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.RSR);
 810043a:	4b3b      	ldr	r3, [pc, #236]	@ (8100528 <clock_config+0xf4>)
 810043c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8100440:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100444:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100448:	60fb      	str	r3, [r7, #12]

	*RCC_RSR_register |= RCC_RSR_SFT2RSTF; //Reset des registres du CPU2
 810044a:	68fb      	ldr	r3, [r7, #12]
 810044c:	681b      	ldr	r3, [r3, #0]
 810044e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8100452:	68fb      	ldr	r3, [r7, #12]
 8100454:	601a      	str	r2, [r3, #0]
	//DIVM3 PRESCALER DISABLED
*/

	/* --------- Configuration registre CFGR, juste après reset -------- */

	volatile uint32_t *RCC_CFGR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.CFGR);
 8100456:	4b34      	ldr	r3, [pc, #208]	@ (8100528 <clock_config+0xf4>)
 8100458:	691b      	ldr	r3, [r3, #16]
 810045a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810045e:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100462:	60bb      	str	r3, [r7, #8]

	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_0; // MUX MCO1 sur HSI
 8100464:	68bb      	ldr	r3, [r7, #8]
 8100466:	681b      	ldr	r3, [r3, #0]
 8100468:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 810046c:	68bb      	ldr	r3, [r7, #8]
 810046e:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_1; // MUX MCO1 sur HSI
 8100470:	68bb      	ldr	r3, [r7, #8]
 8100472:	681b      	ldr	r3, [r3, #0]
 8100474:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8100478:	68bb      	ldr	r3, [r7, #8]
 810047a:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_2; // MUX MCO1 sur HSI
 810047c:	68bb      	ldr	r3, [r7, #8]
 810047e:	681b      	ldr	r3, [r3, #0]
 8100480:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8100484:	68bb      	ldr	r3, [r7, #8]
 8100486:	601a      	str	r2, [r3, #0]

	*RCC_CFGR_register &= ~RCC_CFGR_MCO1PRE_0;
 8100488:	68bb      	ldr	r3, [r7, #8]
 810048a:	681b      	ldr	r3, [r3, #0]
 810048c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8100490:	68bb      	ldr	r3, [r7, #8]
 8100492:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register |= RCC_CFGR_MCO1PRE_1;
 8100494:	68bb      	ldr	r3, [r7, #8]
 8100496:	681b      	ldr	r3, [r3, #0]
 8100498:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 810049c:	68bb      	ldr	r3, [r7, #8]
 810049e:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1PRE_2;
 81004a0:	68bb      	ldr	r3, [r7, #8]
 81004a2:	681b      	ldr	r3, [r3, #0]
 81004a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 81004a8:	68bb      	ldr	r3, [r7, #8]
 81004aa:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register |= RCC_CFGR_MCO1PRE_3;
 81004ac:	68bb      	ldr	r3, [r7, #8]
 81004ae:	681b      	ldr	r3, [r3, #0]
 81004b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 81004b4:	68bb      	ldr	r3, [r7, #8]
 81004b6:	601a      	str	r2, [r3, #0]

	*RCC_CFGR_register |= RCC_CFGR_SWS_HSI; // System Clock définie sur HSI
 81004b8:	68bb      	ldr	r3, [r7, #8]
 81004ba:	681a      	ldr	r2, [r3, #0]
 81004bc:	68bb      	ldr	r3, [r7, #8]
 81004be:	601a      	str	r2, [r3, #0]


	/* --------- Configuration registre CR - Mise on après configuration -------- */

	volatile uint32_t *RCC_CR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.CR);
 81004c0:	4b19      	ldr	r3, [pc, #100]	@ (8100528 <clock_config+0xf4>)
 81004c2:	681b      	ldr	r3, [r3, #0]
 81004c4:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81004c8:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 81004cc:	607b      	str	r3, [r7, #4]

	*RCC_CR_register |= RCC_CR_HSION; // Clock d'entrée HSI
 81004ce:	687b      	ldr	r3, [r7, #4]
 81004d0:	681b      	ldr	r3, [r3, #0]
 81004d2:	f043 0201 	orr.w	r2, r3, #1
 81004d6:	687b      	ldr	r3, [r7, #4]
 81004d8:	601a      	str	r2, [r3, #0]

	while(((*RCC_CR_register >> 2) & 0x1) != 1) ; // Attente HSI stable
 81004da:	bf00      	nop
 81004dc:	687b      	ldr	r3, [r7, #4]
 81004de:	681b      	ldr	r3, [r3, #0]
 81004e0:	089b      	lsrs	r3, r3, #2
 81004e2:	f003 0301 	and.w	r3, r3, #1
 81004e6:	2b01      	cmp	r3, #1
 81004e8:	d1f8      	bne.n	81004dc <clock_config+0xa8>

	*RCC_CR_register |= RCC_CR_HSIDIV_8; // Prescaler HSI /8
 81004ea:	687b      	ldr	r3, [r7, #4]
 81004ec:	681b      	ldr	r3, [r3, #0]
 81004ee:	f043 0218 	orr.w	r2, r3, #24
 81004f2:	687b      	ldr	r3, [r7, #4]
 81004f4:	601a      	str	r2, [r3, #0]
	while(((*RCC_CR_register >> 25) & 0x1) != 1) ; // PLL1 clock ready
*/

	/* --------- Configuration registre D1CFGR -------- */

	volatile uint32_t *RCC_D1CFGR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.D1CFGR);
 81004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8100528 <clock_config+0xf4>)
 81004f8:	699b      	ldr	r3, [r3, #24]
 81004fa:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81004fe:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100502:	603b      	str	r3, [r7, #0]

	*RCC_D1CFGR_register &= ~RCC_D1CFGR_HPRE_DIV1; //HPRE PRESCALER /0
 8100504:	683b      	ldr	r3, [r7, #0]
 8100506:	681a      	ldr	r2, [r3, #0]
 8100508:	683b      	ldr	r3, [r7, #0]
 810050a:	601a      	str	r2, [r3, #0]

	*RCC_D1CFGR_register &= ~RCC_D1CFGR_D1PPRE_DIV1; //D1PPRE PRESCALER /0
 810050c:	683b      	ldr	r3, [r7, #0]
 810050e:	681a      	ldr	r2, [r3, #0]
 8100510:	683b      	ldr	r3, [r7, #0]
 8100512:	601a      	str	r2, [r3, #0]

	*RCC_D1CFGR_register &= ~RCC_D1CFGR_D1CPRE_DIV1; //D1CPRE PRESCALER /0
 8100514:	683b      	ldr	r3, [r7, #0]
 8100516:	681a      	ldr	r2, [r3, #0]
 8100518:	683b      	ldr	r3, [r7, #0]
 810051a:	601a      	str	r2, [r3, #0]





}
 810051c:	bf00      	nop
 810051e:	3714      	adds	r7, #20
 8100520:	46bd      	mov	sp, r7
 8100522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100526:	4770      	bx	lr
 8100528:	10000028 	.word	0x10000028

0810052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810052c:	b580      	push	{r7, lr}
 810052e:	b084      	sub	sp, #16
 8100530:	af00      	add	r7, sp, #0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	gpio_check_freq();
 8100532:	f7ff fee9 	bl	8100308 <gpio_check_freq>
	clock_config();
 8100536:	f7ff ff7d 	bl	8100434 <clock_config>

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 810053a:	4a04      	ldr	r2, [pc, #16]	@ (810054c <main+0x20>)
 810053c:	1d3b      	adds	r3, r7, #4
 810053e:	ca07      	ldmia	r2, {r0, r1, r2}
 8100540:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blink_LED4();
 8100544:	f7ff ff34 	bl	81003b0 <blink_LED4>
 8100548:	e7fc      	b.n	8100544 <main+0x18>
 810054a:	bf00      	nop
 810054c:	08100664 	.word	0x08100664

08100550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100550:	b480      	push	{r7}
 8100552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100554:	bf00      	nop
 8100556:	e7fd      	b.n	8100554 <NMI_Handler+0x4>

08100558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100558:	b480      	push	{r7}
 810055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810055c:	bf00      	nop
 810055e:	e7fd      	b.n	810055c <HardFault_Handler+0x4>

08100560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100560:	b480      	push	{r7}
 8100562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100564:	bf00      	nop
 8100566:	e7fd      	b.n	8100564 <MemManage_Handler+0x4>

08100568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100568:	b480      	push	{r7}
 810056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810056c:	bf00      	nop
 810056e:	e7fd      	b.n	810056c <BusFault_Handler+0x4>

08100570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100570:	b480      	push	{r7}
 8100572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100574:	bf00      	nop
 8100576:	e7fd      	b.n	8100574 <UsageFault_Handler+0x4>

08100578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100578:	b480      	push	{r7}
 810057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810057c:	bf00      	nop
 810057e:	46bd      	mov	sp, r7
 8100580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100584:	4770      	bx	lr

08100586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100586:	b480      	push	{r7}
 8100588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810058a:	bf00      	nop
 810058c:	46bd      	mov	sp, r7
 810058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100592:	4770      	bx	lr

08100594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100594:	b480      	push	{r7}
 8100596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100598:	bf00      	nop
 810059a:	46bd      	mov	sp, r7
 810059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a0:	4770      	bx	lr

081005a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81005a2:	b480      	push	{r7}
 81005a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81005a6:	bf00      	nop
 81005a8:	46bd      	mov	sp, r7
 81005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ae:	4770      	bx	lr

081005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81005e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005b4:	f7ff fe90 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005b8:	480c      	ldr	r0, [pc, #48]	@ (81005ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005ba:	490d      	ldr	r1, [pc, #52]	@ (81005f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005bc:	4a0d      	ldr	r2, [pc, #52]	@ (81005f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005c0:	e002      	b.n	81005c8 <LoopCopyDataInit>

081005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005c6:	3304      	adds	r3, #4

081005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005cc:	d3f9      	bcc.n	81005c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005ce:	4a0a      	ldr	r2, [pc, #40]	@ (81005f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005d0:	4c0a      	ldr	r4, [pc, #40]	@ (81005fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005d4:	e001      	b.n	81005da <LoopFillZerobss>

081005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005d8:	3204      	adds	r2, #4

081005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005dc:	d3fb      	bcc.n	81005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005de:	f000 f811 	bl	8100604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005e2:	f7ff ffa3 	bl	810052c <main>
  bx  lr
 81005e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005ec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81005f0:	10000158 	.word	0x10000158
  ldr r2, =_sidata
 81005f4:	08100678 	.word	0x08100678
  ldr r2, =_sbss
 81005f8:	10000158 	.word	0x10000158
  ldr r4, =_ebss
 81005fc:	10000174 	.word	0x10000174

08100600 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100600:	e7fe      	b.n	8100600 <ADC3_IRQHandler>
	...

08100604 <__libc_init_array>:
 8100604:	b570      	push	{r4, r5, r6, lr}
 8100606:	4d0d      	ldr	r5, [pc, #52]	@ (810063c <__libc_init_array+0x38>)
 8100608:	4c0d      	ldr	r4, [pc, #52]	@ (8100640 <__libc_init_array+0x3c>)
 810060a:	1b64      	subs	r4, r4, r5
 810060c:	10a4      	asrs	r4, r4, #2
 810060e:	2600      	movs	r6, #0
 8100610:	42a6      	cmp	r6, r4
 8100612:	d109      	bne.n	8100628 <__libc_init_array+0x24>
 8100614:	4d0b      	ldr	r5, [pc, #44]	@ (8100644 <__libc_init_array+0x40>)
 8100616:	4c0c      	ldr	r4, [pc, #48]	@ (8100648 <__libc_init_array+0x44>)
 8100618:	f000 f818 	bl	810064c <_init>
 810061c:	1b64      	subs	r4, r4, r5
 810061e:	10a4      	asrs	r4, r4, #2
 8100620:	2600      	movs	r6, #0
 8100622:	42a6      	cmp	r6, r4
 8100624:	d105      	bne.n	8100632 <__libc_init_array+0x2e>
 8100626:	bd70      	pop	{r4, r5, r6, pc}
 8100628:	f855 3b04 	ldr.w	r3, [r5], #4
 810062c:	4798      	blx	r3
 810062e:	3601      	adds	r6, #1
 8100630:	e7ee      	b.n	8100610 <__libc_init_array+0xc>
 8100632:	f855 3b04 	ldr.w	r3, [r5], #4
 8100636:	4798      	blx	r3
 8100638:	3601      	adds	r6, #1
 810063a:	e7f2      	b.n	8100622 <__libc_init_array+0x1e>
 810063c:	08100670 	.word	0x08100670
 8100640:	08100670 	.word	0x08100670
 8100644:	08100670 	.word	0x08100670
 8100648:	08100674 	.word	0x08100674

0810064c <_init>:
 810064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810064e:	bf00      	nop
 8100650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100652:	bc08      	pop	{r3}
 8100654:	469e      	mov	lr, r3
 8100656:	4770      	bx	lr

08100658 <_fini>:
 8100658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810065a:	bf00      	nop
 810065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810065e:	bc08      	pop	{r3}
 8100660:	469e      	mov	lr, r3
 8100662:	4770      	bx	lr
