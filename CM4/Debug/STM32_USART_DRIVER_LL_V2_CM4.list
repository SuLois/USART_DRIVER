
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08100ac4  08100ac4  00001ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100ae0  08100ae0  00001ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100ae4  08100ae4  00001ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  10000000  10000000  00001ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  10000000  08100ae8  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000084  08100ae8  00002084  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002d51  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000008d9  00000000  00000000  00004869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001b0  00000000  00000000  00005148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000012d  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032888  00000000  00000000  00005425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000329d  00000000  00000000  00037cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120fd1  00000000  00000000  0003af4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015bf1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000041c  00000000  00000000  0015bf60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  0015c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000000 	.word	0x10000000
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100aac 	.word	0x08100aac

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000004 	.word	0x10000004
 81002d4:	08100aac 	.word	0x08100aac

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <gpio_check_freq>:
#include "GPIO.h"

/*----------------------------------------------------------------------------*/


void gpio_check_freq(void){
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
	/*
	 * Configuration de la sortie de la clock systeme sur GPIO PA8
	*/

	// Alternante function sur PA8
	GPIOA -> MODER &= ~GPIO_MODER_MODE8_0;
 810030c:	4b26      	ldr	r3, [pc, #152]	@ (81003a8 <gpio_check_freq+0xa0>)
 810030e:	681b      	ldr	r3, [r3, #0]
 8100310:	4a25      	ldr	r2, [pc, #148]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100316:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE8_1;
 8100318:	4b23      	ldr	r3, [pc, #140]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031a:	681b      	ldr	r3, [r3, #0]
 810031c:	4a22      	ldr	r2, [pc, #136]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100322:	6013      	str	r3, [r2, #0]


	// Choix de la fonction alternative --> MCO1 sur PA8 --> AF0 --> 0000

	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_0;
 8100324:	4b20      	ldr	r3, [pc, #128]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100328:	4a1f      	ldr	r2, [pc, #124]	@ (81003a8 <gpio_check_freq+0xa0>)
 810032a:	f023 0301 	bic.w	r3, r3, #1
 810032e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_1;
 8100330:	4b1d      	ldr	r3, [pc, #116]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100334:	4a1c      	ldr	r2, [pc, #112]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100336:	f023 0302 	bic.w	r3, r3, #2
 810033a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_2;
 810033c:	4b1a      	ldr	r3, [pc, #104]	@ (81003a8 <gpio_check_freq+0xa0>)
 810033e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100340:	4a19      	ldr	r2, [pc, #100]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100342:	f023 0304 	bic.w	r3, r3, #4
 8100346:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_3;
 8100348:	4b17      	ldr	r3, [pc, #92]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810034c:	4a16      	ldr	r2, [pc, #88]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034e:	f023 0308 	bic.w	r3, r3, #8
 8100352:	6253      	str	r3, [r2, #36]	@ 0x24
	/*
	 * Configuration de la sortie du TIM2 sur GPIO PA0
	*/

	// Alternate function sur PA0
	GPIOA -> MODER &= ~GPIO_MODER_MODE0_0;
 8100354:	4b14      	ldr	r3, [pc, #80]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100356:	681b      	ldr	r3, [r3, #0]
 8100358:	4a13      	ldr	r2, [pc, #76]	@ (81003a8 <gpio_check_freq+0xa0>)
 810035a:	f023 0301 	bic.w	r3, r3, #1
 810035e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE0_1;
 8100360:	4b11      	ldr	r3, [pc, #68]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100362:	681b      	ldr	r3, [r3, #0]
 8100364:	4a10      	ldr	r2, [pc, #64]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100366:	f043 0302 	orr.w	r3, r3, #2
 810036a:	6013      	str	r3, [r2, #0]

	// Choix de la fonction alternative --> TIM2_CH1 sur PA0 --> AF1 --> 0001

	GPIOA -> AFR[0] |= GPIO_AFRL_AFSEL0_0;
 810036c:	4b0e      	ldr	r3, [pc, #56]	@ (81003a8 <gpio_check_freq+0xa0>)
 810036e:	6a1b      	ldr	r3, [r3, #32]
 8100370:	4a0d      	ldr	r2, [pc, #52]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100372:	f043 0301 	orr.w	r3, r3, #1
 8100376:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_1;
 8100378:	4b0b      	ldr	r3, [pc, #44]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037a:	6a1b      	ldr	r3, [r3, #32]
 810037c:	4a0a      	ldr	r2, [pc, #40]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037e:	f023 0302 	bic.w	r3, r3, #2
 8100382:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_2;
 8100384:	4b08      	ldr	r3, [pc, #32]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100386:	6a1b      	ldr	r3, [r3, #32]
 8100388:	4a07      	ldr	r2, [pc, #28]	@ (81003a8 <gpio_check_freq+0xa0>)
 810038a:	f023 0304 	bic.w	r3, r3, #4
 810038e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_3;
 8100390:	4b05      	ldr	r3, [pc, #20]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100392:	6a1b      	ldr	r3, [r3, #32]
 8100394:	4a04      	ldr	r2, [pc, #16]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100396:	f023 0308 	bic.w	r3, r3, #8
 810039a:	6213      	str	r3, [r2, #32]

}
 810039c:	bf00      	nop
 810039e:	46bd      	mov	sp, r7
 81003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a4:	4770      	bx	lr
 81003a6:	bf00      	nop
 81003a8:	58020000 	.word	0x58020000

081003ac <gpio_config>:
	uint32_t i;

	for(i=0; i<nb; i++){}
}

void gpio_config(void){
 81003ac:	b480      	push	{r7}
 81003ae:	af00      	add	r7, sp, #0

	//Activation de la clock sur GPIO K
	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOKEN;
 81003b0:	4b0c      	ldr	r3, [pc, #48]	@ (81003e4 <gpio_config+0x38>)
 81003b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003b6:	4a0b      	ldr	r2, [pc, #44]	@ (81003e4 <gpio_config+0x38>)
 81003b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81003bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Configuration de PK6 en OUPTUT
	GPIOK -> MODER |= GPIO_MODER_MODE6_0;
 81003c0:	4b09      	ldr	r3, [pc, #36]	@ (81003e8 <gpio_config+0x3c>)
 81003c2:	681b      	ldr	r3, [r3, #0]
 81003c4:	4a08      	ldr	r2, [pc, #32]	@ (81003e8 <gpio_config+0x3c>)
 81003c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81003ca:	6013      	str	r3, [r2, #0]
	GPIOK -> MODER &= ~ GPIO_MODER_MODE6_1;
 81003cc:	4b06      	ldr	r3, [pc, #24]	@ (81003e8 <gpio_config+0x3c>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	4a05      	ldr	r2, [pc, #20]	@ (81003e8 <gpio_config+0x3c>)
 81003d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81003d6:	6013      	str	r3, [r2, #0]
}
 81003d8:	bf00      	nop
 81003da:	46bd      	mov	sp, r7
 81003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e0:	4770      	bx	lr
 81003e2:	bf00      	nop
 81003e4:	58024400 	.word	0x58024400
 81003e8:	58022800 	.word	0x58022800

081003ec <usart_gpio>:
	delay(100000);
	GPIOK -> BSRR |= GPIO_BSRR_BR6;
	delay(100000);
}

void usart_gpio(void){
 81003ec:	b480      	push	{r7}
 81003ee:	af00      	add	r7, sp, #0
	 *	MODER[15:0][1:0] = ‘01’: General purpose output mode
	 *	MODER[15:0][1:0] = ‘10’: Alternate function mode
	 *	MODER[15:0][1:0] = ‘11’: Analog mode (reset state)
	*/

	GPIOA -> MODER &= ~GPIO_MODER_MODE9_0;
 81003f0:	4b3c      	ldr	r3, [pc, #240]	@ (81004e4 <usart_gpio+0xf8>)
 81003f2:	681b      	ldr	r3, [r3, #0]
 81003f4:	4a3b      	ldr	r2, [pc, #236]	@ (81004e4 <usart_gpio+0xf8>)
 81003f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 81003fa:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE9_1;
 81003fc:	4b39      	ldr	r3, [pc, #228]	@ (81004e4 <usart_gpio+0xf8>)
 81003fe:	681b      	ldr	r3, [r3, #0]
 8100400:	4a38      	ldr	r2, [pc, #224]	@ (81004e4 <usart_gpio+0xf8>)
 8100402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8100406:	6013      	str	r3, [r2, #0]

	//High speed
	GPIOA -> OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8100408:	4b36      	ldr	r3, [pc, #216]	@ (81004e4 <usart_gpio+0xf8>)
 810040a:	689b      	ldr	r3, [r3, #8]
 810040c:	4a35      	ldr	r2, [pc, #212]	@ (81004e4 <usart_gpio+0xf8>)
 810040e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8100412:	6093      	str	r3, [r2, #8]

	// Configuration de la fonction alternative AF7 pour USART TX
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_0;
 8100414:	4b33      	ldr	r3, [pc, #204]	@ (81004e4 <usart_gpio+0xf8>)
 8100416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100418:	4a32      	ldr	r2, [pc, #200]	@ (81004e4 <usart_gpio+0xf8>)
 810041a:	f043 0310 	orr.w	r3, r3, #16
 810041e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_1;
 8100420:	4b30      	ldr	r3, [pc, #192]	@ (81004e4 <usart_gpio+0xf8>)
 8100422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100424:	4a2f      	ldr	r2, [pc, #188]	@ (81004e4 <usart_gpio+0xf8>)
 8100426:	f043 0320 	orr.w	r3, r3, #32
 810042a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL9_2;
 810042c:	4b2d      	ldr	r3, [pc, #180]	@ (81004e4 <usart_gpio+0xf8>)
 810042e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100430:	4a2c      	ldr	r2, [pc, #176]	@ (81004e4 <usart_gpio+0xf8>)
 8100432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100436:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL9_3;
 8100438:	4b2a      	ldr	r3, [pc, #168]	@ (81004e4 <usart_gpio+0xf8>)
 810043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810043c:	4a29      	ldr	r2, [pc, #164]	@ (81004e4 <usart_gpio+0xf8>)
 810043e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100442:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA -> MODER &= ~GPIO_MODER_MODE10_0;
 8100444:	4b27      	ldr	r3, [pc, #156]	@ (81004e4 <usart_gpio+0xf8>)
 8100446:	681b      	ldr	r3, [r3, #0]
 8100448:	4a26      	ldr	r2, [pc, #152]	@ (81004e4 <usart_gpio+0xf8>)
 810044a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810044e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE10_1;
 8100450:	4b24      	ldr	r3, [pc, #144]	@ (81004e4 <usart_gpio+0xf8>)
 8100452:	681b      	ldr	r3, [r3, #0]
 8100454:	4a23      	ldr	r2, [pc, #140]	@ (81004e4 <usart_gpio+0xf8>)
 8100456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810045a:	6013      	str	r3, [r2, #0]

	//High speed
	GPIOA -> OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 810045c:	4b21      	ldr	r3, [pc, #132]	@ (81004e4 <usart_gpio+0xf8>)
 810045e:	689b      	ldr	r3, [r3, #8]
 8100460:	4a20      	ldr	r2, [pc, #128]	@ (81004e4 <usart_gpio+0xf8>)
 8100462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8100466:	6093      	str	r3, [r2, #8]

	// Configuration de la fonction alternative AF7 pour USART RX
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_0;
 8100468:	4b1e      	ldr	r3, [pc, #120]	@ (81004e4 <usart_gpio+0xf8>)
 810046a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810046c:	4a1d      	ldr	r2, [pc, #116]	@ (81004e4 <usart_gpio+0xf8>)
 810046e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100472:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_1;
 8100474:	4b1b      	ldr	r3, [pc, #108]	@ (81004e4 <usart_gpio+0xf8>)
 8100476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100478:	4a1a      	ldr	r2, [pc, #104]	@ (81004e4 <usart_gpio+0xf8>)
 810047a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810047e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8100480:	4b18      	ldr	r3, [pc, #96]	@ (81004e4 <usart_gpio+0xf8>)
 8100482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100484:	4a17      	ldr	r2, [pc, #92]	@ (81004e4 <usart_gpio+0xf8>)
 8100486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810048a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL10_3;
 810048c:	4b15      	ldr	r3, [pc, #84]	@ (81004e4 <usart_gpio+0xf8>)
 810048e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100490:	4a14      	ldr	r2, [pc, #80]	@ (81004e4 <usart_gpio+0xf8>)
 8100492:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8100496:	6253      	str	r3, [r2, #36]	@ 0x24


	/*
	 * Clock activée sur gpio A
	 */
	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 8100498:	4b13      	ldr	r3, [pc, #76]	@ (81004e8 <usart_gpio+0xfc>)
 810049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810049e:	4a12      	ldr	r2, [pc, #72]	@ (81004e8 <usart_gpio+0xfc>)
 81004a0:	f043 0301 	orr.w	r3, r3, #1
 81004a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0


	GPIOB -> MODER &= ~GPIO_MODER_MODE14_0;
 81004a8:	4b10      	ldr	r3, [pc, #64]	@ (81004ec <usart_gpio+0x100>)
 81004aa:	681b      	ldr	r3, [r3, #0]
 81004ac:	4a0f      	ldr	r2, [pc, #60]	@ (81004ec <usart_gpio+0x100>)
 81004ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81004b2:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= GPIO_MODER_MODE14_1;
 81004b4:	4b0d      	ldr	r3, [pc, #52]	@ (81004ec <usart_gpio+0x100>)
 81004b6:	681b      	ldr	r3, [r3, #0]
 81004b8:	4a0c      	ldr	r2, [pc, #48]	@ (81004ec <usart_gpio+0x100>)
 81004ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 81004be:	6013      	str	r3, [r2, #0]

	GPIOB -> MODER &= ~GPIO_MODER_MODE15_0;
 81004c0:	4b0a      	ldr	r3, [pc, #40]	@ (81004ec <usart_gpio+0x100>)
 81004c2:	681b      	ldr	r3, [r3, #0]
 81004c4:	4a09      	ldr	r2, [pc, #36]	@ (81004ec <usart_gpio+0x100>)
 81004c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 81004ca:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= GPIO_MODER_MODE15_1;
 81004cc:	4b07      	ldr	r3, [pc, #28]	@ (81004ec <usart_gpio+0x100>)
 81004ce:	681b      	ldr	r3, [r3, #0]
 81004d0:	4a06      	ldr	r2, [pc, #24]	@ (81004ec <usart_gpio+0x100>)
 81004d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81004d6:	6013      	str	r3, [r2, #0]
}
 81004d8:	bf00      	nop
 81004da:	46bd      	mov	sp, r7
 81004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e0:	4770      	bx	lr
 81004e2:	bf00      	nop
 81004e4:	58020000 	.word	0x58020000
 81004e8:	58024400 	.word	0x58024400
 81004ec:	58020400 	.word	0x58020400

081004f0 <clock_config>:
 */

#include <stdint.h>
#include "RCC_CLOCK.h"

void clock_config(){
 81004f0:	b480      	push	{r7}
 81004f2:	af00      	add	r7, sp, #0


	RCC -> RSR |= RCC_RSR_SFT2RSTF; 					// Reset des registres du CPU2
 81004f4:	4b3c      	ldr	r3, [pc, #240]	@ (81005e8 <clock_config+0xf8>)
 81004f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 81004fa:	4a3b      	ldr	r2, [pc, #236]	@ (81005e8 <clock_config+0xf8>)
 81004fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100500:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0


	RCC -> CR |= RCC_CR_HSEON; 							// Clock HSE on
 8100504:	4b38      	ldr	r3, [pc, #224]	@ (81005e8 <clock_config+0xf8>)
 8100506:	681b      	ldr	r3, [r3, #0]
 8100508:	4a37      	ldr	r2, [pc, #220]	@ (81005e8 <clock_config+0xf8>)
 810050a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810050e:	6013      	str	r3, [r2, #0]
	RCC -> CFGR |= RCC_CFGR_SW_HSE; 					// Sys CLK sur HSE
 8100510:	4b35      	ldr	r3, [pc, #212]	@ (81005e8 <clock_config+0xf8>)
 8100512:	691b      	ldr	r3, [r3, #16]
 8100514:	4a34      	ldr	r2, [pc, #208]	@ (81005e8 <clock_config+0xf8>)
 8100516:	f043 0302 	orr.w	r3, r3, #2
 810051a:	6113      	str	r3, [r2, #16]

	RCC -> CR &= ~RCC_CR_HSION; 						// Clock HSI off
 810051c:	4b32      	ldr	r3, [pc, #200]	@ (81005e8 <clock_config+0xf8>)
 810051e:	681b      	ldr	r3, [r3, #0]
 8100520:	4a31      	ldr	r2, [pc, #196]	@ (81005e8 <clock_config+0xf8>)
 8100522:	f023 0301 	bic.w	r3, r3, #1
 8100526:	6013      	str	r3, [r2, #0]
	RCC -> CR &= RCC_CR_HSIDIV_1; 						// RAZ prescaler HSI
 8100528:	4b2f      	ldr	r3, [pc, #188]	@ (81005e8 <clock_config+0xf8>)
 810052a:	681b      	ldr	r3, [r3, #0]
 810052c:	4b2e      	ldr	r3, [pc, #184]	@ (81005e8 <clock_config+0xf8>)
 810052e:	2200      	movs	r2, #0
 8100530:	601a      	str	r2, [r3, #0]
	RCC -> CR |= RCC_CR_HSIDIV_8; 						// Prescaler HSI /8
 8100532:	4b2d      	ldr	r3, [pc, #180]	@ (81005e8 <clock_config+0xf8>)
 8100534:	681b      	ldr	r3, [r3, #0]
 8100536:	4a2c      	ldr	r2, [pc, #176]	@ (81005e8 <clock_config+0xf8>)
 8100538:	f043 0318 	orr.w	r3, r3, #24
 810053c:	6013      	str	r3, [r2, #0]

	/* ------------ MUX MCO1 sur HSI [0, 0, 0] ------------ */
	RCC -> CFGR &= ~RCC_CFGR_MCO1_0;
 810053e:	4b2a      	ldr	r3, [pc, #168]	@ (81005e8 <clock_config+0xf8>)
 8100540:	691b      	ldr	r3, [r3, #16]
 8100542:	4a29      	ldr	r2, [pc, #164]	@ (81005e8 <clock_config+0xf8>)
 8100544:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8100548:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_1;
 810054a:	4b27      	ldr	r3, [pc, #156]	@ (81005e8 <clock_config+0xf8>)
 810054c:	691b      	ldr	r3, [r3, #16]
 810054e:	4a26      	ldr	r2, [pc, #152]	@ (81005e8 <clock_config+0xf8>)
 8100550:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8100554:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_2;
 8100556:	4b24      	ldr	r3, [pc, #144]	@ (81005e8 <clock_config+0xf8>)
 8100558:	691b      	ldr	r3, [r3, #16]
 810055a:	4a23      	ldr	r2, [pc, #140]	@ (81005e8 <clock_config+0xf8>)
 810055c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8100560:	6113      	str	r3, [r2, #16]

	RCC -> CFGR &= RCC_CFGR_SW_HSI; 						// Sys CLK sur HSI
 8100562:	4b21      	ldr	r3, [pc, #132]	@ (81005e8 <clock_config+0xf8>)
 8100564:	691b      	ldr	r3, [r3, #16]
 8100566:	4b20      	ldr	r3, [pc, #128]	@ (81005e8 <clock_config+0xf8>)
 8100568:	2200      	movs	r2, #0
 810056a:	611a      	str	r2, [r3, #16]
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_1;
	RCC -> CFGR &= ~RCC_CFGR_MCO1PRE_2;
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_3;
	*/

	RCC -> CR |= RCC_CR_HSION; 							// Clock HSI on
 810056c:	4b1e      	ldr	r3, [pc, #120]	@ (81005e8 <clock_config+0xf8>)
 810056e:	681b      	ldr	r3, [r3, #0]
 8100570:	4a1d      	ldr	r2, [pc, #116]	@ (81005e8 <clock_config+0xf8>)
 8100572:	f043 0301 	orr.w	r3, r3, #1
 8100576:	6013      	str	r3, [r2, #0]
	while(((RCC -> CR >> 2) & 0x1) != 1) ; 				// Attente HSI stable
 8100578:	bf00      	nop
 810057a:	4b1b      	ldr	r3, [pc, #108]	@ (81005e8 <clock_config+0xf8>)
 810057c:	681b      	ldr	r3, [r3, #0]
 810057e:	089b      	lsrs	r3, r3, #2
 8100580:	f003 0301 	and.w	r3, r3, #1
 8100584:	2b01      	cmp	r3, #1
 8100586:	d1f8      	bne.n	810057a <clock_config+0x8a>

	RCC -> CR &= ~RCC_CR_HSEON; 						// Clock HSE off
 8100588:	4b17      	ldr	r3, [pc, #92]	@ (81005e8 <clock_config+0xf8>)
 810058a:	681b      	ldr	r3, [r3, #0]
 810058c:	4a16      	ldr	r2, [pc, #88]	@ (81005e8 <clock_config+0xf8>)
 810058e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100592:	6013      	str	r3, [r2, #0]


	while(((RCC -> CR >> 14) & 0x1) != 1) ; 			// Clock domain stable D1
 8100594:	bf00      	nop
 8100596:	4b14      	ldr	r3, [pc, #80]	@ (81005e8 <clock_config+0xf8>)
 8100598:	681b      	ldr	r3, [r3, #0]
 810059a:	0b9b      	lsrs	r3, r3, #14
 810059c:	f003 0301 	and.w	r3, r3, #1
 81005a0:	2b01      	cmp	r3, #1
 81005a2:	d1f8      	bne.n	8100596 <clock_config+0xa6>
	while(((RCC -> CR >> 15) & 0x1) != 1) ;				// -				   D2
 81005a4:	bf00      	nop
 81005a6:	4b10      	ldr	r3, [pc, #64]	@ (81005e8 <clock_config+0xf8>)
 81005a8:	681b      	ldr	r3, [r3, #0]
 81005aa:	0bdb      	lsrs	r3, r3, #15
 81005ac:	f003 0301 	and.w	r3, r3, #1
 81005b0:	2b01      	cmp	r3, #1
 81005b2:	d1f8      	bne.n	81005a6 <clock_config+0xb6>

	RCC -> D1CFGR &= ~RCC_D1CFGR_HPRE_DIV1; 			// HPRE PRESCALER /0
 81005b4:	4b0c      	ldr	r3, [pc, #48]	@ (81005e8 <clock_config+0xf8>)
 81005b6:	4a0c      	ldr	r2, [pc, #48]	@ (81005e8 <clock_config+0xf8>)
 81005b8:	699b      	ldr	r3, [r3, #24]
 81005ba:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1PPRE_DIV1; 			// D1PPRE PRESCALER /0
 81005bc:	4b0a      	ldr	r3, [pc, #40]	@ (81005e8 <clock_config+0xf8>)
 81005be:	4a0a      	ldr	r2, [pc, #40]	@ (81005e8 <clock_config+0xf8>)
 81005c0:	699b      	ldr	r3, [r3, #24]
 81005c2:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1CPRE_DIV1; 			// D1CPRE PRESCALER /0
 81005c4:	4b08      	ldr	r3, [pc, #32]	@ (81005e8 <clock_config+0xf8>)
 81005c6:	4a08      	ldr	r2, [pc, #32]	@ (81005e8 <clock_config+0xf8>)
 81005c8:	699b      	ldr	r3, [r3, #24]
 81005ca:	6193      	str	r3, [r2, #24]

	/*
	 * Mise à ON des clock périphériques
	*/

	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 81005cc:	4b06      	ldr	r3, [pc, #24]	@ (81005e8 <clock_config+0xf8>)
 81005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005d2:	4a05      	ldr	r2, [pc, #20]	@ (81005e8 <clock_config+0xf8>)
 81005d4:	f043 0301 	orr.w	r3, r3, #1
 81005d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

}
 81005dc:	bf00      	nop
 81005de:	46bd      	mov	sp, r7
 81005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e4:	4770      	bx	lr
 81005e6:	bf00      	nop
 81005e8:	58024400 	.word	0x58024400

081005ec <TIM2_IRQHandler>:

	TIM2 -> CR1 |= TIM_CR1_CEN;			// Counter activé

}

void TIM2_IRQHandler(void){
 81005ec:	b480      	push	{r7}
 81005ee:	af00      	add	r7, sp, #0


	if(((TIM2 -> SR >> TIM_SR_UIF_Pos) & 0x1) == 1){
 81005f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81005f4:	691b      	ldr	r3, [r3, #16]
 81005f6:	f003 0301 	and.w	r3, r3, #1
 81005fa:	2b01      	cmp	r3, #1
 81005fc:	d107      	bne.n	810060e <TIM2_IRQHandler+0x22>


		TIM2 -> SR &= ~TIM_SR_UIF;			// Flag à 0
 81005fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100602:	691b      	ldr	r3, [r3, #16]
 8100604:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100608:	f023 0301 	bic.w	r3, r3, #1
 810060c:	6113      	str	r3, [r2, #16]

	}
}
 810060e:	bf00      	nop
 8100610:	46bd      	mov	sp, r7
 8100612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100616:	4770      	bx	lr

08100618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100618:	b480      	push	{r7}
 810061a:	b083      	sub	sp, #12
 810061c:	af00      	add	r7, sp, #0
 810061e:	4603      	mov	r3, r0
 8100620:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100626:	2b00      	cmp	r3, #0
 8100628:	db0b      	blt.n	8100642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810062a:	88fb      	ldrh	r3, [r7, #6]
 810062c:	f003 021f 	and.w	r2, r3, #31
 8100630:	4907      	ldr	r1, [pc, #28]	@ (8100650 <__NVIC_EnableIRQ+0x38>)
 8100632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100636:	095b      	lsrs	r3, r3, #5
 8100638:	2001      	movs	r0, #1
 810063a:	fa00 f202 	lsl.w	r2, r0, r2
 810063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100642:	bf00      	nop
 8100644:	370c      	adds	r7, #12
 8100646:	46bd      	mov	sp, r7
 8100648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810064c:	4770      	bx	lr
 810064e:	bf00      	nop
 8100650:	e000e100 	.word	0xe000e100

08100654 <usart_init>:
/* -------------------------------------------------------------------------- */

#include "USART_driver.h"
#include "string.h"

void usart_init(const USART_Config_t *config){
 8100654:	b580      	push	{r7, lr}
 8100656:	b082      	sub	sp, #8
 8100658:	af00      	add	r7, sp, #0
 810065a:	6078      	str	r0, [r7, #4]

	// Configuration des pins associées
	usart_gpio();
 810065c:	f7ff fec6 	bl	81003ec <usart_gpio>

	/*
	 *  Activation et choix de la clock sur USART1
	 */
	RCC -> D2CCIP2R |= RCC_D2CCIP2R_USART16SEL_0;
 8100660:	4b71      	ldr	r3, [pc, #452]	@ (8100828 <usart_init+0x1d4>)
 8100662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100664:	4a70      	ldr	r2, [pc, #448]	@ (8100828 <usart_init+0x1d4>)
 8100666:	f043 0308 	orr.w	r3, r3, #8
 810066a:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> D2CCIP2R |= RCC_D2CCIP2R_USART16SEL_1;
 810066c:	4b6e      	ldr	r3, [pc, #440]	@ (8100828 <usart_init+0x1d4>)
 810066e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100670:	4a6d      	ldr	r2, [pc, #436]	@ (8100828 <usart_init+0x1d4>)
 8100672:	f043 0310 	orr.w	r3, r3, #16
 8100676:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> D2CCIP2R &= ~RCC_D2CCIP2R_USART16SEL_2;
 8100678:	4b6b      	ldr	r3, [pc, #428]	@ (8100828 <usart_init+0x1d4>)
 810067a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810067c:	4a6a      	ldr	r2, [pc, #424]	@ (8100828 <usart_init+0x1d4>)
 810067e:	f023 0320 	bic.w	r3, r3, #32
 8100682:	6553      	str	r3, [r2, #84]	@ 0x54
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8100684:	4b68      	ldr	r3, [pc, #416]	@ (8100828 <usart_init+0x1d4>)
 8100686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810068a:	4a67      	ldr	r2, [pc, #412]	@ (8100828 <usart_init+0x1d4>)
 810068c:	f043 0310 	orr.w	r3, r3, #16
 8100690:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	 *  M[1:0] = ‘00’: 1 start bit, 8 Data bits, n Stop bit
	 *	M[1:0] = ‘01’: 1 start bit, 9 Data bits, n Stop bit
	 *	M[1:0] = ‘10’: 1 start bit, 7 Data bits, n Stop bit
	*/

	if(config->USART_WordLenght == 8){
 8100694:	687b      	ldr	r3, [r7, #4]
 8100696:	799b      	ldrb	r3, [r3, #6]
 8100698:	2b08      	cmp	r3, #8
 810069a:	d10c      	bne.n	81006b6 <usart_init+0x62>
		USART1 -> CR1 &= ~USART_CR1_M1;
 810069c:	4b63      	ldr	r3, [pc, #396]	@ (810082c <usart_init+0x1d8>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	4a62      	ldr	r2, [pc, #392]	@ (810082c <usart_init+0x1d8>)
 81006a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81006a6:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 &= ~USART_CR1_M0;
 81006a8:	4b60      	ldr	r3, [pc, #384]	@ (810082c <usart_init+0x1d8>)
 81006aa:	681b      	ldr	r3, [r3, #0]
 81006ac:	4a5f      	ldr	r2, [pc, #380]	@ (810082c <usart_init+0x1d8>)
 81006ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81006b2:	6013      	str	r3, [r2, #0]
 81006b4:	e020      	b.n	81006f8 <usart_init+0xa4>
	}
	else if(config->USART_WordLenght == 9){
 81006b6:	687b      	ldr	r3, [r7, #4]
 81006b8:	799b      	ldrb	r3, [r3, #6]
 81006ba:	2b09      	cmp	r3, #9
 81006bc:	d10c      	bne.n	81006d8 <usart_init+0x84>
		USART1 -> CR1 &= ~USART_CR1_M1;
 81006be:	4b5b      	ldr	r3, [pc, #364]	@ (810082c <usart_init+0x1d8>)
 81006c0:	681b      	ldr	r3, [r3, #0]
 81006c2:	4a5a      	ldr	r2, [pc, #360]	@ (810082c <usart_init+0x1d8>)
 81006c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81006c8:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 |= USART_CR1_M0;
 81006ca:	4b58      	ldr	r3, [pc, #352]	@ (810082c <usart_init+0x1d8>)
 81006cc:	681b      	ldr	r3, [r3, #0]
 81006ce:	4a57      	ldr	r2, [pc, #348]	@ (810082c <usart_init+0x1d8>)
 81006d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81006d4:	6013      	str	r3, [r2, #0]
 81006d6:	e00f      	b.n	81006f8 <usart_init+0xa4>
	}
	else if(config->USART_WordLenght == 7){
 81006d8:	687b      	ldr	r3, [r7, #4]
 81006da:	799b      	ldrb	r3, [r3, #6]
 81006dc:	2b07      	cmp	r3, #7
 81006de:	d10b      	bne.n	81006f8 <usart_init+0xa4>
		USART1 -> CR1 |= USART_CR1_M1;
 81006e0:	4b52      	ldr	r3, [pc, #328]	@ (810082c <usart_init+0x1d8>)
 81006e2:	681b      	ldr	r3, [r3, #0]
 81006e4:	4a51      	ldr	r2, [pc, #324]	@ (810082c <usart_init+0x1d8>)
 81006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81006ea:	6013      	str	r3, [r2, #0]
		USART1 -> CR1 &= ~USART_CR1_M0;
 81006ec:	4b4f      	ldr	r3, [pc, #316]	@ (810082c <usart_init+0x1d8>)
 81006ee:	681b      	ldr	r3, [r3, #0]
 81006f0:	4a4e      	ldr	r2, [pc, #312]	@ (810082c <usart_init+0x1d8>)
 81006f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81006f6:	6013      	str	r3, [r2, #0]
	 *	Resulat équation : 0d1667 ou 0x683
	 *	BRR[15:4] = 0b00000011010000011
	 *	BRR[3:0] = 0b0001
	*/

	USART1 -> CR1 |= USART_CR1_OVER8;						// OVER SAMPLING
 81006f8:	4b4c      	ldr	r3, [pc, #304]	@ (810082c <usart_init+0x1d8>)
 81006fa:	681b      	ldr	r3, [r3, #0]
 81006fc:	4a4b      	ldr	r2, [pc, #300]	@ (810082c <usart_init+0x1d8>)
 81006fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8100702:	6013      	str	r3, [r2, #0]

	// Interruptions
	USART1 -> CR1 &= ~USART_CR1_MME;						// Disable mode Mute
 8100704:	4b49      	ldr	r3, [pc, #292]	@ (810082c <usart_init+0x1d8>)
 8100706:	681b      	ldr	r3, [r3, #0]
 8100708:	4a48      	ldr	r2, [pc, #288]	@ (810082c <usart_init+0x1d8>)
 810070a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810070e:	6013      	str	r3, [r2, #0]
	USART1 -> CR1 |= USART_CR1_RXNEIE;						// Interruption sur RXNE flag
 8100710:	4b46      	ldr	r3, [pc, #280]	@ (810082c <usart_init+0x1d8>)
 8100712:	681b      	ldr	r3, [r3, #0]
 8100714:	4a45      	ldr	r2, [pc, #276]	@ (810082c <usart_init+0x1d8>)
 8100716:	f043 0320 	orr.w	r3, r3, #32
 810071a:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 810071c:	2025      	movs	r0, #37	@ 0x25
 810071e:	f7ff ff7b 	bl	8100618 <__NVIC_EnableIRQ>


	USART1 -> BRR &= ~(USART_BRR_DIV_FRACTION_Msk | USART_BRR_DIV_MANTISSA_Msk);		// Configuration BRR 9600 bauds
 8100722:	4b42      	ldr	r3, [pc, #264]	@ (810082c <usart_init+0x1d8>)
 8100724:	68db      	ldr	r3, [r3, #12]
 8100726:	4a41      	ldr	r2, [pc, #260]	@ (810082c <usart_init+0x1d8>)
 8100728:	0c1b      	lsrs	r3, r3, #16
 810072a:	041b      	lsls	r3, r3, #16
 810072c:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR |= (0b0001 << USART_BRR_DIV_FRACTION_Pos);
 810072e:	4b3f      	ldr	r3, [pc, #252]	@ (810082c <usart_init+0x1d8>)
 8100730:	68db      	ldr	r3, [r3, #12]
 8100732:	4a3e      	ldr	r2, [pc, #248]	@ (810082c <usart_init+0x1d8>)
 8100734:	f043 0301 	orr.w	r3, r3, #1
 8100738:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR |= (0b000001101000 << USART_BRR_DIV_MANTISSA_Pos);
 810073a:	4b3c      	ldr	r3, [pc, #240]	@ (810082c <usart_init+0x1d8>)
 810073c:	68db      	ldr	r3, [r3, #12]
 810073e:	4a3b      	ldr	r2, [pc, #236]	@ (810082c <usart_init+0x1d8>)
 8100740:	f443 63d0 	orr.w	r3, r3, #1664	@ 0x680
 8100744:	60d3      	str	r3, [r2, #12]
	 *  STOP[1:0] = ‘00’: 1 	Stop bit
	 *	STOP[1:0] = ‘01’: 0.5 	Stop bit
	 *	STOP[1:0] = ‘10’: 2 	Stop bit
	 *	STOP[1:0] = ‘11’: 1.5 	Stop bit
	*/
	switch (config->USART_NoOfStopBits){
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	795b      	ldrb	r3, [r3, #5]
 810074a:	3b01      	subs	r3, #1
 810074c:	2b0e      	cmp	r3, #14
 810074e:	d855      	bhi.n	81007fc <usart_init+0x1a8>
 8100750:	a201      	add	r2, pc, #4	@ (adr r2, 8100758 <usart_init+0x104>)
 8100752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100756:	bf00      	nop
 8100758:	08100795 	.word	0x08100795
 810075c:	081007c9 	.word	0x081007c9
 8100760:	081007fd 	.word	0x081007fd
 8100764:	081007fd 	.word	0x081007fd
 8100768:	081007af 	.word	0x081007af
 810076c:	081007fd 	.word	0x081007fd
 8100770:	081007fd 	.word	0x081007fd
 8100774:	081007fd 	.word	0x081007fd
 8100778:	081007fd 	.word	0x081007fd
 810077c:	081007fd 	.word	0x081007fd
 8100780:	081007fd 	.word	0x081007fd
 8100784:	081007fd 	.word	0x081007fd
 8100788:	081007fd 	.word	0x081007fd
 810078c:	081007fd 	.word	0x081007fd
 8100790:	081007e3 	.word	0x081007e3
		case 1 :
			USART1 -> CR2 &= ~USART_CR2_STOP_1;
 8100794:	4b25      	ldr	r3, [pc, #148]	@ (810082c <usart_init+0x1d8>)
 8100796:	685b      	ldr	r3, [r3, #4]
 8100798:	4a24      	ldr	r2, [pc, #144]	@ (810082c <usart_init+0x1d8>)
 810079a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810079e:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 &= ~USART_CR2_STOP_0;
 81007a0:	4b22      	ldr	r3, [pc, #136]	@ (810082c <usart_init+0x1d8>)
 81007a2:	685b      	ldr	r3, [r3, #4]
 81007a4:	4a21      	ldr	r2, [pc, #132]	@ (810082c <usart_init+0x1d8>)
 81007a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81007aa:	6053      	str	r3, [r2, #4]
			break;
 81007ac:	e026      	b.n	81007fc <usart_init+0x1a8>
		case 5 :
			USART1 -> CR2 &= ~USART_CR2_STOP_1;
 81007ae:	4b1f      	ldr	r3, [pc, #124]	@ (810082c <usart_init+0x1d8>)
 81007b0:	685b      	ldr	r3, [r3, #4]
 81007b2:	4a1e      	ldr	r2, [pc, #120]	@ (810082c <usart_init+0x1d8>)
 81007b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81007b8:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 |= USART_CR2_STOP_0;
 81007ba:	4b1c      	ldr	r3, [pc, #112]	@ (810082c <usart_init+0x1d8>)
 81007bc:	685b      	ldr	r3, [r3, #4]
 81007be:	4a1b      	ldr	r2, [pc, #108]	@ (810082c <usart_init+0x1d8>)
 81007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81007c4:	6053      	str	r3, [r2, #4]

			break;
 81007c6:	e019      	b.n	81007fc <usart_init+0x1a8>
		case 2 :
			USART1 -> CR2 |= USART_CR2_STOP_1;
 81007c8:	4b18      	ldr	r3, [pc, #96]	@ (810082c <usart_init+0x1d8>)
 81007ca:	685b      	ldr	r3, [r3, #4]
 81007cc:	4a17      	ldr	r2, [pc, #92]	@ (810082c <usart_init+0x1d8>)
 81007ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 81007d2:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 &= ~USART_CR2_STOP_0;
 81007d4:	4b15      	ldr	r3, [pc, #84]	@ (810082c <usart_init+0x1d8>)
 81007d6:	685b      	ldr	r3, [r3, #4]
 81007d8:	4a14      	ldr	r2, [pc, #80]	@ (810082c <usart_init+0x1d8>)
 81007da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81007de:	6053      	str	r3, [r2, #4]
			break;
 81007e0:	e00c      	b.n	81007fc <usart_init+0x1a8>
		case 15 :
			USART1 -> CR2 |= USART_CR2_STOP_1;
 81007e2:	4b12      	ldr	r3, [pc, #72]	@ (810082c <usart_init+0x1d8>)
 81007e4:	685b      	ldr	r3, [r3, #4]
 81007e6:	4a11      	ldr	r2, [pc, #68]	@ (810082c <usart_init+0x1d8>)
 81007e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 81007ec:	6053      	str	r3, [r2, #4]
			USART1 -> CR2 |= USART_CR2_STOP_0;
 81007ee:	4b0f      	ldr	r3, [pc, #60]	@ (810082c <usart_init+0x1d8>)
 81007f0:	685b      	ldr	r3, [r3, #4]
 81007f2:	4a0e      	ldr	r2, [pc, #56]	@ (810082c <usart_init+0x1d8>)
 81007f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81007f8:	6053      	str	r3, [r2, #4]
			break;
 81007fa:	bf00      	nop
	/*
	*  Envoi d'une idle frame, bit TE CR1
	*  CR1[3] = ‘0’		Transmetteur OFF
	*	CR1[3] = ‘1’ 		Transmetteur ON
	*/
	USART1 -> CR1 |= USART_CR1_TE;				// Transmetteur activé
 81007fc:	4b0b      	ldr	r3, [pc, #44]	@ (810082c <usart_init+0x1d8>)
 81007fe:	681b      	ldr	r3, [r3, #0]
 8100800:	4a0a      	ldr	r2, [pc, #40]	@ (810082c <usart_init+0x1d8>)
 8100802:	f043 0308 	orr.w	r3, r3, #8
 8100806:	6013      	str	r3, [r2, #0]
	USART1 -> CR1 |= USART_CR1_RE;
 8100808:	4b08      	ldr	r3, [pc, #32]	@ (810082c <usart_init+0x1d8>)
 810080a:	681b      	ldr	r3, [r3, #0]
 810080c:	4a07      	ldr	r2, [pc, #28]	@ (810082c <usart_init+0x1d8>)
 810080e:	f043 0304 	orr.w	r3, r3, #4
 8100812:	6013      	str	r3, [r2, #0]
	*  Enabling USART with UE bit
	*  CR1[0] = ‘0’		USART prescaler et outputs off low-power mode,
	*	CR1[0] = ‘1’ 		USART on
	*/

	USART1 -> CR1 |= USART_CR1_UE;
 8100814:	4b05      	ldr	r3, [pc, #20]	@ (810082c <usart_init+0x1d8>)
 8100816:	681b      	ldr	r3, [r3, #0]
 8100818:	4a04      	ldr	r2, [pc, #16]	@ (810082c <usart_init+0x1d8>)
 810081a:	f043 0301 	orr.w	r3, r3, #1
 810081e:	6013      	str	r3, [r2, #0]

}
 8100820:	bf00      	nop
 8100822:	3708      	adds	r7, #8
 8100824:	46bd      	mov	sp, r7
 8100826:	bd80      	pop	{r7, pc}
 8100828:	58024400 	.word	0x58024400
 810082c:	40011000 	.word	0x40011000

08100830 <usart_transmit>:
volatile uint8_t data_index = 0;
volatile uint8_t usart1_ready = 0;


// Transmission des données
void usart_transmit(char *data){
 8100830:	b480      	push	{r7}
 8100832:	b083      	sub	sp, #12
 8100834:	af00      	add	r7, sp, #0
 8100836:	6078      	str	r0, [r7, #4]


	while(*data != '\0'){
 8100838:	e00d      	b.n	8100856 <usart_transmit+0x26>
		while(((USART1 -> ISR >> USART_ISR_TXE_TXFNF_Pos) & 0x1) != 1);
 810083a:	bf00      	nop
 810083c:	4b0f      	ldr	r3, [pc, #60]	@ (810087c <usart_transmit+0x4c>)
 810083e:	69db      	ldr	r3, [r3, #28]
 8100840:	09db      	lsrs	r3, r3, #7
 8100842:	f003 0301 	and.w	r3, r3, #1
 8100846:	2b01      	cmp	r3, #1
 8100848:	d1f8      	bne.n	810083c <usart_transmit+0xc>
		USART1 -> TDR = *data++;
 810084a:	687b      	ldr	r3, [r7, #4]
 810084c:	1c5a      	adds	r2, r3, #1
 810084e:	607a      	str	r2, [r7, #4]
 8100850:	781a      	ldrb	r2, [r3, #0]
 8100852:	4b0a      	ldr	r3, [pc, #40]	@ (810087c <usart_transmit+0x4c>)
 8100854:	629a      	str	r2, [r3, #40]	@ 0x28
	while(*data != '\0'){
 8100856:	687b      	ldr	r3, [r7, #4]
 8100858:	781b      	ldrb	r3, [r3, #0]
 810085a:	2b00      	cmp	r3, #0
 810085c:	d1ed      	bne.n	810083a <usart_transmit+0xa>
	}
	// Attendre TC (fin transmission)
	while(((USART1 -> ISR >> USART_ISR_TC_Pos) & 0x1) != 1);
 810085e:	bf00      	nop
 8100860:	4b06      	ldr	r3, [pc, #24]	@ (810087c <usart_transmit+0x4c>)
 8100862:	69db      	ldr	r3, [r3, #28]
 8100864:	099b      	lsrs	r3, r3, #6
 8100866:	f003 0301 	and.w	r3, r3, #1
 810086a:	2b01      	cmp	r3, #1
 810086c:	d1f8      	bne.n	8100860 <usart_transmit+0x30>
}
 810086e:	bf00      	nop
 8100870:	bf00      	nop
 8100872:	370c      	adds	r7, #12
 8100874:	46bd      	mov	sp, r7
 8100876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810087a:	4770      	bx	lr
 810087c:	40011000 	.word	0x40011000

08100880 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8100880:	b480      	push	{r7}
 8100882:	b083      	sub	sp, #12
 8100884:	af00      	add	r7, sp, #0
    if((USART1->ISR & USART_ISR_RXNE_RXFNE) != 0){
 8100886:	4b16      	ldr	r3, [pc, #88]	@ (81008e0 <USART1_IRQHandler+0x60>)
 8100888:	69db      	ldr	r3, [r3, #28]
 810088a:	f003 0320 	and.w	r3, r3, #32
 810088e:	2b00      	cmp	r3, #0
 8100890:	d01f      	beq.n	81008d2 <USART1_IRQHandler+0x52>
        // Read received data
        char data = (char)USART1 -> RDR;
 8100892:	4b13      	ldr	r3, [pc, #76]	@ (81008e0 <USART1_IRQHandler+0x60>)
 8100894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100896:	71fb      	strb	r3, [r7, #7]

        if(data_index < USART1_BUFFER_SIZE){
 8100898:	4b12      	ldr	r3, [pc, #72]	@ (81008e4 <USART1_IRQHandler+0x64>)
 810089a:	781b      	ldrb	r3, [r3, #0]
 810089c:	b2db      	uxtb	r3, r3
 810089e:	2b63      	cmp	r3, #99	@ 0x63
 81008a0:	d814      	bhi.n	81008cc <USART1_IRQHandler+0x4c>
            data_buffer[data_index++] = data;
 81008a2:	4b10      	ldr	r3, [pc, #64]	@ (81008e4 <USART1_IRQHandler+0x64>)
 81008a4:	781b      	ldrb	r3, [r3, #0]
 81008a6:	b2db      	uxtb	r3, r3
 81008a8:	1c5a      	adds	r2, r3, #1
 81008aa:	b2d1      	uxtb	r1, r2
 81008ac:	4a0d      	ldr	r2, [pc, #52]	@ (81008e4 <USART1_IRQHandler+0x64>)
 81008ae:	7011      	strb	r1, [r2, #0]
 81008b0:	4619      	mov	r1, r3
 81008b2:	4a0d      	ldr	r2, [pc, #52]	@ (81008e8 <USART1_IRQHandler+0x68>)
 81008b4:	79fb      	ldrb	r3, [r7, #7]
 81008b6:	5453      	strb	r3, [r2, r1]
            if(data == '\n') {
 81008b8:	79fb      	ldrb	r3, [r7, #7]
 81008ba:	2b0a      	cmp	r3, #10
 81008bc:	d109      	bne.n	81008d2 <USART1_IRQHandler+0x52>
                usart1_ready = 1;
 81008be:	4b0b      	ldr	r3, [pc, #44]	@ (81008ec <USART1_IRQHandler+0x6c>)
 81008c0:	2201      	movs	r2, #1
 81008c2:	701a      	strb	r2, [r3, #0]
                data_index = 0;
 81008c4:	4b07      	ldr	r3, [pc, #28]	@ (81008e4 <USART1_IRQHandler+0x64>)
 81008c6:	2200      	movs	r2, #0
 81008c8:	701a      	strb	r2, [r3, #0]
        }
        else{
            data_index = 0;
        }
    }
}
 81008ca:	e002      	b.n	81008d2 <USART1_IRQHandler+0x52>
            data_index = 0;
 81008cc:	4b05      	ldr	r3, [pc, #20]	@ (81008e4 <USART1_IRQHandler+0x64>)
 81008ce:	2200      	movs	r2, #0
 81008d0:	701a      	strb	r2, [r3, #0]
}
 81008d2:	bf00      	nop
 81008d4:	370c      	adds	r7, #12
 81008d6:	46bd      	mov	sp, r7
 81008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008dc:	4770      	bx	lr
 81008de:	bf00      	nop
 81008e0:	40011000 	.word	0x40011000
 81008e4:	10000080 	.word	0x10000080
 81008e8:	1000001c 	.word	0x1000001c
 81008ec:	10000081 	.word	0x10000081

081008f0 <rx_data>:

void rx_data(void) {
 81008f0:	b580      	push	{r7, lr}
 81008f2:	af00      	add	r7, sp, #0
    if(usart1_ready){
 81008f4:	4b06      	ldr	r3, [pc, #24]	@ (8100910 <rx_data+0x20>)
 81008f6:	781b      	ldrb	r3, [r3, #0]
 81008f8:	b2db      	uxtb	r3, r3
 81008fa:	2b00      	cmp	r3, #0
 81008fc:	d005      	beq.n	810090a <rx_data+0x1a>
        usart_transmit(data_buffer);
 81008fe:	4805      	ldr	r0, [pc, #20]	@ (8100914 <rx_data+0x24>)
 8100900:	f7ff ff96 	bl	8100830 <usart_transmit>
        usart1_ready = 0;
 8100904:	4b02      	ldr	r3, [pc, #8]	@ (8100910 <rx_data+0x20>)
 8100906:	2200      	movs	r2, #0
 8100908:	701a      	strb	r2, [r3, #0]
    }
}
 810090a:	bf00      	nop
 810090c:	bd80      	pop	{r7, pc}
 810090e:	bf00      	nop
 8100910:	10000081 	.word	0x10000081
 8100914:	1000001c 	.word	0x1000001c

08100918 <__NVIC_SetPriorityGrouping>:
{
 8100918:	b480      	push	{r7}
 810091a:	b085      	sub	sp, #20
 810091c:	af00      	add	r7, sp, #0
 810091e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100920:	687b      	ldr	r3, [r7, #4]
 8100922:	f003 0307 	and.w	r3, r3, #7
 8100926:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100928:	4b0c      	ldr	r3, [pc, #48]	@ (810095c <__NVIC_SetPriorityGrouping+0x44>)
 810092a:	68db      	ldr	r3, [r3, #12]
 810092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810092e:	68ba      	ldr	r2, [r7, #8]
 8100930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100934:	4013      	ands	r3, r2
 8100936:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100938:	68fb      	ldr	r3, [r7, #12]
 810093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810093c:	68bb      	ldr	r3, [r7, #8]
 810093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810094a:	4a04      	ldr	r2, [pc, #16]	@ (810095c <__NVIC_SetPriorityGrouping+0x44>)
 810094c:	68bb      	ldr	r3, [r7, #8]
 810094e:	60d3      	str	r3, [r2, #12]
}
 8100950:	bf00      	nop
 8100952:	3714      	adds	r7, #20
 8100954:	46bd      	mov	sp, r7
 8100956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810095a:	4770      	bx	lr
 810095c:	e000ed00 	.word	0xe000ed00

08100960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100960:	b590      	push	{r4, r7, lr}
 8100962:	b089      	sub	sp, #36	@ 0x24
 8100964:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);

  /* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100966:	2003      	movs	r0, #3
 8100968:	f7ff ffd6 	bl	8100918 <__NVIC_SetPriorityGrouping>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	//power_clock_config();
	//flash_config();
	clock_config();
 810096c:	f7ff fdc0 	bl	81004f0 <clock_config>
	//tim2_config();

	gpio_config();
 8100970:	f7ff fd1c 	bl	81003ac <gpio_config>
	gpio_check_freq();
 8100974:	f7ff fcc8 	bl	8100308 <gpio_check_freq>

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 8100978:	4a0b      	ldr	r2, [pc, #44]	@ (81009a8 <main+0x48>)
 810097a:	f107 0314 	add.w	r3, r7, #20
 810097e:	ca07      	ldmia	r2, {r0, r1, r2}
 8100980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        .USART_WordLenght = 8,
	        .USART_ParityControl = 0,
	        .USART_HWFlowControl = 0
	 };

	 usart_init(&usart_config);
 8100984:	f107 0314 	add.w	r3, r7, #20
 8100988:	4618      	mov	r0, r3
 810098a:	f7ff fe63 	bl	8100654 <usart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	char data_to_send[] = "STM32 USART\n";
 810098e:	4b07      	ldr	r3, [pc, #28]	@ (81009ac <main+0x4c>)
 8100990:	1d3c      	adds	r4, r7, #4
 8100992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8100994:	c407      	stmia	r4!, {r0, r1, r2}
 8100996:	7023      	strb	r3, [r4, #0]

	usart_transmit(data_to_send);
 8100998:	1d3b      	adds	r3, r7, #4
 810099a:	4618      	mov	r0, r3
 810099c:	f7ff ff48 	bl	8100830 <usart_transmit>


	 while (1)
	 {
		 rx_data();
 81009a0:	f7ff ffa6 	bl	81008f0 <rx_data>
 81009a4:	e7fc      	b.n	81009a0 <main+0x40>
 81009a6:	bf00      	nop
 81009a8:	08100ac4 	.word	0x08100ac4
 81009ac:	08100ad0 	.word	0x08100ad0

081009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81009b0:	b480      	push	{r7}
 81009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81009b4:	bf00      	nop
 81009b6:	e7fd      	b.n	81009b4 <NMI_Handler+0x4>

081009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81009b8:	b480      	push	{r7}
 81009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81009bc:	bf00      	nop
 81009be:	e7fd      	b.n	81009bc <HardFault_Handler+0x4>

081009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81009c0:	b480      	push	{r7}
 81009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81009c4:	bf00      	nop
 81009c6:	e7fd      	b.n	81009c4 <MemManage_Handler+0x4>

081009c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81009c8:	b480      	push	{r7}
 81009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81009cc:	bf00      	nop
 81009ce:	e7fd      	b.n	81009cc <BusFault_Handler+0x4>

081009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81009d0:	b480      	push	{r7}
 81009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81009d4:	bf00      	nop
 81009d6:	e7fd      	b.n	81009d4 <UsageFault_Handler+0x4>

081009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81009d8:	b480      	push	{r7}
 81009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81009dc:	bf00      	nop
 81009de:	46bd      	mov	sp, r7
 81009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e4:	4770      	bx	lr

081009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81009e6:	b480      	push	{r7}
 81009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81009ea:	bf00      	nop
 81009ec:	46bd      	mov	sp, r7
 81009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009f2:	4770      	bx	lr

081009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81009f4:	b480      	push	{r7}
 81009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81009f8:	bf00      	nop
 81009fa:	46bd      	mov	sp, r7
 81009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a00:	4770      	bx	lr

08100a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100a02:	b480      	push	{r7}
 8100a04:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100a06:	bf00      	nop
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a0e:	4770      	bx	lr

08100a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100a14:	f7ff fc60 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100a18:	480c      	ldr	r0, [pc, #48]	@ (8100a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100a1a:	490d      	ldr	r1, [pc, #52]	@ (8100a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8100a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100a20:	e002      	b.n	8100a28 <LoopCopyDataInit>

08100a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100a26:	3304      	adds	r3, #4

08100a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100a2c:	d3f9      	bcc.n	8100a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8100a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100a30:	4c0a      	ldr	r4, [pc, #40]	@ (8100a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100a34:	e001      	b.n	8100a3a <LoopFillZerobss>

08100a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100a38:	3204      	adds	r2, #4

08100a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100a3c:	d3fb      	bcc.n	8100a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100a3e:	f000 f811 	bl	8100a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100a42:	f7ff ff8d 	bl	8100960 <main>
  bx  lr
 8100a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a48:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a4c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a50:	10000000 	.word	0x10000000
  ldr r2, =_sidata
 8100a54:	08100ae8 	.word	0x08100ae8
  ldr r2, =_sbss
 8100a58:	10000000 	.word	0x10000000
  ldr r4, =_ebss
 8100a5c:	10000084 	.word	0x10000084

08100a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a60:	e7fe      	b.n	8100a60 <ADC3_IRQHandler>
	...

08100a64 <__libc_init_array>:
 8100a64:	b570      	push	{r4, r5, r6, lr}
 8100a66:	4d0d      	ldr	r5, [pc, #52]	@ (8100a9c <__libc_init_array+0x38>)
 8100a68:	4c0d      	ldr	r4, [pc, #52]	@ (8100aa0 <__libc_init_array+0x3c>)
 8100a6a:	1b64      	subs	r4, r4, r5
 8100a6c:	10a4      	asrs	r4, r4, #2
 8100a6e:	2600      	movs	r6, #0
 8100a70:	42a6      	cmp	r6, r4
 8100a72:	d109      	bne.n	8100a88 <__libc_init_array+0x24>
 8100a74:	4d0b      	ldr	r5, [pc, #44]	@ (8100aa4 <__libc_init_array+0x40>)
 8100a76:	4c0c      	ldr	r4, [pc, #48]	@ (8100aa8 <__libc_init_array+0x44>)
 8100a78:	f000 f818 	bl	8100aac <_init>
 8100a7c:	1b64      	subs	r4, r4, r5
 8100a7e:	10a4      	asrs	r4, r4, #2
 8100a80:	2600      	movs	r6, #0
 8100a82:	42a6      	cmp	r6, r4
 8100a84:	d105      	bne.n	8100a92 <__libc_init_array+0x2e>
 8100a86:	bd70      	pop	{r4, r5, r6, pc}
 8100a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8100a8c:	4798      	blx	r3
 8100a8e:	3601      	adds	r6, #1
 8100a90:	e7ee      	b.n	8100a70 <__libc_init_array+0xc>
 8100a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8100a96:	4798      	blx	r3
 8100a98:	3601      	adds	r6, #1
 8100a9a:	e7f2      	b.n	8100a82 <__libc_init_array+0x1e>
 8100a9c:	08100ae0 	.word	0x08100ae0
 8100aa0:	08100ae0 	.word	0x08100ae0
 8100aa4:	08100ae0 	.word	0x08100ae0
 8100aa8:	08100ae4 	.word	0x08100ae4

08100aac <_init>:
 8100aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100aae:	bf00      	nop
 8100ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100ab2:	bc08      	pop	{r3}
 8100ab4:	469e      	mov	lr, r3
 8100ab6:	4770      	bx	lr

08100ab8 <_fini>:
 8100ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100aba:	bf00      	nop
 8100abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100abe:	bc08      	pop	{r3}
 8100ac0:	469e      	mov	lr, r3
 8100ac2:	4770      	bx	lr
