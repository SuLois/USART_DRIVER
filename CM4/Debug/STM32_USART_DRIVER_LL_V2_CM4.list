
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0810051c  0810051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100528  08100528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810052c  0810052c  0000152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  10000000  10000000  00001530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000000  08100530  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000001c  08100530  0000201c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000faa  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000439  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000110  00000000  00000000  00002948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000b5  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000326b8  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001d35  00000000  00000000  000351c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012102b  00000000  00000000  00036efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00157f25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000280  00000000  00000000  00157f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  001581e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000000 	.word	0x10000000
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100504 	.word	0x08100504

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000004 	.word	0x10000004
 81002d4:	08100504 	.word	0x08100504

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <delay>:
#include "GPIO.h"

/*----------------------------------------------------------------------------*/


void delay(uint32_t nb){
 8100308:	b480      	push	{r7}
 810030a:	b085      	sub	sp, #20
 810030c:	af00      	add	r7, sp, #0
 810030e:	6078      	str	r0, [r7, #4]

	uint32_t i;

	for(i=0; i<nb; i++){}
 8100310:	2300      	movs	r3, #0
 8100312:	60fb      	str	r3, [r7, #12]
 8100314:	e002      	b.n	810031c <delay+0x14>
 8100316:	68fb      	ldr	r3, [r7, #12]
 8100318:	3301      	adds	r3, #1
 810031a:	60fb      	str	r3, [r7, #12]
 810031c:	68fa      	ldr	r2, [r7, #12]
 810031e:	687b      	ldr	r3, [r7, #4]
 8100320:	429a      	cmp	r2, r3
 8100322:	d3f8      	bcc.n	8100316 <delay+0xe>
}
 8100324:	bf00      	nop
 8100326:	bf00      	nop
 8100328:	3714      	adds	r7, #20
 810032a:	46bd      	mov	sp, r7
 810032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100330:	4770      	bx	lr
	...

08100334 <blink_LED4>:

void blink_LED4(void){
 8100334:	b580      	push	{r7, lr}
 8100336:	b084      	sub	sp, #16
 8100338:	af00      	add	r7, sp, #0

	volatile uint32_t *GPIO_K_register = (volatile uint32_t *)GPIO_K_address;
 810033a:	4b18      	ldr	r3, [pc, #96]	@ (810039c <blink_LED4+0x68>)
 810033c:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *GPIO_K_ODR_register = (volatile uint32_t *)GPIO_K_ODR_address;
 810033e:	4b18      	ldr	r3, [pc, #96]	@ (81003a0 <blink_LED4+0x6c>)
 8100340:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *GPIO_K_BSRR_register = (volatile uint32_t *)GPIO_K_BSRR_address;
 8100342:	4b18      	ldr	r3, [pc, #96]	@ (81003a4 <blink_LED4+0x70>)
 8100344:	607b      	str	r3, [r7, #4]
	volatile uint32_t *RCC_AHB4ENR_register = (volatile uint32_t *)RCC_AHB4ENR_address;
 8100346:	4b18      	ldr	r3, [pc, #96]	@ (81003a8 <blink_LED4+0x74>)
 8100348:	603b      	str	r3, [r7, #0]

	//Activation de la clock sur GPIO K
	*RCC_AHB4ENR_register |= AHB4ENR_K;
 810034a:	683b      	ldr	r3, [r7, #0]
 810034c:	681b      	ldr	r3, [r3, #0]
 810034e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8100352:	683b      	ldr	r3, [r7, #0]
 8100354:	601a      	str	r2, [r3, #0]

	//Configuration de PK6 en OUPTUT
	*GPIO_K_register |= GPIO_PK6_0;
 8100356:	68fb      	ldr	r3, [r7, #12]
 8100358:	681b      	ldr	r3, [r3, #0]
 810035a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 810035e:	68fb      	ldr	r3, [r7, #12]
 8100360:	601a      	str	r2, [r3, #0]
	*GPIO_K_register &= ~ GPIO_PK6_1;
 8100362:	68fb      	ldr	r3, [r7, #12]
 8100364:	681b      	ldr	r3, [r3, #0]
 8100366:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810036a:	68fb      	ldr	r3, [r7, #12]
 810036c:	601a      	str	r2, [r3, #0]
	 *	BSRR[15:0] =  ‘1’: Set
	 *	BSRR[31:15] = ‘0’: Nothing
	 *	BSRR[31:15] = ‘1’: Reset
	*/
	//Bit mis à 1
	*GPIO_K_BSRR_register |= GPIO_BSRR_PK6;
 810036e:	687b      	ldr	r3, [r7, #4]
 8100370:	681b      	ldr	r3, [r3, #0]
 8100372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8100376:	687b      	ldr	r3, [r7, #4]
 8100378:	601a      	str	r2, [r3, #0]
	delay(1000000);
 810037a:	480c      	ldr	r0, [pc, #48]	@ (81003ac <blink_LED4+0x78>)
 810037c:	f7ff ffc4 	bl	8100308 <delay>
	*GPIO_K_BSRR_register |= GPIO_BSRR_PK6_RESET;
 8100380:	687b      	ldr	r3, [r7, #4]
 8100382:	681b      	ldr	r3, [r3, #0]
 8100384:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8100388:	687b      	ldr	r3, [r7, #4]
 810038a:	601a      	str	r2, [r3, #0]
	delay(1000000);
 810038c:	4807      	ldr	r0, [pc, #28]	@ (81003ac <blink_LED4+0x78>)
 810038e:	f7ff ffbb 	bl	8100308 <delay>
}
 8100392:	bf00      	nop
 8100394:	3710      	adds	r7, #16
 8100396:	46bd      	mov	sp, r7
 8100398:	bd80      	pop	{r7, pc}
 810039a:	bf00      	nop
 810039c:	58022800 	.word	0x58022800
 81003a0:	58022814 	.word	0x58022814
 81003a4:	58022818 	.word	0x58022818
 81003a8:	580244e0 	.word	0x580244e0
 81003ac:	000f4240 	.word	0x000f4240

081003b0 <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 81003b0:	b480      	push	{r7}
 81003b2:	b085      	sub	sp, #20
 81003b4:	af00      	add	r7, sp, #0
 81003b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 81003b8:	4b0a      	ldr	r3, [pc, #40]	@ (81003e4 <LL_APB4_GRP1_EnableClock+0x34>)
 81003ba:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 81003be:	4909      	ldr	r1, [pc, #36]	@ (81003e4 <LL_APB4_GRP1_EnableClock+0x34>)
 81003c0:	687b      	ldr	r3, [r7, #4]
 81003c2:	4313      	orrs	r3, r2
 81003c4:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 81003c8:	4b06      	ldr	r3, [pc, #24]	@ (81003e4 <LL_APB4_GRP1_EnableClock+0x34>)
 81003ca:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 81003ce:	687b      	ldr	r3, [r7, #4]
 81003d0:	4013      	ands	r3, r2
 81003d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 81003d4:	68fb      	ldr	r3, [r7, #12]
}
 81003d6:	bf00      	nop
 81003d8:	3714      	adds	r7, #20
 81003da:	46bd      	mov	sp, r7
 81003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e0:	4770      	bx	lr
 81003e2:	bf00      	nop
 81003e4:	58024400 	.word	0x58024400

081003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81003e8:	b580      	push	{r7, lr}
 81003ea:	b084      	sub	sp, #16
 81003ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
 81003ee:	2002      	movs	r0, #2
 81003f0:	f7ff ffde 	bl	81003b0 <LL_APB4_GRP1_EnableClock>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 81003f4:	4a03      	ldr	r2, [pc, #12]	@ (8100404 <main+0x1c>)
 81003f6:	1d3b      	adds	r3, r7, #4
 81003f8:	ca07      	ldmia	r2, {r0, r1, r2}
 81003fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blink_LED4();
 81003fe:	f7ff ff99 	bl	8100334 <blink_LED4>
 8100402:	e7fc      	b.n	81003fe <main+0x16>
 8100404:	0810051c 	.word	0x0810051c

08100408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100408:	b480      	push	{r7}
 810040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810040c:	bf00      	nop
 810040e:	e7fd      	b.n	810040c <NMI_Handler+0x4>

08100410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100410:	b480      	push	{r7}
 8100412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100414:	bf00      	nop
 8100416:	e7fd      	b.n	8100414 <HardFault_Handler+0x4>

08100418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100418:	b480      	push	{r7}
 810041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810041c:	bf00      	nop
 810041e:	e7fd      	b.n	810041c <MemManage_Handler+0x4>

08100420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100420:	b480      	push	{r7}
 8100422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100424:	bf00      	nop
 8100426:	e7fd      	b.n	8100424 <BusFault_Handler+0x4>

08100428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100428:	b480      	push	{r7}
 810042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810042c:	bf00      	nop
 810042e:	e7fd      	b.n	810042c <UsageFault_Handler+0x4>

08100430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100430:	b480      	push	{r7}
 8100432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100434:	bf00      	nop
 8100436:	46bd      	mov	sp, r7
 8100438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810043c:	4770      	bx	lr

0810043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810043e:	b480      	push	{r7}
 8100440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100442:	bf00      	nop
 8100444:	46bd      	mov	sp, r7
 8100446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810044a:	4770      	bx	lr

0810044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810044c:	b480      	push	{r7}
 810044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100450:	bf00      	nop
 8100452:	46bd      	mov	sp, r7
 8100454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100458:	4770      	bx	lr

0810045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810045a:	b480      	push	{r7}
 810045c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810045e:	bf00      	nop
 8100460:	46bd      	mov	sp, r7
 8100462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100466:	4770      	bx	lr

08100468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81004a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810046c:	f7ff ff34 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100470:	480c      	ldr	r0, [pc, #48]	@ (81004a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100472:	490d      	ldr	r1, [pc, #52]	@ (81004a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100474:	4a0d      	ldr	r2, [pc, #52]	@ (81004ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100478:	e002      	b.n	8100480 <LoopCopyDataInit>

0810047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810047e:	3304      	adds	r3, #4

08100480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100484:	d3f9      	bcc.n	810047a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100486:	4a0a      	ldr	r2, [pc, #40]	@ (81004b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100488:	4c0a      	ldr	r4, [pc, #40]	@ (81004b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810048c:	e001      	b.n	8100492 <LoopFillZerobss>

0810048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100490:	3204      	adds	r2, #4

08100492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100494:	d3fb      	bcc.n	810048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100496:	f000 f811 	bl	81004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810049a:	f7ff ffa5 	bl	81003e8 <main>
  bx  lr
 810049e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004a8:	10000000 	.word	0x10000000
  ldr r2, =_sidata
 81004ac:	08100530 	.word	0x08100530
  ldr r2, =_sbss
 81004b0:	10000000 	.word	0x10000000
  ldr r4, =_ebss
 81004b4:	1000001c 	.word	0x1000001c

081004b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004b8:	e7fe      	b.n	81004b8 <ADC3_IRQHandler>
	...

081004bc <__libc_init_array>:
 81004bc:	b570      	push	{r4, r5, r6, lr}
 81004be:	4d0d      	ldr	r5, [pc, #52]	@ (81004f4 <__libc_init_array+0x38>)
 81004c0:	4c0d      	ldr	r4, [pc, #52]	@ (81004f8 <__libc_init_array+0x3c>)
 81004c2:	1b64      	subs	r4, r4, r5
 81004c4:	10a4      	asrs	r4, r4, #2
 81004c6:	2600      	movs	r6, #0
 81004c8:	42a6      	cmp	r6, r4
 81004ca:	d109      	bne.n	81004e0 <__libc_init_array+0x24>
 81004cc:	4d0b      	ldr	r5, [pc, #44]	@ (81004fc <__libc_init_array+0x40>)
 81004ce:	4c0c      	ldr	r4, [pc, #48]	@ (8100500 <__libc_init_array+0x44>)
 81004d0:	f000 f818 	bl	8100504 <_init>
 81004d4:	1b64      	subs	r4, r4, r5
 81004d6:	10a4      	asrs	r4, r4, #2
 81004d8:	2600      	movs	r6, #0
 81004da:	42a6      	cmp	r6, r4
 81004dc:	d105      	bne.n	81004ea <__libc_init_array+0x2e>
 81004de:	bd70      	pop	{r4, r5, r6, pc}
 81004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 81004e4:	4798      	blx	r3
 81004e6:	3601      	adds	r6, #1
 81004e8:	e7ee      	b.n	81004c8 <__libc_init_array+0xc>
 81004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 81004ee:	4798      	blx	r3
 81004f0:	3601      	adds	r6, #1
 81004f2:	e7f2      	b.n	81004da <__libc_init_array+0x1e>
 81004f4:	08100528 	.word	0x08100528
 81004f8:	08100528 	.word	0x08100528
 81004fc:	08100528 	.word	0x08100528
 8100500:	0810052c 	.word	0x0810052c

08100504 <_init>:
 8100504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100506:	bf00      	nop
 8100508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810050a:	bc08      	pop	{r3}
 810050c:	469e      	mov	lr, r3
 810050e:	4770      	bx	lr

08100510 <_fini>:
 8100510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100512:	bf00      	nop
 8100514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100516:	bc08      	pop	{r3}
 8100518:	469e      	mov	lr, r3
 810051a:	4770      	bx	lr
