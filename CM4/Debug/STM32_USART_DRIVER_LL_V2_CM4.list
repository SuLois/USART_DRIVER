
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  081005a0  081005a0  000015a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081005d4  081005d4  000015d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  081005d8  081005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000130  10000000  081005dc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000130  0810070c  00002130  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000014c  0810070c  0000214c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000110f  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000505  00000000  00000000  0000326f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000128  00000000  00000000  00003778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000c4  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032ac7  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000239b  00000000  00000000  0003642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121455  00000000  00000000  000387c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00159c1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000294  00000000  00000000  00159c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  00159ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000130 	.word	0x10000130
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100588 	.word	0x08100588

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000134 	.word	0x10000134
 81002d4:	08100588 	.word	0x08100588

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <delay>:
#include "GPIO.h"

/*----------------------------------------------------------------------------*/


void delay(uint32_t nb){
 8100308:	b480      	push	{r7}
 810030a:	b085      	sub	sp, #20
 810030c:	af00      	add	r7, sp, #0
 810030e:	6078      	str	r0, [r7, #4]

	uint32_t i;

	for(i=0; i<nb; i++){}
 8100310:	2300      	movs	r3, #0
 8100312:	60fb      	str	r3, [r7, #12]
 8100314:	e002      	b.n	810031c <delay+0x14>
 8100316:	68fb      	ldr	r3, [r7, #12]
 8100318:	3301      	adds	r3, #1
 810031a:	60fb      	str	r3, [r7, #12]
 810031c:	68fa      	ldr	r2, [r7, #12]
 810031e:	687b      	ldr	r3, [r7, #4]
 8100320:	429a      	cmp	r2, r3
 8100322:	d3f8      	bcc.n	8100316 <delay+0xe>
}
 8100324:	bf00      	nop
 8100326:	bf00      	nop
 8100328:	3714      	adds	r7, #20
 810032a:	46bd      	mov	sp, r7
 810032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100330:	4770      	bx	lr
	...

08100334 <blink_LED4>:

void blink_LED4(void){
 8100334:	b5b0      	push	{r4, r5, r7, lr}
 8100336:	b08e      	sub	sp, #56	@ 0x38
 8100338:	af00      	add	r7, sp, #0


	GPIO_TypeDef GPIO_offset = {
 810033a:	4b20      	ldr	r3, [pc, #128]	@ (81003bc <blink_LED4+0x88>)
 810033c:	1d3c      	adds	r4, r7, #4
 810033e:	461d      	mov	r5, r3
 8100340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100348:	e895 0003 	ldmia.w	r5, {r0, r1}
 810034c:	e884 0003 	stmia.w	r4, {r0, r1}
		.BSRR = GPIO_BSRR_offset,
		.LCKR = GPIO_LCKR_offset,
		.AFR = {GPIO_AFR_offset_0, GPIO_AFR_offset_1}
	};

	volatile uint32_t *GPIO_K_MODER_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.MODER);
 8100350:	687b      	ldr	r3, [r7, #4]
 8100352:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100356:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 810035a:	637b      	str	r3, [r7, #52]	@ 0x34
	volatile uint32_t *GPIO_K_BSRR_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.BSRR);
 810035c:	69fb      	ldr	r3, [r7, #28]
 810035e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100362:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 8100366:	633b      	str	r3, [r7, #48]	@ 0x30

	volatile uint32_t *RCC_AHB4ENR_register = (volatile uint32_t *)RCC_AHB4ENR_address;
 8100368:	4b15      	ldr	r3, [pc, #84]	@ (81003c0 <blink_LED4+0x8c>)
 810036a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Activation de la clock sur GPIO K
	*RCC_AHB4ENR_register |= AHB4ENR_K;
 810036c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810036e:	681b      	ldr	r3, [r3, #0]
 8100370:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8100374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8100376:	601a      	str	r2, [r3, #0]

	//Configuration de PK6 en OUPTUT
	*GPIO_K_MODER_register |= GPIO_MODER_MODE6_0;
 8100378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810037a:	681b      	ldr	r3, [r3, #0]
 810037c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8100380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100382:	601a      	str	r2, [r3, #0]
	*GPIO_K_MODER_register &= ~ GPIO_MODER_MODE6_1;
 8100384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100386:	681b      	ldr	r3, [r3, #0]
 8100388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810038c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810038e:	601a      	str	r2, [r3, #0]
	 *	BSRR[15:0] =  ‘1’: Set
	 *	BSRR[31:15] = ‘0’: Nothing
	 *	BSRR[31:15] = ‘1’: Reset
	*/
	//Bit mis à 1
	*GPIO_K_BSRR_register |= GPIO_BSRR_BS6;
 8100390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100392:	681b      	ldr	r3, [r3, #0]
 8100394:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8100398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810039a:	601a      	str	r2, [r3, #0]
	delay(10000000);
 810039c:	4809      	ldr	r0, [pc, #36]	@ (81003c4 <blink_LED4+0x90>)
 810039e:	f7ff ffb3 	bl	8100308 <delay>
	*GPIO_K_BSRR_register |= GPIO_BSRR_BR6;
 81003a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81003a4:	681b      	ldr	r3, [r3, #0]
 81003a6:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 81003aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81003ac:	601a      	str	r2, [r3, #0]
	delay(10000000);
 81003ae:	4805      	ldr	r0, [pc, #20]	@ (81003c4 <blink_LED4+0x90>)
 81003b0:	f7ff ffaa 	bl	8100308 <delay>
}
 81003b4:	bf00      	nop
 81003b6:	3738      	adds	r7, #56	@ 0x38
 81003b8:	46bd      	mov	sp, r7
 81003ba:	bdb0      	pop	{r4, r5, r7, pc}
 81003bc:	081005a0 	.word	0x081005a0
 81003c0:	580244e0 	.word	0x580244e0
 81003c4:	00989680 	.word	0x00989680

081003c8 <clock_config>:
	    .APB1HLPENR = APB1HLPENR_offset,
	    .APB2LPENR = APB2LPENR_offset,
	    .APB4LPENR = APB4LPENR_offset
};

void clock_config(){
 81003c8:	b480      	push	{r7}
 81003ca:	b083      	sub	sp, #12
 81003cc:	af00      	add	r7, sp, #0


	/* --------- Configuration registre RSR -------- */

	volatile uint32_t *RCC_RSR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.RSR);
 81003ce:	4b26      	ldr	r3, [pc, #152]	@ (8100468 <clock_config+0xa0>)
 81003d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 81003d4:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81003d8:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 81003dc:	607b      	str	r3, [r7, #4]
	//*RCC_RSR_register |= RCC_RSR_SFT2RSTF; //Reset des registres du CPU2


	/* --------- Configuration registre CR -------- */

	volatile uint32_t *RCC_CR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.CR);
 81003de:	4b22      	ldr	r3, [pc, #136]	@ (8100468 <clock_config+0xa0>)
 81003e0:	681b      	ldr	r3, [r3, #0]
 81003e2:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81003e6:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 81003ea:	603b      	str	r3, [r7, #0]

	*RCC_CR_register |= RCC_CR_HSION; // Clock d'entrée HSI
 81003ec:	683b      	ldr	r3, [r7, #0]
 81003ee:	681b      	ldr	r3, [r3, #0]
 81003f0:	f043 0201 	orr.w	r2, r3, #1
 81003f4:	683b      	ldr	r3, [r7, #0]
 81003f6:	601a      	str	r2, [r3, #0]

	while(((*RCC_CR_register >> 2) & 0x1) != 1) ; // Attente HSI stable
 81003f8:	bf00      	nop
 81003fa:	683b      	ldr	r3, [r7, #0]
 81003fc:	681b      	ldr	r3, [r3, #0]
 81003fe:	089b      	lsrs	r3, r3, #2
 8100400:	f003 0301 	and.w	r3, r3, #1
 8100404:	2b01      	cmp	r3, #1
 8100406:	d1f8      	bne.n	81003fa <clock_config+0x32>

	*RCC_CR_register |= RCC_CR_HSIDIV_1; // Prescaler HSI /1
 8100408:	683b      	ldr	r3, [r7, #0]
 810040a:	681a      	ldr	r2, [r3, #0]
 810040c:	683b      	ldr	r3, [r7, #0]
 810040e:	601a      	str	r2, [r3, #0]

	while(((*RCC_CR_register >> 14) & 0x1) != 1) ; // Clock domain stable D1
 8100410:	bf00      	nop
 8100412:	683b      	ldr	r3, [r7, #0]
 8100414:	681b      	ldr	r3, [r3, #0]
 8100416:	0b9b      	lsrs	r3, r3, #14
 8100418:	f003 0301 	and.w	r3, r3, #1
 810041c:	2b01      	cmp	r3, #1
 810041e:	d1f8      	bne.n	8100412 <clock_config+0x4a>
	while(((*RCC_CR_register >> 15) & 0x1) != 1) ; // -					  D2
 8100420:	bf00      	nop
 8100422:	683b      	ldr	r3, [r7, #0]
 8100424:	681b      	ldr	r3, [r3, #0]
 8100426:	0bdb      	lsrs	r3, r3, #15
 8100428:	f003 0301 	and.w	r3, r3, #1
 810042c:	2b01      	cmp	r3, #1
 810042e:	d1f8      	bne.n	8100422 <clock_config+0x5a>

	*RCC_CR_register |= RCC_CR_PLL1ON; // PLL1 ON
 8100430:	683b      	ldr	r3, [r7, #0]
 8100432:	681b      	ldr	r3, [r3, #0]
 8100434:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8100438:	683b      	ldr	r3, [r7, #0]
 810043a:	601a      	str	r2, [r3, #0]
	*RCC_CR_register |= RCC_CR_PLL2ON;
 810043c:	683b      	ldr	r3, [r7, #0]
 810043e:	681b      	ldr	r3, [r3, #0]
 8100440:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8100444:	683b      	ldr	r3, [r7, #0]
 8100446:	601a      	str	r2, [r3, #0]
	while(((*RCC_CR_register >> 25) & 0x1) != 1) ; // PLL1 clock ready
 8100448:	bf00      	nop
 810044a:	683b      	ldr	r3, [r7, #0]
 810044c:	681b      	ldr	r3, [r3, #0]
 810044e:	0e5b      	lsrs	r3, r3, #25
 8100450:	f003 0301 	and.w	r3, r3, #1
 8100454:	2b01      	cmp	r3, #1
 8100456:	d1f8      	bne.n	810044a <clock_config+0x82>

	/* --------- Configuration registre CFGR -------- */



}
 8100458:	bf00      	nop
 810045a:	bf00      	nop
 810045c:	370c      	adds	r7, #12
 810045e:	46bd      	mov	sp, r7
 8100460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100464:	4770      	bx	lr
 8100466:	bf00      	nop
 8100468:	10000000 	.word	0x10000000

0810046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b084      	sub	sp, #16
 8100470:	af00      	add	r7, sp, #0

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 8100472:	4a05      	ldr	r2, [pc, #20]	@ (8100488 <main+0x1c>)
 8100474:	1d3b      	adds	r3, r7, #4
 8100476:	ca07      	ldmia	r2, {r0, r1, r2}
 8100478:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  clock_config();
 810047c:	f7ff ffa4 	bl	81003c8 <clock_config>
	  blink_LED4();
 8100480:	f7ff ff58 	bl	8100334 <blink_LED4>
  {
 8100484:	bf00      	nop
 8100486:	e7f9      	b.n	810047c <main+0x10>
 8100488:	081005c8 	.word	0x081005c8

0810048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810048c:	b480      	push	{r7}
 810048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100490:	bf00      	nop
 8100492:	e7fd      	b.n	8100490 <NMI_Handler+0x4>

08100494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100494:	b480      	push	{r7}
 8100496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100498:	bf00      	nop
 810049a:	e7fd      	b.n	8100498 <HardFault_Handler+0x4>

0810049c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810049c:	b480      	push	{r7}
 810049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81004a0:	bf00      	nop
 81004a2:	e7fd      	b.n	81004a0 <MemManage_Handler+0x4>

081004a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81004a4:	b480      	push	{r7}
 81004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81004a8:	bf00      	nop
 81004aa:	e7fd      	b.n	81004a8 <BusFault_Handler+0x4>

081004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81004ac:	b480      	push	{r7}
 81004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81004b0:	bf00      	nop
 81004b2:	e7fd      	b.n	81004b0 <UsageFault_Handler+0x4>

081004b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81004b4:	b480      	push	{r7}
 81004b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81004b8:	bf00      	nop
 81004ba:	46bd      	mov	sp, r7
 81004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004c0:	4770      	bx	lr

081004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81004c2:	b480      	push	{r7}
 81004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81004c6:	bf00      	nop
 81004c8:	46bd      	mov	sp, r7
 81004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ce:	4770      	bx	lr

081004d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81004d0:	b480      	push	{r7}
 81004d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81004d4:	bf00      	nop
 81004d6:	46bd      	mov	sp, r7
 81004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004dc:	4770      	bx	lr

081004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004de:	b480      	push	{r7}
 81004e0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004e2:	bf00      	nop
 81004e4:	46bd      	mov	sp, r7
 81004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ea:	4770      	bx	lr

081004ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81004ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81004f0:	f7ff fef2 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004f4:	480c      	ldr	r0, [pc, #48]	@ (8100528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81004f6:	490d      	ldr	r1, [pc, #52]	@ (810052c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8100530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004fc:	e002      	b.n	8100504 <LoopCopyDataInit>

081004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100502:	3304      	adds	r3, #4

08100504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100508:	d3f9      	bcc.n	81004fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810050a:	4a0a      	ldr	r2, [pc, #40]	@ (8100534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810050c:	4c0a      	ldr	r4, [pc, #40]	@ (8100538 <LoopFillZerobss+0x22>)
  movs r3, #0
 810050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100510:	e001      	b.n	8100516 <LoopFillZerobss>

08100512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100514:	3204      	adds	r2, #4

08100516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100518:	d3fb      	bcc.n	8100512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810051a:	f000 f811 	bl	8100540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810051e:	f7ff ffa5 	bl	810046c <main>
  bx  lr
 8100522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100524:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100528:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810052c:	10000130 	.word	0x10000130
  ldr r2, =_sidata
 8100530:	081005dc 	.word	0x081005dc
  ldr r2, =_sbss
 8100534:	10000130 	.word	0x10000130
  ldr r4, =_ebss
 8100538:	1000014c 	.word	0x1000014c

0810053c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810053c:	e7fe      	b.n	810053c <ADC3_IRQHandler>
	...

08100540 <__libc_init_array>:
 8100540:	b570      	push	{r4, r5, r6, lr}
 8100542:	4d0d      	ldr	r5, [pc, #52]	@ (8100578 <__libc_init_array+0x38>)
 8100544:	4c0d      	ldr	r4, [pc, #52]	@ (810057c <__libc_init_array+0x3c>)
 8100546:	1b64      	subs	r4, r4, r5
 8100548:	10a4      	asrs	r4, r4, #2
 810054a:	2600      	movs	r6, #0
 810054c:	42a6      	cmp	r6, r4
 810054e:	d109      	bne.n	8100564 <__libc_init_array+0x24>
 8100550:	4d0b      	ldr	r5, [pc, #44]	@ (8100580 <__libc_init_array+0x40>)
 8100552:	4c0c      	ldr	r4, [pc, #48]	@ (8100584 <__libc_init_array+0x44>)
 8100554:	f000 f818 	bl	8100588 <_init>
 8100558:	1b64      	subs	r4, r4, r5
 810055a:	10a4      	asrs	r4, r4, #2
 810055c:	2600      	movs	r6, #0
 810055e:	42a6      	cmp	r6, r4
 8100560:	d105      	bne.n	810056e <__libc_init_array+0x2e>
 8100562:	bd70      	pop	{r4, r5, r6, pc}
 8100564:	f855 3b04 	ldr.w	r3, [r5], #4
 8100568:	4798      	blx	r3
 810056a:	3601      	adds	r6, #1
 810056c:	e7ee      	b.n	810054c <__libc_init_array+0xc>
 810056e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100572:	4798      	blx	r3
 8100574:	3601      	adds	r6, #1
 8100576:	e7f2      	b.n	810055e <__libc_init_array+0x1e>
 8100578:	081005d4 	.word	0x081005d4
 810057c:	081005d4 	.word	0x081005d4
 8100580:	081005d4 	.word	0x081005d4
 8100584:	081005d8 	.word	0x081005d8

08100588 <_init>:
 8100588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810058a:	bf00      	nop
 810058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810058e:	bc08      	pop	{r3}
 8100590:	469e      	mov	lr, r3
 8100592:	4770      	bx	lr

08100594 <_fini>:
 8100594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100596:	bf00      	nop
 8100598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810059a:	bc08      	pop	{r3}
 810059c:	469e      	mov	lr, r3
 810059e:	4770      	bx	lr
