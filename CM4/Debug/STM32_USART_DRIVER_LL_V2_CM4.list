
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e8  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08100980  08100980  00001980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810098c  0810098c  0000198c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100990  08100990  00001990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000354  10000000  08100994  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000354  08100ce8  00002354  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000370  08100ce8  00002370  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000184e  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000073c  00000000  00000000  00003bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000188  00000000  00000000  00004310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000fe  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003310c  00000000  00000000  00004596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00003419  00000000  00000000  000376a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121cf3  00000000  00000000  0003aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015c7ae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000338  00000000  00000000  0015c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  0015cb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000354 	.word	0x10000354
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100968 	.word	0x08100968

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000358 	.word	0x10000358
 81002d4:	08100968 	.word	0x08100968

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <flash_config>:
        .CRCEADD2 = CRCEADD2_offset,
        .CRCDATA2 = CRCDATA2_offset,
        .ECC_FA2 = ECC_FA2_offset
};

void flash_config(){
 8100308:	b480      	push	{r7}
 810030a:	b083      	sub	sp, #12
 810030c:	af00      	add	r7, sp, #0

	// Configuration du nombre d'état d'attente en fonction de la fréquence Système

    volatile uint32_t *FLASH_ACR_register = (volatile uint32_t *)((uint32_t)FLASH_R_BASE + FLASH_offset.ACR);
 810030e:	4b12      	ldr	r3, [pc, #72]	@ (8100358 <flash_config+0x50>)
 8100310:	681b      	ldr	r3, [r3, #0]
 8100312:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8100316:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 810031a:	607b      	str	r3, [r7, #4]
	/* Configuration du nombre d'état d'attente en fonction de la fréquence Système
	 * Voir Table 16 dans la doc pour détail sur le choix des bits
	 * Ici : Sys_clk = 96 MHz donc 55 < 96 < 110
	 * Soit VS02 pour 1WS
	*/
    *FLASH_ACR_register |= FLASH_ACR_WRHIGHFREQ_0;
 810031c:	687b      	ldr	r3, [r7, #4]
 810031e:	681b      	ldr	r3, [r3, #0]
 8100320:	f043 0210 	orr.w	r2, r3, #16
 8100324:	687b      	ldr	r3, [r7, #4]
 8100326:	601a      	str	r2, [r3, #0]
    *FLASH_ACR_register &= ~FLASH_ACR_WRHIGHFREQ_1;
 8100328:	687b      	ldr	r3, [r7, #4]
 810032a:	681b      	ldr	r3, [r3, #0]
 810032c:	f023 0220 	bic.w	r2, r3, #32
 8100330:	687b      	ldr	r3, [r7, #4]
 8100332:	601a      	str	r2, [r3, #0]

    *FLASH_ACR_register &= FLASH_ACR_LATENCY_0WS;	// RAZ du registre afin configuration
 8100334:	687b      	ldr	r3, [r7, #4]
 8100336:	681b      	ldr	r3, [r3, #0]
 8100338:	687b      	ldr	r3, [r7, #4]
 810033a:	2200      	movs	r2, #0
 810033c:	601a      	str	r2, [r3, #0]
    *FLASH_ACR_register |= FLASH_ACR_LATENCY_1WS;	// 1WS soit 2 FLASH clock cycle
 810033e:	687b      	ldr	r3, [r7, #4]
 8100340:	681b      	ldr	r3, [r3, #0]
 8100342:	f043 0201 	orr.w	r2, r3, #1
 8100346:	687b      	ldr	r3, [r7, #4]
 8100348:	601a      	str	r2, [r3, #0]
}
 810034a:	bf00      	nop
 810034c:	370c      	adds	r7, #12
 810034e:	46bd      	mov	sp, r7
 8100350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100354:	4770      	bx	lr
 8100356:	bf00      	nop
 8100358:	10000000 	.word	0x10000000

0810035c <gpio_check_freq>:
	.LCKR = GPIO_LCKR_offset,
	.AFR = {GPIO_AFR_offset_0, GPIO_AFR_offset_1}
};


void gpio_check_freq(void){
 810035c:	b480      	push	{r7}
 810035e:	b085      	sub	sp, #20
 8100360:	af00      	add	r7, sp, #0

	/*
	 * Configuration de la sortie de la clock systeme sur GPIO PA8
	*/

	volatile uint32_t *GPIO_A_MODER_register = (volatile uint32_t *)((uint32_t)GPIOA + GPIO_offset.MODER);
 8100362:	4b32      	ldr	r3, [pc, #200]	@ (810042c <gpio_check_freq+0xd0>)
 8100364:	681b      	ldr	r3, [r3, #0]
 8100366:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810036a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 810036e:	60fb      	str	r3, [r7, #12]
	// Alternante function sur PA8
	*GPIO_A_MODER_register &= ~GPIO_MODER_MODE8_0;
 8100370:	68fb      	ldr	r3, [r7, #12]
 8100372:	681b      	ldr	r3, [r3, #0]
 8100374:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8100378:	68fb      	ldr	r3, [r7, #12]
 810037a:	601a      	str	r2, [r3, #0]
	*GPIO_A_MODER_register |= GPIO_MODER_MODE8_1;
 810037c:	68fb      	ldr	r3, [r7, #12]
 810037e:	681b      	ldr	r3, [r3, #0]
 8100380:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8100384:	68fb      	ldr	r3, [r7, #12]
 8100386:	601a      	str	r2, [r3, #0]


	// Choix de la fonction alternative --> MCO1 sur PA8 --> AF0 --> 0000
	volatile uint32_t *GPIO_A_AFRH_register = (volatile uint32_t *)((uint32_t)GPIOA + GPIO_offset.AFR[GPIO_AFR_offset_1]);
 8100388:	4b28      	ldr	r3, [pc, #160]	@ (810042c <gpio_check_freq+0xd0>)
 810038a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810038e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100392:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8100396:	60bb      	str	r3, [r7, #8]

	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_0;
 8100398:	68bb      	ldr	r3, [r7, #8]
 810039a:	681b      	ldr	r3, [r3, #0]
 810039c:	f023 0201 	bic.w	r2, r3, #1
 81003a0:	68bb      	ldr	r3, [r7, #8]
 81003a2:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_1;
 81003a4:	68bb      	ldr	r3, [r7, #8]
 81003a6:	681b      	ldr	r3, [r3, #0]
 81003a8:	f023 0202 	bic.w	r2, r3, #2
 81003ac:	68bb      	ldr	r3, [r7, #8]
 81003ae:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_2;
 81003b0:	68bb      	ldr	r3, [r7, #8]
 81003b2:	681b      	ldr	r3, [r3, #0]
 81003b4:	f023 0204 	bic.w	r2, r3, #4
 81003b8:	68bb      	ldr	r3, [r7, #8]
 81003ba:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRH_register &= ~GPIO_AFRH_AFSEL8_3;
 81003bc:	68bb      	ldr	r3, [r7, #8]
 81003be:	681b      	ldr	r3, [r3, #0]
 81003c0:	f023 0208 	bic.w	r2, r3, #8
 81003c4:	68bb      	ldr	r3, [r7, #8]
 81003c6:	601a      	str	r2, [r3, #0]
	/*
	 * Configuration de la sortie du TIM2 sur GPIO PA0
	*/

	// Alternante function sur PA0
	*GPIO_A_MODER_register &= ~GPIO_MODER_MODE0_0;
 81003c8:	68fb      	ldr	r3, [r7, #12]
 81003ca:	681b      	ldr	r3, [r3, #0]
 81003cc:	f023 0201 	bic.w	r2, r3, #1
 81003d0:	68fb      	ldr	r3, [r7, #12]
 81003d2:	601a      	str	r2, [r3, #0]
	*GPIO_A_MODER_register |= GPIO_MODER_MODE0_1;
 81003d4:	68fb      	ldr	r3, [r7, #12]
 81003d6:	681b      	ldr	r3, [r3, #0]
 81003d8:	f043 0202 	orr.w	r2, r3, #2
 81003dc:	68fb      	ldr	r3, [r7, #12]
 81003de:	601a      	str	r2, [r3, #0]

	// Choix de la fonction alternative --> TIM2_CH1 sur PA0 --> AF1 --> 0001
	volatile uint32_t *GPIO_A_AFRL_register = (volatile uint32_t *)((uint32_t)GPIOA + GPIO_offset.AFR[GPIO_AFR_offset_0]);
 81003e0:	4b12      	ldr	r3, [pc, #72]	@ (810042c <gpio_check_freq+0xd0>)
 81003e2:	6a1b      	ldr	r3, [r3, #32]
 81003e4:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81003e8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 81003ec:	607b      	str	r3, [r7, #4]

	*GPIO_A_AFRL_register |= GPIO_AFRL_AFSEL0_0;
 81003ee:	687b      	ldr	r3, [r7, #4]
 81003f0:	681b      	ldr	r3, [r3, #0]
 81003f2:	f043 0201 	orr.w	r2, r3, #1
 81003f6:	687b      	ldr	r3, [r7, #4]
 81003f8:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRL_register &= ~GPIO_AFRL_AFSEL0_1;
 81003fa:	687b      	ldr	r3, [r7, #4]
 81003fc:	681b      	ldr	r3, [r3, #0]
 81003fe:	f023 0202 	bic.w	r2, r3, #2
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRL_register &= ~GPIO_AFRL_AFSEL0_2;
 8100406:	687b      	ldr	r3, [r7, #4]
 8100408:	681b      	ldr	r3, [r3, #0]
 810040a:	f023 0204 	bic.w	r2, r3, #4
 810040e:	687b      	ldr	r3, [r7, #4]
 8100410:	601a      	str	r2, [r3, #0]
	*GPIO_A_AFRL_register &= ~GPIO_AFRL_AFSEL0_3;
 8100412:	687b      	ldr	r3, [r7, #4]
 8100414:	681b      	ldr	r3, [r3, #0]
 8100416:	f023 0208 	bic.w	r2, r3, #8
 810041a:	687b      	ldr	r3, [r7, #4]
 810041c:	601a      	str	r2, [r3, #0]





}
 810041e:	bf00      	nop
 8100420:	3714      	adds	r7, #20
 8100422:	46bd      	mov	sp, r7
 8100424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100428:	4770      	bx	lr
 810042a:	bf00      	nop
 810042c:	10000164 	.word	0x10000164

08100430 <delay>:

void delay(uint32_t nb){
 8100430:	b480      	push	{r7}
 8100432:	b085      	sub	sp, #20
 8100434:	af00      	add	r7, sp, #0
 8100436:	6078      	str	r0, [r7, #4]

	uint32_t i;

	for(i=0; i<nb; i++){}
 8100438:	2300      	movs	r3, #0
 810043a:	60fb      	str	r3, [r7, #12]
 810043c:	e002      	b.n	8100444 <delay+0x14>
 810043e:	68fb      	ldr	r3, [r7, #12]
 8100440:	3301      	adds	r3, #1
 8100442:	60fb      	str	r3, [r7, #12]
 8100444:	68fa      	ldr	r2, [r7, #12]
 8100446:	687b      	ldr	r3, [r7, #4]
 8100448:	429a      	cmp	r2, r3
 810044a:	d3f8      	bcc.n	810043e <delay+0xe>
}
 810044c:	bf00      	nop
 810044e:	bf00      	nop
 8100450:	3714      	adds	r7, #20
 8100452:	46bd      	mov	sp, r7
 8100454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100458:	4770      	bx	lr
	...

0810045c <blink_LED4>:

void blink_LED4(void){
 810045c:	b580      	push	{r7, lr}
 810045e:	b084      	sub	sp, #16
 8100460:	af00      	add	r7, sp, #0

	volatile uint32_t *GPIO_K_MODER_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.MODER);
 8100462:	4b1c      	ldr	r3, [pc, #112]	@ (81004d4 <blink_LED4+0x78>)
 8100464:	681b      	ldr	r3, [r3, #0]
 8100466:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810046a:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 810046e:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *GPIO_K_BSRR_register = (volatile uint32_t *)((uint32_t)GPIOK + GPIO_offset.BSRR);
 8100470:	4b18      	ldr	r3, [pc, #96]	@ (81004d4 <blink_LED4+0x78>)
 8100472:	699b      	ldr	r3, [r3, #24]
 8100474:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100478:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 810047c:	60bb      	str	r3, [r7, #8]

	volatile uint32_t *RCC_AHB4ENR_register = (volatile uint32_t *)RCC_AHB4ENR_address;
 810047e:	4b16      	ldr	r3, [pc, #88]	@ (81004d8 <blink_LED4+0x7c>)
 8100480:	607b      	str	r3, [r7, #4]

	//Activation de la clock sur GPIO K
	*RCC_AHB4ENR_register |= AHB4ENR_K;
 8100482:	687b      	ldr	r3, [r7, #4]
 8100484:	681b      	ldr	r3, [r3, #0]
 8100486:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 810048a:	687b      	ldr	r3, [r7, #4]
 810048c:	601a      	str	r2, [r3, #0]

	//Configuration de PK6 en OUPTUT
	*GPIO_K_MODER_register |= GPIO_MODER_MODE6_0;
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	681b      	ldr	r3, [r3, #0]
 8100492:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8100496:	68fb      	ldr	r3, [r7, #12]
 8100498:	601a      	str	r2, [r3, #0]
	*GPIO_K_MODER_register &= ~ GPIO_MODER_MODE6_1;
 810049a:	68fb      	ldr	r3, [r7, #12]
 810049c:	681b      	ldr	r3, [r3, #0]
 810049e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 81004a2:	68fb      	ldr	r3, [r7, #12]
 81004a4:	601a      	str	r2, [r3, #0]
	 *	BSRR[15:0] =  ‘1’: Set
	 *	BSRR[31:15] = ‘0’: Nothing
	 *	BSRR[31:15] = ‘1’: Reset
	*/
	//Bit mis à 1
	*GPIO_K_BSRR_register |= GPIO_BSRR_BS6;
 81004a6:	68bb      	ldr	r3, [r7, #8]
 81004a8:	681b      	ldr	r3, [r3, #0]
 81004aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81004ae:	68bb      	ldr	r3, [r7, #8]
 81004b0:	601a      	str	r2, [r3, #0]
	delay(100000);
 81004b2:	480a      	ldr	r0, [pc, #40]	@ (81004dc <blink_LED4+0x80>)
 81004b4:	f7ff ffbc 	bl	8100430 <delay>
	*GPIO_K_BSRR_register |= GPIO_BSRR_BR6;
 81004b8:	68bb      	ldr	r3, [r7, #8]
 81004ba:	681b      	ldr	r3, [r3, #0]
 81004bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 81004c0:	68bb      	ldr	r3, [r7, #8]
 81004c2:	601a      	str	r2, [r3, #0]
	delay(100000);
 81004c4:	4805      	ldr	r0, [pc, #20]	@ (81004dc <blink_LED4+0x80>)
 81004c6:	f7ff ffb3 	bl	8100430 <delay>
}
 81004ca:	bf00      	nop
 81004cc:	3710      	adds	r7, #16
 81004ce:	46bd      	mov	sp, r7
 81004d0:	bd80      	pop	{r7, pc}
 81004d2:	bf00      	nop
 81004d4:	10000164 	.word	0x10000164
 81004d8:	580244e0 	.word	0x580244e0
 81004dc:	000186a0 	.word	0x000186a0

081004e0 <power_clock_config>:
  .WKUPCR = WKUPCR_offset,
  .WKUPFR = WKUPFR_offset,
  .WKUPEPR = WKUPEPR_offset
};

void power_clock_config(){
 81004e0:	b480      	push	{r7}
 81004e2:	b083      	sub	sp, #12
 81004e4:	af00      	add	r7, sp, #0

	// Configuration de l'alimentation en fonction de la fréquence Système

	volatile uint32_t *PWR_D3CR_register = (volatile uint32_t *)((uint32_t)PWR_BASE + PWR_offset.D3CR);
 81004e6:	4b11      	ldr	r3, [pc, #68]	@ (810052c <power_clock_config+0x4c>)
 81004e8:	699b      	ldr	r3, [r3, #24]
 81004ea:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81004ee:	f503 3312 	add.w	r3, r3, #149504	@ 0x24800
 81004f2:	607b      	str	r3, [r7, #4]

	/* Programmation de l'alimentation sur Scale 2
	 * Mise à 1 en premier du bit 1 car valeur VOS[0:1] = 00 interdite
	*/
	*PWR_D3CR_register |= PWR_CSR1_ACTVOS_1;
 81004f4:	687b      	ldr	r3, [r7, #4]
 81004f6:	681b      	ldr	r3, [r3, #0]
 81004f8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 81004fc:	687b      	ldr	r3, [r7, #4]
 81004fe:	601a      	str	r2, [r3, #0]
	*PWR_D3CR_register &= ~PWR_CSR1_ACTVOS_0;
 8100500:	687b      	ldr	r3, [r7, #4]
 8100502:	681b      	ldr	r3, [r3, #0]
 8100504:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8100508:	687b      	ldr	r3, [r7, #4]
 810050a:	601a      	str	r2, [r3, #0]


	while(((*PWR_D3CR_register >> 13) & 0x1) != 1) ;		// Attente niveau de tension Scale 2
 810050c:	bf00      	nop
 810050e:	687b      	ldr	r3, [r7, #4]
 8100510:	681b      	ldr	r3, [r3, #0]
 8100512:	0b5b      	lsrs	r3, r3, #13
 8100514:	f003 0301 	and.w	r3, r3, #1
 8100518:	2b01      	cmp	r3, #1
 810051a:	d1f8      	bne.n	810050e <power_clock_config+0x2e>

}
 810051c:	bf00      	nop
 810051e:	bf00      	nop
 8100520:	370c      	adds	r7, #12
 8100522:	46bd      	mov	sp, r7
 8100524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100528:	4770      	bx	lr
 810052a:	bf00      	nop
 810052c:	1000018c 	.word	0x1000018c

08100530 <clock_config>:
	    .APB1HLPENR = APB1HLPENR_offset,
	    .APB2LPENR = APB2LPENR_offset,
	    .APB4LPENR = APB4LPENR_offset
};

void clock_config(){
 8100530:	b480      	push	{r7}
 8100532:	b087      	sub	sp, #28
 8100534:	af00      	add	r7, sp, #0


	volatile uint32_t *RCC_RSR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.RSR);
 8100536:	4b60      	ldr	r3, [pc, #384]	@ (81006b8 <clock_config+0x188>)
 8100538:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810053c:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8100540:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100544:	617b      	str	r3, [r7, #20]
	volatile uint32_t *RCC_CFGR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.CFGR);
 8100546:	4b5c      	ldr	r3, [pc, #368]	@ (81006b8 <clock_config+0x188>)
 8100548:	691b      	ldr	r3, [r3, #16]
 810054a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810054e:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100552:	613b      	str	r3, [r7, #16]
	volatile uint32_t *RCC_CR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.CR);
 8100554:	4b58      	ldr	r3, [pc, #352]	@ (81006b8 <clock_config+0x188>)
 8100556:	681b      	ldr	r3, [r3, #0]
 8100558:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810055c:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100560:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *RCC_D1CFGR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.D1CFGR);
 8100562:	4b55      	ldr	r3, [pc, #340]	@ (81006b8 <clock_config+0x188>)
 8100564:	699b      	ldr	r3, [r3, #24]
 8100566:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810056a:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 810056e:	60bb      	str	r3, [r7, #8]


	*RCC_RSR_register |= RCC_RSR_SFT2RSTF; 					// Reset des registres du CPU2
 8100570:	697b      	ldr	r3, [r7, #20]
 8100572:	681b      	ldr	r3, [r3, #0]
 8100574:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8100578:	697b      	ldr	r3, [r7, #20]
 810057a:	601a      	str	r2, [r3, #0]

	*RCC_CIER_register |= RCC_CIER_PLL1RDYIE; 				// Activer les interruptions sur flag PLL1 READY
	*RCC_CICR_register |= RCC_CICR_PLLRDYC; 				// reset interruptions sur flag PLL1 READY
	*/

	*RCC_CR_register |= RCC_CR_HSEON; 						// Clock HSE on
 810057c:	68fb      	ldr	r3, [r7, #12]
 810057e:	681b      	ldr	r3, [r3, #0]
 8100580:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8100584:	68fb      	ldr	r3, [r7, #12]
 8100586:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register |= RCC_CFGR_SW_HSE; 					// Sys CLK sur HSE
 8100588:	693b      	ldr	r3, [r7, #16]
 810058a:	681b      	ldr	r3, [r3, #0]
 810058c:	f043 0202 	orr.w	r2, r3, #2
 8100590:	693b      	ldr	r3, [r7, #16]
 8100592:	601a      	str	r2, [r3, #0]

	*RCC_CR_register &= ~RCC_CR_HSION; 						// Clock HSI off
 8100594:	68fb      	ldr	r3, [r7, #12]
 8100596:	681b      	ldr	r3, [r3, #0]
 8100598:	f023 0201 	bic.w	r2, r3, #1
 810059c:	68fb      	ldr	r3, [r7, #12]
 810059e:	601a      	str	r2, [r3, #0]
	*RCC_CR_register &= RCC_CR_HSIDIV_1; 					// RAZ prescaler HSI
 81005a0:	68fb      	ldr	r3, [r7, #12]
 81005a2:	681b      	ldr	r3, [r3, #0]
 81005a4:	68fb      	ldr	r3, [r7, #12]
 81005a6:	2200      	movs	r2, #0
 81005a8:	601a      	str	r2, [r3, #0]
	*RCC_CR_register |= RCC_CR_HSIDIV_8; 					// Prescaler HSI /8
 81005aa:	68fb      	ldr	r3, [r7, #12]
 81005ac:	681b      	ldr	r3, [r3, #0]
 81005ae:	f043 0218 	orr.w	r2, r3, #24
 81005b2:	68fb      	ldr	r3, [r7, #12]
 81005b4:	601a      	str	r2, [r3, #0]

	/* ------------ MUX MCO1 sur HSI [0, 0, 0] ------------ */
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_0;
 81005b6:	693b      	ldr	r3, [r7, #16]
 81005b8:	681b      	ldr	r3, [r3, #0]
 81005ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 81005be:	693b      	ldr	r3, [r7, #16]
 81005c0:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_1;
 81005c2:	693b      	ldr	r3, [r7, #16]
 81005c4:	681b      	ldr	r3, [r3, #0]
 81005c6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 81005ca:	693b      	ldr	r3, [r7, #16]
 81005cc:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1_2;
 81005ce:	693b      	ldr	r3, [r7, #16]
 81005d0:	681b      	ldr	r3, [r3, #0]
 81005d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 81005d6:	693b      	ldr	r3, [r7, #16]
 81005d8:	601a      	str	r2, [r3, #0]

	*RCC_CFGR_register &= RCC_CFGR_SW_HSI; 					// Sys CLK sur HSI
 81005da:	693b      	ldr	r3, [r7, #16]
 81005dc:	681b      	ldr	r3, [r3, #0]
 81005de:	693b      	ldr	r3, [r7, #16]
 81005e0:	2200      	movs	r2, #0
 81005e2:	601a      	str	r2, [r3, #0]

	/* ------- Division par 10 à la sortie sur MCO1 ------- */
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1PRE_0;
 81005e4:	693b      	ldr	r3, [r7, #16]
 81005e6:	681b      	ldr	r3, [r3, #0]
 81005e8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 81005ec:	693b      	ldr	r3, [r7, #16]
 81005ee:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register |= RCC_CFGR_MCO1PRE_1;
 81005f0:	693b      	ldr	r3, [r7, #16]
 81005f2:	681b      	ldr	r3, [r3, #0]
 81005f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 81005f8:	693b      	ldr	r3, [r7, #16]
 81005fa:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register &= ~RCC_CFGR_MCO1PRE_2;
 81005fc:	693b      	ldr	r3, [r7, #16]
 81005fe:	681b      	ldr	r3, [r3, #0]
 8100600:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8100604:	693b      	ldr	r3, [r7, #16]
 8100606:	601a      	str	r2, [r3, #0]
	*RCC_CFGR_register |= RCC_CFGR_MCO1PRE_3;
 8100608:	693b      	ldr	r3, [r7, #16]
 810060a:	681b      	ldr	r3, [r3, #0]
 810060c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8100610:	693b      	ldr	r3, [r7, #16]
 8100612:	601a      	str	r2, [r3, #0]

	*RCC_CR_register |= RCC_CR_HSION; 						// Clock HSI on
 8100614:	68fb      	ldr	r3, [r7, #12]
 8100616:	681b      	ldr	r3, [r3, #0]
 8100618:	f043 0201 	orr.w	r2, r3, #1
 810061c:	68fb      	ldr	r3, [r7, #12]
 810061e:	601a      	str	r2, [r3, #0]
	while(((*RCC_CR_register >> 2) & 0x1) != 1) ; 			// Attente HSI stable
 8100620:	bf00      	nop
 8100622:	68fb      	ldr	r3, [r7, #12]
 8100624:	681b      	ldr	r3, [r3, #0]
 8100626:	089b      	lsrs	r3, r3, #2
 8100628:	f003 0301 	and.w	r3, r3, #1
 810062c:	2b01      	cmp	r3, #1
 810062e:	d1f8      	bne.n	8100622 <clock_config+0xf2>

	*RCC_CR_register &= ~RCC_CR_HSEON; 						// Clock HSE off
 8100630:	68fb      	ldr	r3, [r7, #12]
 8100632:	681b      	ldr	r3, [r3, #0]
 8100634:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8100638:	68fb      	ldr	r3, [r7, #12]
 810063a:	601a      	str	r2, [r3, #0]


	while(((*RCC_CR_register >> 14) & 0x1) != 1) ; 			// Clock domain stable D1
 810063c:	bf00      	nop
 810063e:	68fb      	ldr	r3, [r7, #12]
 8100640:	681b      	ldr	r3, [r3, #0]
 8100642:	0b9b      	lsrs	r3, r3, #14
 8100644:	f003 0301 	and.w	r3, r3, #1
 8100648:	2b01      	cmp	r3, #1
 810064a:	d1f8      	bne.n	810063e <clock_config+0x10e>
	while(((*RCC_CR_register >> 15) & 0x1) != 1) ;			// -				   D2
 810064c:	bf00      	nop
 810064e:	68fb      	ldr	r3, [r7, #12]
 8100650:	681b      	ldr	r3, [r3, #0]
 8100652:	0bdb      	lsrs	r3, r3, #15
 8100654:	f003 0301 	and.w	r3, r3, #1
 8100658:	2b01      	cmp	r3, #1
 810065a:	d1f8      	bne.n	810064e <clock_config+0x11e>
	*RCC_CR_register |= RCC_CR_PLL1ON; // PLL1 OFF
	while(((*RCC_CR_register >> 25) & 0x1) != 1) ; 			// PLL1 clock ready
	*RCC_CFGR_register |= RCC_CFGR_SW_PLL1; 				// Sys CLK sur PLL1
	*/

	*RCC_D1CFGR_register &= ~RCC_D1CFGR_HPRE_DIV1; 			// HPRE PRESCALER /0
 810065c:	68bb      	ldr	r3, [r7, #8]
 810065e:	681a      	ldr	r2, [r3, #0]
 8100660:	68bb      	ldr	r3, [r7, #8]
 8100662:	601a      	str	r2, [r3, #0]
	*RCC_D1CFGR_register &= ~RCC_D1CFGR_D1PPRE_DIV1; 		// D1PPRE PRESCALER /0
 8100664:	68bb      	ldr	r3, [r7, #8]
 8100666:	681a      	ldr	r2, [r3, #0]
 8100668:	68bb      	ldr	r3, [r7, #8]
 810066a:	601a      	str	r2, [r3, #0]
	*RCC_D1CFGR_register &= ~RCC_D1CFGR_D1CPRE_DIV1; 		// D1CPRE PRESCALER /0
 810066c:	68bb      	ldr	r3, [r7, #8]
 810066e:	681a      	ldr	r2, [r3, #0]
 8100670:	68bb      	ldr	r3, [r7, #8]
 8100672:	601a      	str	r2, [r3, #0]


	/*
	 * Mise à ON des clock périphériques
	*/
	volatile uint32_t *RCC_AHB4ENR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.AHB4ENR);
 8100674:	4b10      	ldr	r3, [pc, #64]	@ (81006b8 <clock_config+0x188>)
 8100676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810067a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810067e:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100682:	607b      	str	r3, [r7, #4]
	volatile uint32_t *RCC_APB1LENR_register = (volatile uint32_t *)((uint32_t)RCC_BASE + RCC_offset.APB1LENR);
 8100684:	4b0c      	ldr	r3, [pc, #48]	@ (81006b8 <clock_config+0x188>)
 8100686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810068a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810068e:	f503 3311 	add.w	r3, r3, #148480	@ 0x24400
 8100692:	603b      	str	r3, [r7, #0]

	*RCC_AHB4ENR_register |= RCC_AHB4ENR_GPIOAEN;
 8100694:	687b      	ldr	r3, [r7, #4]
 8100696:	681b      	ldr	r3, [r3, #0]
 8100698:	f043 0201 	orr.w	r2, r3, #1
 810069c:	687b      	ldr	r3, [r7, #4]
 810069e:	601a      	str	r2, [r3, #0]

	*RCC_APB1LENR_register |= RCC_APB1LENR_TIM2EN;
 81006a0:	683b      	ldr	r3, [r7, #0]
 81006a2:	681b      	ldr	r3, [r3, #0]
 81006a4:	f043 0201 	orr.w	r2, r3, #1
 81006a8:	683b      	ldr	r3, [r7, #0]
 81006aa:	601a      	str	r2, [r3, #0]

}
 81006ac:	bf00      	nop
 81006ae:	371c      	adds	r7, #28
 81006b0:	46bd      	mov	sp, r7
 81006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006b6:	4770      	bx	lr
 81006b8:	100001b8 	.word	0x100001b8

081006bc <tim2_config>:
		.SMCR = SMCR_offset,
		.CCMR1 = CCMR1_offset
};


void tim2_config(){
 81006bc:	b480      	push	{r7}
 81006be:	b087      	sub	sp, #28
 81006c0:	af00      	add	r7, sp, #0

	volatile uint32_t *TIM2_CR1_register = (volatile uint32_t *)((uint32_t)TIM2_BASE + TIM_offset.CR1);
 81006c2:	4b5d      	ldr	r3, [pc, #372]	@ (8100838 <tim2_config+0x17c>)
 81006c4:	681b      	ldr	r3, [r3, #0]
 81006c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81006ca:	617b      	str	r3, [r7, #20]

	*TIM2_CR1_register |=  TIM_CR1_CEN; 		// Counter activé
 81006cc:	697b      	ldr	r3, [r7, #20]
 81006ce:	681b      	ldr	r3, [r3, #0]
 81006d0:	f043 0201 	orr.w	r2, r3, #1
 81006d4:	697b      	ldr	r3, [r7, #20]
 81006d6:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register &=  ~TIM_CR1_UDIS; 		// UEV flag activé
 81006d8:	697b      	ldr	r3, [r7, #20]
 81006da:	681b      	ldr	r3, [r3, #0]
 81006dc:	f023 0202 	bic.w	r2, r3, #2
 81006e0:	697b      	ldr	r3, [r7, #20]
 81006e2:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register |=  TIM_CR1_URS; 		// UEV flag event uniquement sur over/underflow counter ou DMA request
 81006e4:	697b      	ldr	r3, [r7, #20]
 81006e6:	681b      	ldr	r3, [r3, #0]
 81006e8:	f043 0204 	orr.w	r2, r3, #4
 81006ec:	697b      	ldr	r3, [r7, #20]
 81006ee:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register &=  ~TIM_CR1_OPM;		// One Pulse mode désactivé
 81006f0:	697b      	ldr	r3, [r7, #20]
 81006f2:	681b      	ldr	r3, [r3, #0]
 81006f4:	f023 0208 	bic.w	r2, r3, #8
 81006f8:	697b      	ldr	r3, [r7, #20]
 81006fa:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register &=  ~TIM_CR1_DIR; 		// Direction upcounter
 81006fc:	697b      	ldr	r3, [r7, #20]
 81006fe:	681b      	ldr	r3, [r3, #0]
 8100700:	f023 0210 	bic.w	r2, r3, #16
 8100704:	697b      	ldr	r3, [r7, #20]
 8100706:	601a      	str	r2, [r3, #0]

	*TIM2_CR1_register &=  ~TIM_CR1_CMS;
 8100708:	697b      	ldr	r3, [r7, #20]
 810070a:	681b      	ldr	r3, [r3, #0]
 810070c:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8100710:	697b      	ldr	r3, [r7, #20]
 8100712:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register &=  ~TIM_CR1_CMS_1;		// Dependance DIR mode
 8100714:	697b      	ldr	r3, [r7, #20]
 8100716:	681b      	ldr	r3, [r3, #0]
 8100718:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 810071c:	697b      	ldr	r3, [r7, #20]
 810071e:	601a      	str	r2, [r3, #0]

	*TIM2_CR1_register &=  ~TIM_CR1_ARPE;		// Auto-reaload preload désactivé (no buffer)
 8100720:	697b      	ldr	r3, [r7, #20]
 8100722:	681b      	ldr	r3, [r3, #0]
 8100724:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8100728:	697b      	ldr	r3, [r7, #20]
 810072a:	601a      	str	r2, [r3, #0]

	*TIM2_CR1_register &=  ~TIM_CR1_CKD_0;		//T_ck_int division /4
 810072c:	697b      	ldr	r3, [r7, #20]
 810072e:	681b      	ldr	r3, [r3, #0]
 8100730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8100734:	697b      	ldr	r3, [r7, #20]
 8100736:	601a      	str	r2, [r3, #0]
	*TIM2_CR1_register |=  TIM_CR1_CKD_1;		//
 8100738:	697b      	ldr	r3, [r7, #20]
 810073a:	681b      	ldr	r3, [r3, #0]
 810073c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8100740:	697b      	ldr	r3, [r7, #20]
 8100742:	601a      	str	r2, [r3, #0]

	*TIM2_CR1_register |=  TIM_CR1_UIFREMAP;	// Remapping ** A VERIF **
 8100744:	697b      	ldr	r3, [r7, #20]
 8100746:	681b      	ldr	r3, [r3, #0]
 8100748:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 810074c:	697b      	ldr	r3, [r7, #20]
 810074e:	601a      	str	r2, [r3, #0]


	volatile uint32_t *TIM2_CR2_register = (volatile uint32_t *)((uint32_t)TIM2_BASE + TIM_offset.CR2);
 8100750:	4b39      	ldr	r3, [pc, #228]	@ (8100838 <tim2_config+0x17c>)
 8100752:	685b      	ldr	r3, [r3, #4]
 8100754:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8100758:	613b      	str	r3, [r7, #16]

	/* Pas de configuration pour master / slaves TIMERS */
	*TIM2_CR2_register &= ~TIM_CR2_TI1S;		// TIM2_CH1 pin connecté TI1 input
 810075a:	693b      	ldr	r3, [r7, #16]
 810075c:	681b      	ldr	r3, [r3, #0]
 810075e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8100762:	693b      	ldr	r3, [r7, #16]
 8100764:	601a      	str	r2, [r3, #0]


	volatile uint32_t *TIM2_SMCR_register = (volatile uint32_t *)((uint32_t)TIM2_BASE + TIM_offset.SMCR);
 8100766:	4b34      	ldr	r3, [pc, #208]	@ (8100838 <tim2_config+0x17c>)
 8100768:	689b      	ldr	r3, [r3, #8]
 810076a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810076e:	60fb      	str	r3, [r7, #12]

	*TIM2_SMCR_register &= ~TIM_SMCR_SMS_0; 	//  Slave mode désactivé
 8100770:	68fb      	ldr	r3, [r7, #12]
 8100772:	681b      	ldr	r3, [r3, #0]
 8100774:	f023 0201 	bic.w	r2, r3, #1
 8100778:	68fb      	ldr	r3, [r7, #12]
 810077a:	601a      	str	r2, [r3, #0]
	*TIM2_SMCR_register &= ~TIM_SMCR_SMS_1;
 810077c:	68fb      	ldr	r3, [r7, #12]
 810077e:	681b      	ldr	r3, [r3, #0]
 8100780:	f023 0202 	bic.w	r2, r3, #2
 8100784:	68fb      	ldr	r3, [r7, #12]
 8100786:	601a      	str	r2, [r3, #0]
	*TIM2_SMCR_register &= ~TIM_SMCR_SMS_2;
 8100788:	68fb      	ldr	r3, [r7, #12]
 810078a:	681b      	ldr	r3, [r3, #0]
 810078c:	f023 0204 	bic.w	r2, r3, #4
 8100790:	68fb      	ldr	r3, [r7, #12]
 8100792:	601a      	str	r2, [r3, #0]
	*TIM2_SMCR_register &= ~TIM_SMCR_SMS_3;
 8100794:	68fb      	ldr	r3, [r7, #12]
 8100796:	681b      	ldr	r3, [r3, #0]
 8100798:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810079c:	68fb      	ldr	r3, [r7, #12]
 810079e:	601a      	str	r2, [r3, #0]



	volatile uint32_t *TIM2_CCER_register = (volatile uint32_t *)((uint32_t)TIM2_BASE + TIM_offset.CCER);
 81007a0:	4b25      	ldr	r3, [pc, #148]	@ (8100838 <tim2_config+0x17c>)
 81007a2:	6a1b      	ldr	r3, [r3, #32]
 81007a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81007a8:	60bb      	str	r3, [r7, #8]

	*TIM2_CCER_register &= ~TIM_CCER_CC1NP; 	// CC1 OUTPUT
 81007aa:	68bb      	ldr	r3, [r7, #8]
 81007ac:	681b      	ldr	r3, [r3, #0]
 81007ae:	f023 0208 	bic.w	r2, r3, #8
 81007b2:	68bb      	ldr	r3, [r7, #8]
 81007b4:	601a      	str	r2, [r3, #0]
	*TIM2_CCER_register &= ~TIM_CCER_CC1P; 		// CC1 OUTPUT
 81007b6:	68bb      	ldr	r3, [r7, #8]
 81007b8:	681b      	ldr	r3, [r3, #0]
 81007ba:	f023 0202 	bic.w	r2, r3, #2
 81007be:	68bb      	ldr	r3, [r7, #8]
 81007c0:	601a      	str	r2, [r3, #0]

	*TIM2_CCER_register &= ~TIM_CCER_CC1E;		// OC1 désactivé pour configuration bit CC1S de CCMR1
 81007c2:	68bb      	ldr	r3, [r7, #8]
 81007c4:	681b      	ldr	r3, [r3, #0]
 81007c6:	f023 0201 	bic.w	r2, r3, #1
 81007ca:	68bb      	ldr	r3, [r7, #8]
 81007cc:	601a      	str	r2, [r3, #0]


	volatile uint32_t *TIM2_CCMR1_register = (volatile uint32_t *)((uint32_t)TIM2_BASE + TIM_offset.CCMR1);
 81007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8100838 <tim2_config+0x17c>)
 81007d0:	699b      	ldr	r3, [r3, #24]
 81007d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81007d6:	607b      	str	r3, [r7, #4]

	*TIM2_CCMR1_register |= TIM_CCMR1_OC2M_0;	// Comparaison COUNTER et CCR1 (overflow)
 81007d8:	687b      	ldr	r3, [r7, #4]
 81007da:	681b      	ldr	r3, [r3, #0]
 81007dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	601a      	str	r2, [r3, #0]
	*TIM2_CCMR1_register |= TIM_CCMR1_OC2M_1;
 81007e4:	687b      	ldr	r3, [r7, #4]
 81007e6:	681b      	ldr	r3, [r3, #0]
 81007e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 81007ec:	687b      	ldr	r3, [r7, #4]
 81007ee:	601a      	str	r2, [r3, #0]
	*TIM2_CCMR1_register &= ~TIM_CCMR1_OC2M_2;
 81007f0:	687b      	ldr	r3, [r7, #4]
 81007f2:	681b      	ldr	r3, [r3, #0]
 81007f4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	601a      	str	r2, [r3, #0]
	*TIM2_CCMR1_register &= ~TIM_CCMR1_OC2M_3;
 81007fc:	687b      	ldr	r3, [r7, #4]
 81007fe:	681b      	ldr	r3, [r3, #0]
 8100800:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8100804:	687b      	ldr	r3, [r7, #4]
 8100806:	601a      	str	r2, [r3, #0]

	*TIM2_CCMR1_register &= ~TIM_CCMR1_CC1S_0;	// CC1 configuré en OUTPUT
 8100808:	687b      	ldr	r3, [r7, #4]
 810080a:	681b      	ldr	r3, [r3, #0]
 810080c:	f023 0201 	bic.w	r2, r3, #1
 8100810:	687b      	ldr	r3, [r7, #4]
 8100812:	601a      	str	r2, [r3, #0]
	*TIM2_CCMR1_register &= ~TIM_CCMR1_CC1S_1;
 8100814:	687b      	ldr	r3, [r7, #4]
 8100816:	681b      	ldr	r3, [r3, #0]
 8100818:	f023 0202 	bic.w	r2, r3, #2
 810081c:	687b      	ldr	r3, [r7, #4]
 810081e:	601a      	str	r2, [r3, #0]

	*TIM2_CCER_register |= TIM_CCER_CC1E;		// OC1 activé
 8100820:	68bb      	ldr	r3, [r7, #8]
 8100822:	681b      	ldr	r3, [r3, #0]
 8100824:	f043 0201 	orr.w	r2, r3, #1
 8100828:	68bb      	ldr	r3, [r7, #8]
 810082a:	601a      	str	r2, [r3, #0]
}
 810082c:	bf00      	nop
 810082e:	371c      	adds	r7, #28
 8100830:	46bd      	mov	sp, r7
 8100832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100836:	4770      	bx	lr
 8100838:	100002e8 	.word	0x100002e8

0810083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810083c:	b580      	push	{r7, lr}
 810083e:	b084      	sub	sp, #16
 8100840:	af00      	add	r7, sp, #0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	power_clock_config();
 8100842:	f7ff fe4d 	bl	81004e0 <power_clock_config>
	flash_config();
 8100846:	f7ff fd5f 	bl	8100308 <flash_config>
	clock_config();
 810084a:	f7ff fe71 	bl	8100530 <clock_config>
	tim2_config();
 810084e:	f7ff ff35 	bl	81006bc <tim2_config>
	gpio_check_freq();
 8100852:	f7ff fd83 	bl	810035c <gpio_check_freq>

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 8100856:	4a04      	ldr	r2, [pc, #16]	@ (8100868 <main+0x2c>)
 8100858:	1d3b      	adds	r3, r7, #4
 810085a:	ca07      	ldmia	r2, {r0, r1, r2}
 810085c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blink_LED4();
 8100860:	f7ff fdfc 	bl	810045c <blink_LED4>
 8100864:	e7fc      	b.n	8100860 <main+0x24>
 8100866:	bf00      	nop
 8100868:	08100980 	.word	0x08100980

0810086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810086c:	b480      	push	{r7}
 810086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100870:	bf00      	nop
 8100872:	e7fd      	b.n	8100870 <NMI_Handler+0x4>

08100874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100874:	b480      	push	{r7}
 8100876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100878:	bf00      	nop
 810087a:	e7fd      	b.n	8100878 <HardFault_Handler+0x4>

0810087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810087c:	b480      	push	{r7}
 810087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100880:	bf00      	nop
 8100882:	e7fd      	b.n	8100880 <MemManage_Handler+0x4>

08100884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100884:	b480      	push	{r7}
 8100886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100888:	bf00      	nop
 810088a:	e7fd      	b.n	8100888 <BusFault_Handler+0x4>

0810088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810088c:	b480      	push	{r7}
 810088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100890:	bf00      	nop
 8100892:	e7fd      	b.n	8100890 <UsageFault_Handler+0x4>

08100894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100894:	b480      	push	{r7}
 8100896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100898:	bf00      	nop
 810089a:	46bd      	mov	sp, r7
 810089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a0:	4770      	bx	lr

081008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008a2:	b480      	push	{r7}
 81008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008a6:	bf00      	nop
 81008a8:	46bd      	mov	sp, r7
 81008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ae:	4770      	bx	lr

081008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008b0:	b480      	push	{r7}
 81008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008b4:	bf00      	nop
 81008b6:	46bd      	mov	sp, r7
 81008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008bc:	4770      	bx	lr

081008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008be:	b480      	push	{r7}
 81008c0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008c2:	bf00      	nop
 81008c4:	46bd      	mov	sp, r7
 81008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ca:	4770      	bx	lr

081008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81008cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81008d0:	f7ff fd02 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81008d4:	480c      	ldr	r0, [pc, #48]	@ (8100908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81008d6:	490d      	ldr	r1, [pc, #52]	@ (810090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8100910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81008dc:	e002      	b.n	81008e4 <LoopCopyDataInit>

081008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81008e2:	3304      	adds	r3, #4

081008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81008e8:	d3f9      	bcc.n	81008de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8100914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81008ec:	4c0a      	ldr	r4, [pc, #40]	@ (8100918 <LoopFillZerobss+0x22>)
  movs r3, #0
 81008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81008f0:	e001      	b.n	81008f6 <LoopFillZerobss>

081008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81008f4:	3204      	adds	r2, #4

081008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81008f8:	d3fb      	bcc.n	81008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81008fa:	f000 f811 	bl	8100920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81008fe:	f7ff ff9d 	bl	810083c <main>
  bx  lr
 8100902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100904:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100908:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810090c:	10000354 	.word	0x10000354
  ldr r2, =_sidata
 8100910:	08100994 	.word	0x08100994
  ldr r2, =_sbss
 8100914:	10000354 	.word	0x10000354
  ldr r4, =_ebss
 8100918:	10000370 	.word	0x10000370

0810091c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810091c:	e7fe      	b.n	810091c <ADC3_IRQHandler>
	...

08100920 <__libc_init_array>:
 8100920:	b570      	push	{r4, r5, r6, lr}
 8100922:	4d0d      	ldr	r5, [pc, #52]	@ (8100958 <__libc_init_array+0x38>)
 8100924:	4c0d      	ldr	r4, [pc, #52]	@ (810095c <__libc_init_array+0x3c>)
 8100926:	1b64      	subs	r4, r4, r5
 8100928:	10a4      	asrs	r4, r4, #2
 810092a:	2600      	movs	r6, #0
 810092c:	42a6      	cmp	r6, r4
 810092e:	d109      	bne.n	8100944 <__libc_init_array+0x24>
 8100930:	4d0b      	ldr	r5, [pc, #44]	@ (8100960 <__libc_init_array+0x40>)
 8100932:	4c0c      	ldr	r4, [pc, #48]	@ (8100964 <__libc_init_array+0x44>)
 8100934:	f000 f818 	bl	8100968 <_init>
 8100938:	1b64      	subs	r4, r4, r5
 810093a:	10a4      	asrs	r4, r4, #2
 810093c:	2600      	movs	r6, #0
 810093e:	42a6      	cmp	r6, r4
 8100940:	d105      	bne.n	810094e <__libc_init_array+0x2e>
 8100942:	bd70      	pop	{r4, r5, r6, pc}
 8100944:	f855 3b04 	ldr.w	r3, [r5], #4
 8100948:	4798      	blx	r3
 810094a:	3601      	adds	r6, #1
 810094c:	e7ee      	b.n	810092c <__libc_init_array+0xc>
 810094e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100952:	4798      	blx	r3
 8100954:	3601      	adds	r6, #1
 8100956:	e7f2      	b.n	810093e <__libc_init_array+0x1e>
 8100958:	0810098c 	.word	0x0810098c
 810095c:	0810098c 	.word	0x0810098c
 8100960:	0810098c 	.word	0x0810098c
 8100964:	08100990 	.word	0x08100990

08100968 <_init>:
 8100968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810096a:	bf00      	nop
 810096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810096e:	bc08      	pop	{r3}
 8100970:	469e      	mov	lr, r3
 8100972:	4770      	bx	lr

08100974 <_fini>:
 8100974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100976:	bf00      	nop
 8100978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810097a:	bc08      	pop	{r3}
 810097c:	469e      	mov	lr, r3
 810097e:	4770      	bx	lr
