
STM32_USART_DRIVER_LL_V2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d8  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08100770  08100770  00001770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810077c  0810077c  0000177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100780  08100780  00001780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  10000000  10000000  00001784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000000  08100784  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000001c  08100784  0000201c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001f70  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000653  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000160  00000000  00000000  00003d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000e8  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032786  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000029aa  00000000  00000000  00036746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121314  00000000  00000000  000390f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015a404  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000318  00000000  00000000  0015a448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  0015a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000000 	.word	0x10000000
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100758 	.word	0x08100758

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000004 	.word	0x10000004
 81002d4:	08100758 	.word	0x08100758

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <gpio_check_freq>:
#include "GPIO.h"

/*----------------------------------------------------------------------------*/


void gpio_check_freq(void){
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
	/*
	 * Configuration de la sortie de la clock systeme sur GPIO PA8
	*/

	// Alternante function sur PA8
	GPIOA -> MODER &= ~GPIO_MODER_MODE8_0;
 810030c:	4b26      	ldr	r3, [pc, #152]	@ (81003a8 <gpio_check_freq+0xa0>)
 810030e:	681b      	ldr	r3, [r3, #0]
 8100310:	4a25      	ldr	r2, [pc, #148]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100316:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE8_1;
 8100318:	4b23      	ldr	r3, [pc, #140]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031a:	681b      	ldr	r3, [r3, #0]
 810031c:	4a22      	ldr	r2, [pc, #136]	@ (81003a8 <gpio_check_freq+0xa0>)
 810031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100322:	6013      	str	r3, [r2, #0]


	// Choix de la fonction alternative --> MCO1 sur PA8 --> AF0 --> 0000

	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_0;
 8100324:	4b20      	ldr	r3, [pc, #128]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100328:	4a1f      	ldr	r2, [pc, #124]	@ (81003a8 <gpio_check_freq+0xa0>)
 810032a:	f023 0301 	bic.w	r3, r3, #1
 810032e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_1;
 8100330:	4b1d      	ldr	r3, [pc, #116]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100334:	4a1c      	ldr	r2, [pc, #112]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100336:	f023 0302 	bic.w	r3, r3, #2
 810033a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_2;
 810033c:	4b1a      	ldr	r3, [pc, #104]	@ (81003a8 <gpio_check_freq+0xa0>)
 810033e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100340:	4a19      	ldr	r2, [pc, #100]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100342:	f023 0304 	bic.w	r3, r3, #4
 8100346:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &= ~GPIO_AFRH_AFSEL8_3;
 8100348:	4b17      	ldr	r3, [pc, #92]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810034c:	4a16      	ldr	r2, [pc, #88]	@ (81003a8 <gpio_check_freq+0xa0>)
 810034e:	f023 0308 	bic.w	r3, r3, #8
 8100352:	6253      	str	r3, [r2, #36]	@ 0x24
	/*
	 * Configuration de la sortie du TIM2 sur GPIO PA0
	*/

	// Alternate function sur PA0
	GPIOA -> MODER &= ~GPIO_MODER_MODE0_0;
 8100354:	4b14      	ldr	r3, [pc, #80]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100356:	681b      	ldr	r3, [r3, #0]
 8100358:	4a13      	ldr	r2, [pc, #76]	@ (81003a8 <gpio_check_freq+0xa0>)
 810035a:	f023 0301 	bic.w	r3, r3, #1
 810035e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE0_1;
 8100360:	4b11      	ldr	r3, [pc, #68]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100362:	681b      	ldr	r3, [r3, #0]
 8100364:	4a10      	ldr	r2, [pc, #64]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100366:	f043 0302 	orr.w	r3, r3, #2
 810036a:	6013      	str	r3, [r2, #0]

	// Choix de la fonction alternative --> TIM2_CH1 sur PA0 --> AF1 --> 0001

	GPIOA -> AFR[0] |= GPIO_AFRL_AFSEL0_0;
 810036c:	4b0e      	ldr	r3, [pc, #56]	@ (81003a8 <gpio_check_freq+0xa0>)
 810036e:	6a1b      	ldr	r3, [r3, #32]
 8100370:	4a0d      	ldr	r2, [pc, #52]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100372:	f043 0301 	orr.w	r3, r3, #1
 8100376:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_1;
 8100378:	4b0b      	ldr	r3, [pc, #44]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037a:	6a1b      	ldr	r3, [r3, #32]
 810037c:	4a0a      	ldr	r2, [pc, #40]	@ (81003a8 <gpio_check_freq+0xa0>)
 810037e:	f023 0302 	bic.w	r3, r3, #2
 8100382:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_2;
 8100384:	4b08      	ldr	r3, [pc, #32]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100386:	6a1b      	ldr	r3, [r3, #32]
 8100388:	4a07      	ldr	r2, [pc, #28]	@ (81003a8 <gpio_check_freq+0xa0>)
 810038a:	f023 0304 	bic.w	r3, r3, #4
 810038e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~GPIO_AFRL_AFSEL0_3;
 8100390:	4b05      	ldr	r3, [pc, #20]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100392:	6a1b      	ldr	r3, [r3, #32]
 8100394:	4a04      	ldr	r2, [pc, #16]	@ (81003a8 <gpio_check_freq+0xa0>)
 8100396:	f023 0308 	bic.w	r3, r3, #8
 810039a:	6213      	str	r3, [r2, #32]





}
 810039c:	bf00      	nop
 810039e:	46bd      	mov	sp, r7
 81003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a4:	4770      	bx	lr
 81003a6:	bf00      	nop
 81003a8:	58020000 	.word	0x58020000

081003ac <gpio_config>:
	uint32_t i;

	for(i=0; i<nb; i++){}
}

void gpio_config(void){
 81003ac:	b480      	push	{r7}
 81003ae:	af00      	add	r7, sp, #0

	//Activation de la clock sur GPIO K
	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOKEN;
 81003b0:	4b0c      	ldr	r3, [pc, #48]	@ (81003e4 <gpio_config+0x38>)
 81003b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003b6:	4a0b      	ldr	r2, [pc, #44]	@ (81003e4 <gpio_config+0x38>)
 81003b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81003bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Configuration de PK6 en OUPTUT
	GPIOK -> MODER |= GPIO_MODER_MODE6_0;
 81003c0:	4b09      	ldr	r3, [pc, #36]	@ (81003e8 <gpio_config+0x3c>)
 81003c2:	681b      	ldr	r3, [r3, #0]
 81003c4:	4a08      	ldr	r2, [pc, #32]	@ (81003e8 <gpio_config+0x3c>)
 81003c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81003ca:	6013      	str	r3, [r2, #0]
	GPIOK -> MODER &= ~ GPIO_MODER_MODE6_1;
 81003cc:	4b06      	ldr	r3, [pc, #24]	@ (81003e8 <gpio_config+0x3c>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	4a05      	ldr	r2, [pc, #20]	@ (81003e8 <gpio_config+0x3c>)
 81003d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81003d6:	6013      	str	r3, [r2, #0]
}
 81003d8:	bf00      	nop
 81003da:	46bd      	mov	sp, r7
 81003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e0:	4770      	bx	lr
 81003e2:	bf00      	nop
 81003e4:	58024400 	.word	0x58024400
 81003e8:	58022800 	.word	0x58022800

081003ec <clock_config>:
 */

#include <stdint.h>
#include "RCC_CLOCK.h"

void clock_config(){
 81003ec:	b480      	push	{r7}
 81003ee:	af00      	add	r7, sp, #0


	RCC -> RSR |= RCC_RSR_SFT2RSTF; 					// Reset des registres du CPU2
 81003f0:	4b4c      	ldr	r3, [pc, #304]	@ (8100524 <clock_config+0x138>)
 81003f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 81003f6:	4a4b      	ldr	r2, [pc, #300]	@ (8100524 <clock_config+0x138>)
 81003f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81003fc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

	*RCC_CIER_register |= RCC_CIER_PLL1RDYIE; 				// Activer les interruptions sur flag PLL1 READY
	*RCC_CICR_register |= RCC_CICR_PLLRDYC; 				// reset interruptions sur flag PLL1 READY
	*/

	RCC -> CR |= RCC_CR_HSEON; 							// Clock HSE on
 8100400:	4b48      	ldr	r3, [pc, #288]	@ (8100524 <clock_config+0x138>)
 8100402:	681b      	ldr	r3, [r3, #0]
 8100404:	4a47      	ldr	r2, [pc, #284]	@ (8100524 <clock_config+0x138>)
 8100406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810040a:	6013      	str	r3, [r2, #0]
	RCC -> CFGR |= RCC_CFGR_SW_HSE; 					// Sys CLK sur HSE
 810040c:	4b45      	ldr	r3, [pc, #276]	@ (8100524 <clock_config+0x138>)
 810040e:	691b      	ldr	r3, [r3, #16]
 8100410:	4a44      	ldr	r2, [pc, #272]	@ (8100524 <clock_config+0x138>)
 8100412:	f043 0302 	orr.w	r3, r3, #2
 8100416:	6113      	str	r3, [r2, #16]

	RCC -> CR &= ~RCC_CR_HSION; 						// Clock HSI off
 8100418:	4b42      	ldr	r3, [pc, #264]	@ (8100524 <clock_config+0x138>)
 810041a:	681b      	ldr	r3, [r3, #0]
 810041c:	4a41      	ldr	r2, [pc, #260]	@ (8100524 <clock_config+0x138>)
 810041e:	f023 0301 	bic.w	r3, r3, #1
 8100422:	6013      	str	r3, [r2, #0]
	RCC -> CR &= RCC_CR_HSIDIV_1; 						// RAZ prescaler HSI
 8100424:	4b3f      	ldr	r3, [pc, #252]	@ (8100524 <clock_config+0x138>)
 8100426:	681b      	ldr	r3, [r3, #0]
 8100428:	4b3e      	ldr	r3, [pc, #248]	@ (8100524 <clock_config+0x138>)
 810042a:	2200      	movs	r2, #0
 810042c:	601a      	str	r2, [r3, #0]
	RCC -> CR |= RCC_CR_HSIDIV_8; 						// Prescaler HSI /8
 810042e:	4b3d      	ldr	r3, [pc, #244]	@ (8100524 <clock_config+0x138>)
 8100430:	681b      	ldr	r3, [r3, #0]
 8100432:	4a3c      	ldr	r2, [pc, #240]	@ (8100524 <clock_config+0x138>)
 8100434:	f043 0318 	orr.w	r3, r3, #24
 8100438:	6013      	str	r3, [r2, #0]

	/* ------------ MUX MCO1 sur HSI [0, 0, 0] ------------ */
	RCC -> CFGR &= ~RCC_CFGR_MCO1_0;
 810043a:	4b3a      	ldr	r3, [pc, #232]	@ (8100524 <clock_config+0x138>)
 810043c:	691b      	ldr	r3, [r3, #16]
 810043e:	4a39      	ldr	r2, [pc, #228]	@ (8100524 <clock_config+0x138>)
 8100440:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8100444:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_1;
 8100446:	4b37      	ldr	r3, [pc, #220]	@ (8100524 <clock_config+0x138>)
 8100448:	691b      	ldr	r3, [r3, #16]
 810044a:	4a36      	ldr	r2, [pc, #216]	@ (8100524 <clock_config+0x138>)
 810044c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8100450:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1_2;
 8100452:	4b34      	ldr	r3, [pc, #208]	@ (8100524 <clock_config+0x138>)
 8100454:	691b      	ldr	r3, [r3, #16]
 8100456:	4a33      	ldr	r2, [pc, #204]	@ (8100524 <clock_config+0x138>)
 8100458:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810045c:	6113      	str	r3, [r2, #16]

	RCC -> CFGR &= RCC_CFGR_SW_HSI; 						// Sys CLK sur HSI
 810045e:	4b31      	ldr	r3, [pc, #196]	@ (8100524 <clock_config+0x138>)
 8100460:	691b      	ldr	r3, [r3, #16]
 8100462:	4b30      	ldr	r3, [pc, #192]	@ (8100524 <clock_config+0x138>)
 8100464:	2200      	movs	r2, #0
 8100466:	611a      	str	r2, [r3, #16]

	/* ------- Division par 10 à la sortie sur MCO1 ------- */
	RCC -> CFGR &= ~RCC_CFGR_MCO1PRE_0;
 8100468:	4b2e      	ldr	r3, [pc, #184]	@ (8100524 <clock_config+0x138>)
 810046a:	691b      	ldr	r3, [r3, #16]
 810046c:	4a2d      	ldr	r2, [pc, #180]	@ (8100524 <clock_config+0x138>)
 810046e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8100472:	6113      	str	r3, [r2, #16]
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_1;
 8100474:	4b2b      	ldr	r3, [pc, #172]	@ (8100524 <clock_config+0x138>)
 8100476:	691b      	ldr	r3, [r3, #16]
 8100478:	4a2a      	ldr	r2, [pc, #168]	@ (8100524 <clock_config+0x138>)
 810047a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810047e:	6113      	str	r3, [r2, #16]
	RCC -> CFGR &= ~RCC_CFGR_MCO1PRE_2;
 8100480:	4b28      	ldr	r3, [pc, #160]	@ (8100524 <clock_config+0x138>)
 8100482:	691b      	ldr	r3, [r3, #16]
 8100484:	4a27      	ldr	r2, [pc, #156]	@ (8100524 <clock_config+0x138>)
 8100486:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810048a:	6113      	str	r3, [r2, #16]
	RCC -> CFGR |= RCC_CFGR_MCO1PRE_3;
 810048c:	4b25      	ldr	r3, [pc, #148]	@ (8100524 <clock_config+0x138>)
 810048e:	691b      	ldr	r3, [r3, #16]
 8100490:	4a24      	ldr	r2, [pc, #144]	@ (8100524 <clock_config+0x138>)
 8100492:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8100496:	6113      	str	r3, [r2, #16]

	RCC -> CR |= RCC_CR_HSION; 							// Clock HSI on
 8100498:	4b22      	ldr	r3, [pc, #136]	@ (8100524 <clock_config+0x138>)
 810049a:	681b      	ldr	r3, [r3, #0]
 810049c:	4a21      	ldr	r2, [pc, #132]	@ (8100524 <clock_config+0x138>)
 810049e:	f043 0301 	orr.w	r3, r3, #1
 81004a2:	6013      	str	r3, [r2, #0]
	while(((RCC -> CR >> 2) & 0x1) != 1) ; 				// Attente HSI stable
 81004a4:	bf00      	nop
 81004a6:	4b1f      	ldr	r3, [pc, #124]	@ (8100524 <clock_config+0x138>)
 81004a8:	681b      	ldr	r3, [r3, #0]
 81004aa:	089b      	lsrs	r3, r3, #2
 81004ac:	f003 0301 	and.w	r3, r3, #1
 81004b0:	2b01      	cmp	r3, #1
 81004b2:	d1f8      	bne.n	81004a6 <clock_config+0xba>

	RCC -> CR &= ~RCC_CR_HSEON; 						// Clock HSE off
 81004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8100524 <clock_config+0x138>)
 81004b6:	681b      	ldr	r3, [r3, #0]
 81004b8:	4a1a      	ldr	r2, [pc, #104]	@ (8100524 <clock_config+0x138>)
 81004ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81004be:	6013      	str	r3, [r2, #0]


	while(((RCC -> CR >> 14) & 0x1) != 1) ; 			// Clock domain stable D1
 81004c0:	bf00      	nop
 81004c2:	4b18      	ldr	r3, [pc, #96]	@ (8100524 <clock_config+0x138>)
 81004c4:	681b      	ldr	r3, [r3, #0]
 81004c6:	0b9b      	lsrs	r3, r3, #14
 81004c8:	f003 0301 	and.w	r3, r3, #1
 81004cc:	2b01      	cmp	r3, #1
 81004ce:	d1f8      	bne.n	81004c2 <clock_config+0xd6>
	while(((RCC -> CR >> 15) & 0x1) != 1) ;				// -				   D2
 81004d0:	bf00      	nop
 81004d2:	4b14      	ldr	r3, [pc, #80]	@ (8100524 <clock_config+0x138>)
 81004d4:	681b      	ldr	r3, [r3, #0]
 81004d6:	0bdb      	lsrs	r3, r3, #15
 81004d8:	f003 0301 	and.w	r3, r3, #1
 81004dc:	2b01      	cmp	r3, #1
 81004de:	d1f8      	bne.n	81004d2 <clock_config+0xe6>
	RCC -> CR |= RCC_CR_PLL1ON; // PLL1 OFF
	while(((RCC -> CR >> 25) & 0x1) != 1) ; 			// PLL1 clock ready
	RCC -> CR |= RCC_CFGR_SW_PLL1; 						// Sys CLK sur PLL1
	*/

	RCC -> D1CFGR &= ~RCC_D1CFGR_HPRE_DIV1; 			// HPRE PRESCALER /0
 81004e0:	4b10      	ldr	r3, [pc, #64]	@ (8100524 <clock_config+0x138>)
 81004e2:	4a10      	ldr	r2, [pc, #64]	@ (8100524 <clock_config+0x138>)
 81004e4:	699b      	ldr	r3, [r3, #24]
 81004e6:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1PPRE_DIV1; 			// D1PPRE PRESCALER /0
 81004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8100524 <clock_config+0x138>)
 81004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8100524 <clock_config+0x138>)
 81004ec:	699b      	ldr	r3, [r3, #24]
 81004ee:	6193      	str	r3, [r2, #24]
	RCC -> D1CFGR &= ~RCC_D1CFGR_D1CPRE_DIV1; 			// D1CPRE PRESCALER /0
 81004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8100524 <clock_config+0x138>)
 81004f2:	4a0c      	ldr	r2, [pc, #48]	@ (8100524 <clock_config+0x138>)
 81004f4:	699b      	ldr	r3, [r3, #24]
 81004f6:	6193      	str	r3, [r2, #24]

	/*
	 * Mise à ON des clock périphériques
	*/

	RCC -> AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 81004f8:	4b0a      	ldr	r3, [pc, #40]	@ (8100524 <clock_config+0x138>)
 81004fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004fe:	4a09      	ldr	r2, [pc, #36]	@ (8100524 <clock_config+0x138>)
 8100500:	f043 0301 	orr.w	r3, r3, #1
 8100504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	RCC -> APB1LENR |= RCC_APB1LENR_TIM2EN;
 8100508:	4b06      	ldr	r3, [pc, #24]	@ (8100524 <clock_config+0x138>)
 810050a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810050e:	4a05      	ldr	r2, [pc, #20]	@ (8100524 <clock_config+0x138>)
 8100510:	f043 0301 	orr.w	r3, r3, #1
 8100514:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

}
 8100518:	bf00      	nop
 810051a:	46bd      	mov	sp, r7
 810051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100520:	4770      	bx	lr
 8100522:	bf00      	nop
 8100524:	58024400 	.word	0x58024400

08100528 <tim2_config>:

#include <stdint.h>
#include "TIM.h"


void tim2_config(){
 8100528:	b480      	push	{r7}
 810052a:	af00      	add	r7, sp, #0
	//TIM2 -> CCMR1 &= ~TIM_CCMR1_OC1M_3;



	//TIM2 -> CCR1 |= 500; 			// Valeur comparaison avec CNT
	TIM2 -> ARR &= 0x0;
 810052c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100532:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100536:	2200      	movs	r2, #0
 8100538:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2 -> ARR |= 0x190;			// 0d = 400
 810053a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810053e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100540:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100544:	f443 73c8 	orr.w	r3, r3, #400	@ 0x190
 8100548:	62d3      	str	r3, [r2, #44]	@ 0x2c

	//Configuration du prescaler
	TIM2 -> PSC |= 0x4E20;			// 0xd = 20000
 810054a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810054e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100554:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 8100558:	f043 0320 	orr.w	r3, r3, #32
 810055c:	6293      	str	r3, [r2, #40]	@ 0x28
	//TIM2 -> DIER |= TIM_CCER_CC1E;		// OC1 activé

	//TIM2 -> EGR = TIM_EGR_CC1G;		// Génère flag
	//TIM2 -> EGR = TIM_EGR_UG;

	TIM2 -> CR1 |= TIM_CR1_CEN;			// Counter activé
 810055e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100562:	681b      	ldr	r3, [r3, #0]
 8100564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100568:	f043 0301 	orr.w	r3, r3, #1
 810056c:	6013      	str	r3, [r2, #0]

}
 810056e:	bf00      	nop
 8100570:	46bd      	mov	sp, r7
 8100572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100576:	4770      	bx	lr

08100578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100578:	b480      	push	{r7}
 810057a:	b085      	sub	sp, #20
 810057c:	af00      	add	r7, sp, #0
 810057e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100580:	687b      	ldr	r3, [r7, #4]
 8100582:	f003 0307 	and.w	r3, r3, #7
 8100586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100588:	4b0c      	ldr	r3, [pc, #48]	@ (81005bc <__NVIC_SetPriorityGrouping+0x44>)
 810058a:	68db      	ldr	r3, [r3, #12]
 810058c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810058e:	68ba      	ldr	r2, [r7, #8]
 8100590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100594:	4013      	ands	r3, r2
 8100596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100598:	68fb      	ldr	r3, [r7, #12]
 810059a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810059c:	68bb      	ldr	r3, [r7, #8]
 810059e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81005a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81005a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81005a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81005aa:	4a04      	ldr	r2, [pc, #16]	@ (81005bc <__NVIC_SetPriorityGrouping+0x44>)
 81005ac:	68bb      	ldr	r3, [r7, #8]
 81005ae:	60d3      	str	r3, [r2, #12]
}
 81005b0:	bf00      	nop
 81005b2:	3714      	adds	r7, #20
 81005b4:	46bd      	mov	sp, r7
 81005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ba:	4770      	bx	lr
 81005bc:	e000ed00 	.word	0xe000ed00

081005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81005c0:	b480      	push	{r7}
 81005c2:	b083      	sub	sp, #12
 81005c4:	af00      	add	r7, sp, #0
 81005c6:	4603      	mov	r3, r0
 81005c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81005ce:	2b00      	cmp	r3, #0
 81005d0:	db0b      	blt.n	81005ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81005d2:	88fb      	ldrh	r3, [r7, #6]
 81005d4:	f003 021f 	and.w	r2, r3, #31
 81005d8:	4907      	ldr	r1, [pc, #28]	@ (81005f8 <__NVIC_EnableIRQ+0x38>)
 81005da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81005de:	095b      	lsrs	r3, r3, #5
 81005e0:	2001      	movs	r0, #1
 81005e2:	fa00 f202 	lsl.w	r2, r0, r2
 81005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81005ea:	bf00      	nop
 81005ec:	370c      	adds	r7, #12
 81005ee:	46bd      	mov	sp, r7
 81005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f4:	4770      	bx	lr
 81005f6:	bf00      	nop
 81005f8:	e000e100 	.word	0xe000e100

081005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005fc:	b580      	push	{r7, lr}
 81005fe:	b084      	sub	sp, #16
 8100600:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);

  /* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100602:	2003      	movs	r0, #3
 8100604:	f7ff ffb8 	bl	8100578 <__NVIC_SetPriorityGrouping>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	//power_clock_config();
	//flash_config();
	clock_config();
 8100608:	f7ff fef0 	bl	81003ec <clock_config>
	tim2_config();
 810060c:	f7ff ff8c 	bl	8100528 <tim2_config>
	NVIC_EnableIRQ(TIM2_IRQn); 				// Interruption 28 pour TIM2, confirmer le placement (après les configs ?)
 8100610:	201c      	movs	r0, #28
 8100612:	f7ff ffd5 	bl	81005c0 <__NVIC_EnableIRQ>

	gpio_config();
 8100616:	f7ff fec9 	bl	81003ac <gpio_config>
	gpio_check_freq();
 810061a:	f7ff fe75 	bl	8100308 <gpio_check_freq>

	/* Configuration de la liaison USART */
	 USART_Config_t usart_config = {
 810061e:	4a0d      	ldr	r2, [pc, #52]	@ (8100654 <main+0x58>)
 8100620:	1d3b      	adds	r3, r7, #4
 8100622:	ca07      	ldmia	r2, {r0, r1, r2}
 8100624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	 int temp;

	 while (1)
	 {

		if(((TIM2 -> SR >> TIM_SR_UIF_Pos) & 0x1) == 1){
 8100628:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810062c:	691b      	ldr	r3, [r3, #16]
 810062e:	f003 0301 	and.w	r3, r3, #1
 8100632:	2b01      	cmp	r3, #1
 8100634:	d1f8      	bne.n	8100628 <main+0x2c>

			GPIOK -> ODR ^= GPIO_ODR_OD6;
 8100636:	4b08      	ldr	r3, [pc, #32]	@ (8100658 <main+0x5c>)
 8100638:	695b      	ldr	r3, [r3, #20]
 810063a:	4a07      	ldr	r2, [pc, #28]	@ (8100658 <main+0x5c>)
 810063c:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8100640:	6153      	str	r3, [r2, #20]
			else{
				temp = 1;
				GPIOK -> BSRR |= GPIO_BSRR_BR6;
			}
*/
			TIM2 -> SR &= ~TIM_SR_UIF;
 8100642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100646:	691b      	ldr	r3, [r3, #16]
 8100648:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810064c:	f023 0301 	bic.w	r3, r3, #1
 8100650:	6113      	str	r3, [r2, #16]
		if(((TIM2 -> SR >> TIM_SR_UIF_Pos) & 0x1) == 1){
 8100652:	e7e9      	b.n	8100628 <main+0x2c>
 8100654:	08100770 	.word	0x08100770
 8100658:	58022800 	.word	0x58022800

0810065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810065c:	b480      	push	{r7}
 810065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100660:	bf00      	nop
 8100662:	e7fd      	b.n	8100660 <NMI_Handler+0x4>

08100664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100664:	b480      	push	{r7}
 8100666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100668:	bf00      	nop
 810066a:	e7fd      	b.n	8100668 <HardFault_Handler+0x4>

0810066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810066c:	b480      	push	{r7}
 810066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100670:	bf00      	nop
 8100672:	e7fd      	b.n	8100670 <MemManage_Handler+0x4>

08100674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100674:	b480      	push	{r7}
 8100676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100678:	bf00      	nop
 810067a:	e7fd      	b.n	8100678 <BusFault_Handler+0x4>

0810067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810067c:	b480      	push	{r7}
 810067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100680:	bf00      	nop
 8100682:	e7fd      	b.n	8100680 <UsageFault_Handler+0x4>

08100684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100684:	b480      	push	{r7}
 8100686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100688:	bf00      	nop
 810068a:	46bd      	mov	sp, r7
 810068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100690:	4770      	bx	lr

08100692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100692:	b480      	push	{r7}
 8100694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100696:	bf00      	nop
 8100698:	46bd      	mov	sp, r7
 810069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810069e:	4770      	bx	lr

081006a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81006a0:	b480      	push	{r7}
 81006a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81006a4:	bf00      	nop
 81006a6:	46bd      	mov	sp, r7
 81006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ac:	4770      	bx	lr

081006ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81006ae:	b480      	push	{r7}
 81006b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81006b2:	bf00      	nop
 81006b4:	46bd      	mov	sp, r7
 81006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ba:	4770      	bx	lr

081006bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81006bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81006f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81006c0:	f7ff fe0a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81006c4:	480c      	ldr	r0, [pc, #48]	@ (81006f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81006c6:	490d      	ldr	r1, [pc, #52]	@ (81006fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8100700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81006cc:	e002      	b.n	81006d4 <LoopCopyDataInit>

081006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81006d2:	3304      	adds	r3, #4

081006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81006d8:	d3f9      	bcc.n	81006ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81006da:	4a0a      	ldr	r2, [pc, #40]	@ (8100704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81006dc:	4c0a      	ldr	r4, [pc, #40]	@ (8100708 <LoopFillZerobss+0x22>)
  movs r3, #0
 81006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 81006e0:	e001      	b.n	81006e6 <LoopFillZerobss>

081006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81006e4:	3204      	adds	r2, #4

081006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81006e8:	d3fb      	bcc.n	81006e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81006ea:	f000 f811 	bl	8100710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81006ee:	f7ff ff85 	bl	81005fc <main>
  bx  lr
 81006f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81006f4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81006f8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81006fc:	10000000 	.word	0x10000000
  ldr r2, =_sidata
 8100700:	08100784 	.word	0x08100784
  ldr r2, =_sbss
 8100704:	10000000 	.word	0x10000000
  ldr r4, =_ebss
 8100708:	1000001c 	.word	0x1000001c

0810070c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810070c:	e7fe      	b.n	810070c <ADC3_IRQHandler>
	...

08100710 <__libc_init_array>:
 8100710:	b570      	push	{r4, r5, r6, lr}
 8100712:	4d0d      	ldr	r5, [pc, #52]	@ (8100748 <__libc_init_array+0x38>)
 8100714:	4c0d      	ldr	r4, [pc, #52]	@ (810074c <__libc_init_array+0x3c>)
 8100716:	1b64      	subs	r4, r4, r5
 8100718:	10a4      	asrs	r4, r4, #2
 810071a:	2600      	movs	r6, #0
 810071c:	42a6      	cmp	r6, r4
 810071e:	d109      	bne.n	8100734 <__libc_init_array+0x24>
 8100720:	4d0b      	ldr	r5, [pc, #44]	@ (8100750 <__libc_init_array+0x40>)
 8100722:	4c0c      	ldr	r4, [pc, #48]	@ (8100754 <__libc_init_array+0x44>)
 8100724:	f000 f818 	bl	8100758 <_init>
 8100728:	1b64      	subs	r4, r4, r5
 810072a:	10a4      	asrs	r4, r4, #2
 810072c:	2600      	movs	r6, #0
 810072e:	42a6      	cmp	r6, r4
 8100730:	d105      	bne.n	810073e <__libc_init_array+0x2e>
 8100732:	bd70      	pop	{r4, r5, r6, pc}
 8100734:	f855 3b04 	ldr.w	r3, [r5], #4
 8100738:	4798      	blx	r3
 810073a:	3601      	adds	r6, #1
 810073c:	e7ee      	b.n	810071c <__libc_init_array+0xc>
 810073e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100742:	4798      	blx	r3
 8100744:	3601      	adds	r6, #1
 8100746:	e7f2      	b.n	810072e <__libc_init_array+0x1e>
 8100748:	0810077c 	.word	0x0810077c
 810074c:	0810077c 	.word	0x0810077c
 8100750:	0810077c 	.word	0x0810077c
 8100754:	08100780 	.word	0x08100780

08100758 <_init>:
 8100758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810075a:	bf00      	nop
 810075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810075e:	bc08      	pop	{r3}
 8100760:	469e      	mov	lr, r3
 8100762:	4770      	bx	lr

08100764 <_fini>:
 8100764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100766:	bf00      	nop
 8100768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810076a:	bc08      	pop	{r3}
 810076c:	469e      	mov	lr, r3
 810076e:	4770      	bx	lr
